import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, J as space, f as element, y as text, F as create_component, L as query_selector_all, j as detach_dev, K as claim_space, g as claim_element, h as children, z as claim_text, G as claim_component, k as attr_dev, l as add_location, n as insert_dev, o as append_dev, H as mount_component, r as transition_in, t as transition_out, I as destroy_component, B as noop } from './client.e0516f61.js';
import { B as Breadcrumb, a as BreadcrumbItem } from './BreadcrumbItem.19963503.js';
import './CardBody.884d6112.js';
import './CardHeader.d9d2f400.js';
import './CardText.eca0487a.js';
import './CardSubtitle.2c133be3.js';
import { R as Row } from './Row.a3f7b6c7.js';
import './CardFooter.f945c30f.js';
import './Table.c2044e81.js';
import './Progress.1ced8478.js';
import './FormGroup.6ef0f15e.js';
import './Col.9b43858d.js';
import './FormText.a3488026.js';
import './ButtonGroup.96688a79.js';
import './Alert.ae911291.js';
import './Badge.c88e6f6b.js';
import { P as Pagination, a as PaginationItem, b as PaginationLink } from './index.ab745b3e.js';
import './ButtonToolbar.60aea129.js';
import './CardTitle.a870f795.js';
import './CarouselCaption.969e3eaf.js';
import './ModalHeader.d39da6e7.js';
import './UncontrolledCollapse.6224a840.js';

/* src\routes\ui\pagination.svelte generated by Svelte v3.18.1 */
const file = "src\\routes\\ui\\pagination.svelte";

// (27:4) <BreadcrumbItem active>
function create_default_slot_40(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Пагинация");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Пагинация");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_40.name,
		type: "slot",
		source: "(27:4) <BreadcrumbItem active>",
		ctx
	});

	return block;
}

// (26:0) <Breadcrumb class="mb-4">
function create_default_slot_39(ctx) {
	let current;

	const breadcrumbitem = new BreadcrumbItem({
			props: {
				active: true,
				$$slots: { default: [create_default_slot_40] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(breadcrumbitem.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(breadcrumbitem.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(breadcrumbitem, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const breadcrumbitem_changes = {};

			if (dirty & /*$$scope*/ 4) {
				breadcrumbitem_changes.$$scope = { dirty, ctx };
			}

			breadcrumbitem.$set(breadcrumbitem_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(breadcrumbitem.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(breadcrumbitem.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(breadcrumbitem, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_39.name,
		type: "slot",
		source: "(26:0) <Breadcrumb class=\\\"mb-4\\\">",
		ctx
	});

	return block;
}

// (46:12) <PaginationItem disabled>
function create_default_slot_38(ctx) {
	let current;

	const paginationlink = new PaginationLink({
			props: { first: true, href: "#" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(paginationlink.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(paginationlink.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(paginationlink, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(paginationlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paginationlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(paginationlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_38.name,
		type: "slot",
		source: "(46:12) <PaginationItem disabled>",
		ctx
	});

	return block;
}

// (49:12) <PaginationItem disabled>
function create_default_slot_37(ctx) {
	let current;

	const paginationlink = new PaginationLink({
			props: { previous: true, href: "#" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(paginationlink.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(paginationlink.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(paginationlink, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(paginationlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paginationlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(paginationlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_37.name,
		type: "slot",
		source: "(49:12) <PaginationItem disabled>",
		ctx
	});

	return block;
}

// (53:16) <PaginationLink href="#">
function create_default_slot_36(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("1");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "1");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_36.name,
		type: "slot",
		source: "(53:16) <PaginationLink href=\\\"#\\\">",
		ctx
	});

	return block;
}

// (52:12) <PaginationItem active>
function create_default_slot_35(ctx) {
	let current;

	const paginationlink = new PaginationLink({
			props: {
				href: "#",
				$$slots: { default: [create_default_slot_36] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(paginationlink.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(paginationlink.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(paginationlink, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const paginationlink_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationlink_changes.$$scope = { dirty, ctx };
			}

			paginationlink.$set(paginationlink_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(paginationlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paginationlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(paginationlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_35.name,
		type: "slot",
		source: "(52:12) <PaginationItem active>",
		ctx
	});

	return block;
}

// (56:16) <PaginationLink href="#">
function create_default_slot_34(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("2");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "2");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_34.name,
		type: "slot",
		source: "(56:16) <PaginationLink href=\\\"#\\\">",
		ctx
	});

	return block;
}

// (55:12) <PaginationItem>
function create_default_slot_33(ctx) {
	let current;

	const paginationlink = new PaginationLink({
			props: {
				href: "#",
				$$slots: { default: [create_default_slot_34] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(paginationlink.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(paginationlink.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(paginationlink, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const paginationlink_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationlink_changes.$$scope = { dirty, ctx };
			}

			paginationlink.$set(paginationlink_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(paginationlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paginationlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(paginationlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_33.name,
		type: "slot",
		source: "(55:12) <PaginationItem>",
		ctx
	});

	return block;
}

// (59:16) <PaginationLink href="#">
function create_default_slot_32(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("3");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "3");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_32.name,
		type: "slot",
		source: "(59:16) <PaginationLink href=\\\"#\\\">",
		ctx
	});

	return block;
}

// (58:12) <PaginationItem>
function create_default_slot_31(ctx) {
	let current;

	const paginationlink = new PaginationLink({
			props: {
				href: "#",
				$$slots: { default: [create_default_slot_32] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(paginationlink.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(paginationlink.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(paginationlink, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const paginationlink_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationlink_changes.$$scope = { dirty, ctx };
			}

			paginationlink.$set(paginationlink_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(paginationlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paginationlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(paginationlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_31.name,
		type: "slot",
		source: "(58:12) <PaginationItem>",
		ctx
	});

	return block;
}

// (62:16) <PaginationLink href="#">
function create_default_slot_30(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("4");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "4");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_30.name,
		type: "slot",
		source: "(62:16) <PaginationLink href=\\\"#\\\">",
		ctx
	});

	return block;
}

// (61:12) <PaginationItem>
function create_default_slot_29(ctx) {
	let current;

	const paginationlink = new PaginationLink({
			props: {
				href: "#",
				$$slots: { default: [create_default_slot_30] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(paginationlink.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(paginationlink.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(paginationlink, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const paginationlink_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationlink_changes.$$scope = { dirty, ctx };
			}

			paginationlink.$set(paginationlink_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(paginationlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paginationlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(paginationlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_29.name,
		type: "slot",
		source: "(61:12) <PaginationItem>",
		ctx
	});

	return block;
}

// (65:16) <PaginationLink href="#">
function create_default_slot_28(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("5");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "5");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_28.name,
		type: "slot",
		source: "(65:16) <PaginationLink href=\\\"#\\\">",
		ctx
	});

	return block;
}

// (64:12) <PaginationItem>
function create_default_slot_27(ctx) {
	let current;

	const paginationlink = new PaginationLink({
			props: {
				href: "#",
				$$slots: { default: [create_default_slot_28] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(paginationlink.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(paginationlink.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(paginationlink, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const paginationlink_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationlink_changes.$$scope = { dirty, ctx };
			}

			paginationlink.$set(paginationlink_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(paginationlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paginationlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(paginationlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_27.name,
		type: "slot",
		source: "(64:12) <PaginationItem>",
		ctx
	});

	return block;
}

// (67:12) <PaginationItem>
function create_default_slot_26(ctx) {
	let current;

	const paginationlink = new PaginationLink({
			props: { next: true, href: "#" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(paginationlink.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(paginationlink.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(paginationlink, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(paginationlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paginationlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(paginationlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_26.name,
		type: "slot",
		source: "(67:12) <PaginationItem>",
		ctx
	});

	return block;
}

// (70:12) <PaginationItem>
function create_default_slot_25(ctx) {
	let current;

	const paginationlink = new PaginationLink({
			props: { last: true, href: "#" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(paginationlink.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(paginationlink.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(paginationlink, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(paginationlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paginationlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(paginationlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_25.name,
		type: "slot",
		source: "(70:12) <PaginationItem>",
		ctx
	});

	return block;
}

// (45:8) <Pagination ariaLabel="Page navigation example">
function create_default_slot_24(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;
	let t7;
	let current;

	const paginationitem0 = new PaginationItem({
			props: {
				disabled: true,
				$$slots: { default: [create_default_slot_38] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const paginationitem1 = new PaginationItem({
			props: {
				disabled: true,
				$$slots: { default: [create_default_slot_37] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const paginationitem2 = new PaginationItem({
			props: {
				active: true,
				$$slots: { default: [create_default_slot_35] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const paginationitem3 = new PaginationItem({
			props: {
				$$slots: { default: [create_default_slot_33] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const paginationitem4 = new PaginationItem({
			props: {
				$$slots: { default: [create_default_slot_31] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const paginationitem5 = new PaginationItem({
			props: {
				$$slots: { default: [create_default_slot_29] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const paginationitem6 = new PaginationItem({
			props: {
				$$slots: { default: [create_default_slot_27] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const paginationitem7 = new PaginationItem({
			props: {
				$$slots: { default: [create_default_slot_26] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const paginationitem8 = new PaginationItem({
			props: {
				$$slots: { default: [create_default_slot_25] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(paginationitem0.$$.fragment);
			t0 = space();
			create_component(paginationitem1.$$.fragment);
			t1 = space();
			create_component(paginationitem2.$$.fragment);
			t2 = space();
			create_component(paginationitem3.$$.fragment);
			t3 = space();
			create_component(paginationitem4.$$.fragment);
			t4 = space();
			create_component(paginationitem5.$$.fragment);
			t5 = space();
			create_component(paginationitem6.$$.fragment);
			t6 = space();
			create_component(paginationitem7.$$.fragment);
			t7 = space();
			create_component(paginationitem8.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(paginationitem0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(paginationitem1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(paginationitem2.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(paginationitem3.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(paginationitem4.$$.fragment, nodes);
			t4 = claim_space(nodes);
			claim_component(paginationitem5.$$.fragment, nodes);
			t5 = claim_space(nodes);
			claim_component(paginationitem6.$$.fragment, nodes);
			t6 = claim_space(nodes);
			claim_component(paginationitem7.$$.fragment, nodes);
			t7 = claim_space(nodes);
			claim_component(paginationitem8.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(paginationitem0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(paginationitem1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(paginationitem2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(paginationitem3, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(paginationitem4, target, anchor);
			insert_dev(target, t4, anchor);
			mount_component(paginationitem5, target, anchor);
			insert_dev(target, t5, anchor);
			mount_component(paginationitem6, target, anchor);
			insert_dev(target, t6, anchor);
			mount_component(paginationitem7, target, anchor);
			insert_dev(target, t7, anchor);
			mount_component(paginationitem8, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const paginationitem0_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationitem0_changes.$$scope = { dirty, ctx };
			}

			paginationitem0.$set(paginationitem0_changes);
			const paginationitem1_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationitem1_changes.$$scope = { dirty, ctx };
			}

			paginationitem1.$set(paginationitem1_changes);
			const paginationitem2_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationitem2_changes.$$scope = { dirty, ctx };
			}

			paginationitem2.$set(paginationitem2_changes);
			const paginationitem3_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationitem3_changes.$$scope = { dirty, ctx };
			}

			paginationitem3.$set(paginationitem3_changes);
			const paginationitem4_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationitem4_changes.$$scope = { dirty, ctx };
			}

			paginationitem4.$set(paginationitem4_changes);
			const paginationitem5_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationitem5_changes.$$scope = { dirty, ctx };
			}

			paginationitem5.$set(paginationitem5_changes);
			const paginationitem6_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationitem6_changes.$$scope = { dirty, ctx };
			}

			paginationitem6.$set(paginationitem6_changes);
			const paginationitem7_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationitem7_changes.$$scope = { dirty, ctx };
			}

			paginationitem7.$set(paginationitem7_changes);
			const paginationitem8_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationitem8_changes.$$scope = { dirty, ctx };
			}

			paginationitem8.$set(paginationitem8_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(paginationitem0.$$.fragment, local);
			transition_in(paginationitem1.$$.fragment, local);
			transition_in(paginationitem2.$$.fragment, local);
			transition_in(paginationitem3.$$.fragment, local);
			transition_in(paginationitem4.$$.fragment, local);
			transition_in(paginationitem5.$$.fragment, local);
			transition_in(paginationitem6.$$.fragment, local);
			transition_in(paginationitem7.$$.fragment, local);
			transition_in(paginationitem8.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paginationitem0.$$.fragment, local);
			transition_out(paginationitem1.$$.fragment, local);
			transition_out(paginationitem2.$$.fragment, local);
			transition_out(paginationitem3.$$.fragment, local);
			transition_out(paginationitem4.$$.fragment, local);
			transition_out(paginationitem5.$$.fragment, local);
			transition_out(paginationitem6.$$.fragment, local);
			transition_out(paginationitem7.$$.fragment, local);
			transition_out(paginationitem8.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(paginationitem0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(paginationitem1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(paginationitem2, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(paginationitem3, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(paginationitem4, detaching);
			if (detaching) detach_dev(t4);
			destroy_component(paginationitem5, detaching);
			if (detaching) detach_dev(t5);
			destroy_component(paginationitem6, detaching);
			if (detaching) detach_dev(t6);
			destroy_component(paginationitem7, detaching);
			if (detaching) detach_dev(t7);
			destroy_component(paginationitem8, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_24.name,
		type: "slot",
		source: "(45:8) <Pagination ariaLabel=\\\"Page navigation example\\\">",
		ctx
	});

	return block;
}

// (29:0) <Row>
function create_default_slot_23(ctx) {
	let div1;
	let h20;
	let t0;
	let t1;
	let div0;
	let p0;
	let t2;
	let code0;
	let t3;
	let t4;
	let t5;
	let p1;
	let t6;
	let code1;
	let t7;
	let t8;
	let t9;
	let h21;
	let t10;
	let t11;
	let current;

	const pagination = new Pagination({
			props: {
				ariaLabel: "Page navigation example",
				$$slots: { default: [create_default_slot_24] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div1 = element("div");
			h20 = element("h2");
			t0 = text("Обзор");
			t1 = space();
			div0 = element("div");
			p0 = element("p");
			t2 = text("Мы используем большой блок подключенных ссылок для нашей разбивки по страницам,\r\n            что делает ссылки трудно пропустить и легко масштабируемые - все это в то же время обеспечивает большие хитовые области.\r\n            Пагинация построена с элементами списка HTML, чтобы читатели экрана могли объявлять количество доступных ссылок. Используйте оберточный элемент, ");
			code0 = element("code");
			t3 = text("nav");
			t4 = text("\r\n            чтобы идентифицировать его как раздел навигации для экранных читателей и других вспомогательных технологий.");
			t5 = space();
			p1 = element("p");
			t6 = text("Кроме того, поскольку страницы, вероятно, имеют более одного такого раздела навигации,\r\n            рекомендуется предоставить описательную арию-ярлык для, ");
			code1 = element("code");
			t7 = text("nav");
			t8 = text(" чтобы отразить его назначение.\r\n            Например, если компонент пагинации используется для навигации между набором результатов поиска,\r\n            соответствующей меткой может быть aria-label=\"страницы результатов поиска\".");
			t9 = space();
			h21 = element("h2");
			t10 = text("Пример");
			t11 = space();
			create_component(pagination.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h20 = claim_element(div1_nodes, "H2", { class: true });
			var h20_nodes = children(h20);
			t0 = claim_text(h20_nodes, "Обзор");
			h20_nodes.forEach(detach_dev);
			t1 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", {});
			var div0_nodes = children(div0);
			p0 = claim_element(div0_nodes, "P", {});
			var p0_nodes = children(p0);
			t2 = claim_text(p0_nodes, "Мы используем большой блок подключенных ссылок для нашей разбивки по страницам,\r\n            что делает ссылки трудно пропустить и легко масштабируемые - все это в то же время обеспечивает большие хитовые области.\r\n            Пагинация построена с элементами списка HTML, чтобы читатели экрана могли объявлять количество доступных ссылок. Используйте оберточный элемент, ");
			code0 = claim_element(p0_nodes, "CODE", {});
			var code0_nodes = children(code0);
			t3 = claim_text(code0_nodes, "nav");
			code0_nodes.forEach(detach_dev);
			t4 = claim_text(p0_nodes, "\r\n            чтобы идентифицировать его как раздел навигации для экранных читателей и других вспомогательных технологий.");
			p0_nodes.forEach(detach_dev);
			t5 = claim_space(div0_nodes);
			p1 = claim_element(div0_nodes, "P", {});
			var p1_nodes = children(p1);
			t6 = claim_text(p1_nodes, "Кроме того, поскольку страницы, вероятно, имеют более одного такого раздела навигации,\r\n            рекомендуется предоставить описательную арию-ярлык для, ");
			code1 = claim_element(p1_nodes, "CODE", {});
			var code1_nodes = children(code1);
			t7 = claim_text(code1_nodes, "nav");
			code1_nodes.forEach(detach_dev);
			t8 = claim_text(p1_nodes, " чтобы отразить его назначение.\r\n            Например, если компонент пагинации используется для навигации между набором результатов поиска,\r\n            соответствующей меткой может быть aria-label=\"страницы результатов поиска\".");
			p1_nodes.forEach(detach_dev);
			t9 = claim_space(div0_nodes);
			h21 = claim_element(div0_nodes, "H2", { class: true });
			var h21_nodes = children(h21);
			t10 = claim_text(h21_nodes, "Пример");
			h21_nodes.forEach(detach_dev);
			t11 = claim_space(div0_nodes);
			claim_component(pagination.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h20, "class", "mt-4");
			add_location(h20, file, 30, 8, 782);
			add_location(code0, file, 35, 157, 1219);
			add_location(p0, file, 32, 8, 830);
			add_location(code1, file, 39, 68, 1544);
			add_location(p1, file, 37, 8, 1371);
			attr_dev(h21, "class", "mt-4");
			add_location(h21, file, 43, 8, 1813);
			add_location(div0, file, 31, 4, 815);
			attr_dev(div1, "class", "col-xl-12");
			add_location(div1, file, 29, 4, 749);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, h20);
			append_dev(h20, t0);
			append_dev(div1, t1);
			append_dev(div1, div0);
			append_dev(div0, p0);
			append_dev(p0, t2);
			append_dev(p0, code0);
			append_dev(code0, t3);
			append_dev(p0, t4);
			append_dev(div0, t5);
			append_dev(div0, p1);
			append_dev(p1, t6);
			append_dev(p1, code1);
			append_dev(code1, t7);
			append_dev(p1, t8);
			append_dev(div0, t9);
			append_dev(div0, h21);
			append_dev(h21, t10);
			append_dev(div0, t11);
			mount_component(pagination, div0, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const pagination_changes = {};

			if (dirty & /*$$scope*/ 4) {
				pagination_changes.$$scope = { dirty, ctx };
			}

			pagination.$set(pagination_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(pagination.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(pagination.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(pagination);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_23.name,
		type: "slot",
		source: "(29:0) <Row>",
		ctx
	});

	return block;
}

// (84:16) <PaginationItem>
function create_default_slot_22(ctx) {
	let current;

	const paginationlink = new PaginationLink({
			props: { first: true, href: "#" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(paginationlink.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(paginationlink.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(paginationlink, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(paginationlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paginationlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(paginationlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_22.name,
		type: "slot",
		source: "(84:16) <PaginationItem>",
		ctx
	});

	return block;
}

// (87:16) <PaginationItem>
function create_default_slot_21(ctx) {
	let current;

	const paginationlink = new PaginationLink({
			props: { previous: true, href: "#" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(paginationlink.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(paginationlink.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(paginationlink, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(paginationlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paginationlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(paginationlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_21.name,
		type: "slot",
		source: "(87:16) <PaginationItem>",
		ctx
	});

	return block;
}

// (91:20) <PaginationLink href="#">
function create_default_slot_20(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("1");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "1");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_20.name,
		type: "slot",
		source: "(91:20) <PaginationLink href=\\\"#\\\">",
		ctx
	});

	return block;
}

// (90:16) <PaginationItem>
function create_default_slot_19(ctx) {
	let current;

	const paginationlink = new PaginationLink({
			props: {
				href: "#",
				$$slots: { default: [create_default_slot_20] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(paginationlink.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(paginationlink.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(paginationlink, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const paginationlink_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationlink_changes.$$scope = { dirty, ctx };
			}

			paginationlink.$set(paginationlink_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(paginationlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paginationlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(paginationlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_19.name,
		type: "slot",
		source: "(90:16) <PaginationItem>",
		ctx
	});

	return block;
}

// (94:20) <PaginationLink href="#">
function create_default_slot_18(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("2");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "2");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_18.name,
		type: "slot",
		source: "(94:20) <PaginationLink href=\\\"#\\\">",
		ctx
	});

	return block;
}

// (93:16) <PaginationItem>
function create_default_slot_17(ctx) {
	let current;

	const paginationlink = new PaginationLink({
			props: {
				href: "#",
				$$slots: { default: [create_default_slot_18] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(paginationlink.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(paginationlink.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(paginationlink, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const paginationlink_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationlink_changes.$$scope = { dirty, ctx };
			}

			paginationlink.$set(paginationlink_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(paginationlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paginationlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(paginationlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_17.name,
		type: "slot",
		source: "(93:16) <PaginationItem>",
		ctx
	});

	return block;
}

// (97:20) <PaginationLink href="#">
function create_default_slot_16(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("3");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "3");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_16.name,
		type: "slot",
		source: "(97:20) <PaginationLink href=\\\"#\\\">",
		ctx
	});

	return block;
}

// (96:16) <PaginationItem>
function create_default_slot_15(ctx) {
	let current;

	const paginationlink = new PaginationLink({
			props: {
				href: "#",
				$$slots: { default: [create_default_slot_16] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(paginationlink.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(paginationlink.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(paginationlink, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const paginationlink_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationlink_changes.$$scope = { dirty, ctx };
			}

			paginationlink.$set(paginationlink_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(paginationlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paginationlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(paginationlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_15.name,
		type: "slot",
		source: "(96:16) <PaginationItem>",
		ctx
	});

	return block;
}

// (99:16) <PaginationItem>
function create_default_slot_14(ctx) {
	let current;

	const paginationlink = new PaginationLink({
			props: { next: true, href: "#" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(paginationlink.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(paginationlink.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(paginationlink, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(paginationlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paginationlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(paginationlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_14.name,
		type: "slot",
		source: "(99:16) <PaginationItem>",
		ctx
	});

	return block;
}

// (102:16) <PaginationItem>
function create_default_slot_13(ctx) {
	let current;

	const paginationlink = new PaginationLink({
			props: { last: true, href: "#" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(paginationlink.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(paginationlink.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(paginationlink, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(paginationlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paginationlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(paginationlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13.name,
		type: "slot",
		source: "(102:16) <PaginationItem>",
		ctx
	});

	return block;
}

// (83:12) <Pagination size="lg" ariaLabel="Page navigation example">
function create_default_slot_12(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let current;

	const paginationitem0 = new PaginationItem({
			props: {
				$$slots: { default: [create_default_slot_22] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const paginationitem1 = new PaginationItem({
			props: {
				$$slots: { default: [create_default_slot_21] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const paginationitem2 = new PaginationItem({
			props: {
				$$slots: { default: [create_default_slot_19] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const paginationitem3 = new PaginationItem({
			props: {
				$$slots: { default: [create_default_slot_17] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const paginationitem4 = new PaginationItem({
			props: {
				$$slots: { default: [create_default_slot_15] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const paginationitem5 = new PaginationItem({
			props: {
				$$slots: { default: [create_default_slot_14] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const paginationitem6 = new PaginationItem({
			props: {
				$$slots: { default: [create_default_slot_13] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(paginationitem0.$$.fragment);
			t0 = space();
			create_component(paginationitem1.$$.fragment);
			t1 = space();
			create_component(paginationitem2.$$.fragment);
			t2 = space();
			create_component(paginationitem3.$$.fragment);
			t3 = space();
			create_component(paginationitem4.$$.fragment);
			t4 = space();
			create_component(paginationitem5.$$.fragment);
			t5 = space();
			create_component(paginationitem6.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(paginationitem0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(paginationitem1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(paginationitem2.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(paginationitem3.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(paginationitem4.$$.fragment, nodes);
			t4 = claim_space(nodes);
			claim_component(paginationitem5.$$.fragment, nodes);
			t5 = claim_space(nodes);
			claim_component(paginationitem6.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(paginationitem0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(paginationitem1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(paginationitem2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(paginationitem3, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(paginationitem4, target, anchor);
			insert_dev(target, t4, anchor);
			mount_component(paginationitem5, target, anchor);
			insert_dev(target, t5, anchor);
			mount_component(paginationitem6, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const paginationitem0_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationitem0_changes.$$scope = { dirty, ctx };
			}

			paginationitem0.$set(paginationitem0_changes);
			const paginationitem1_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationitem1_changes.$$scope = { dirty, ctx };
			}

			paginationitem1.$set(paginationitem1_changes);
			const paginationitem2_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationitem2_changes.$$scope = { dirty, ctx };
			}

			paginationitem2.$set(paginationitem2_changes);
			const paginationitem3_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationitem3_changes.$$scope = { dirty, ctx };
			}

			paginationitem3.$set(paginationitem3_changes);
			const paginationitem4_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationitem4_changes.$$scope = { dirty, ctx };
			}

			paginationitem4.$set(paginationitem4_changes);
			const paginationitem5_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationitem5_changes.$$scope = { dirty, ctx };
			}

			paginationitem5.$set(paginationitem5_changes);
			const paginationitem6_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationitem6_changes.$$scope = { dirty, ctx };
			}

			paginationitem6.$set(paginationitem6_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(paginationitem0.$$.fragment, local);
			transition_in(paginationitem1.$$.fragment, local);
			transition_in(paginationitem2.$$.fragment, local);
			transition_in(paginationitem3.$$.fragment, local);
			transition_in(paginationitem4.$$.fragment, local);
			transition_in(paginationitem5.$$.fragment, local);
			transition_in(paginationitem6.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paginationitem0.$$.fragment, local);
			transition_out(paginationitem1.$$.fragment, local);
			transition_out(paginationitem2.$$.fragment, local);
			transition_out(paginationitem3.$$.fragment, local);
			transition_out(paginationitem4.$$.fragment, local);
			transition_out(paginationitem5.$$.fragment, local);
			transition_out(paginationitem6.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(paginationitem0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(paginationitem1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(paginationitem2, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(paginationitem3, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(paginationitem4, detaching);
			if (detaching) detach_dev(t4);
			destroy_component(paginationitem5, detaching);
			if (detaching) detach_dev(t5);
			destroy_component(paginationitem6, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12.name,
		type: "slot",
		source: "(83:12) <Pagination size=\\\"lg\\\" ariaLabel=\\\"Page navigation example\\\">",
		ctx
	});

	return block;
}

// (109:16) <PaginationItem>
function create_default_slot_11(ctx) {
	let current;

	const paginationlink = new PaginationLink({
			props: { first: true, href: "#" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(paginationlink.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(paginationlink.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(paginationlink, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(paginationlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paginationlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(paginationlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11.name,
		type: "slot",
		source: "(109:16) <PaginationItem>",
		ctx
	});

	return block;
}

// (112:16) <PaginationItem>
function create_default_slot_10(ctx) {
	let current;

	const paginationlink = new PaginationLink({
			props: { previous: true, href: "#" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(paginationlink.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(paginationlink.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(paginationlink, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(paginationlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paginationlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(paginationlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(112:16) <PaginationItem>",
		ctx
	});

	return block;
}

// (116:20) <PaginationLink href="#">
function create_default_slot_9(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("1");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "1");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(116:20) <PaginationLink href=\\\"#\\\">",
		ctx
	});

	return block;
}

// (115:16) <PaginationItem>
function create_default_slot_8(ctx) {
	let current;

	const paginationlink = new PaginationLink({
			props: {
				href: "#",
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(paginationlink.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(paginationlink.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(paginationlink, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const paginationlink_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationlink_changes.$$scope = { dirty, ctx };
			}

			paginationlink.$set(paginationlink_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(paginationlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paginationlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(paginationlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(115:16) <PaginationItem>",
		ctx
	});

	return block;
}

// (119:20) <PaginationLink href="#">
function create_default_slot_7(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("2");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "2");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(119:20) <PaginationLink href=\\\"#\\\">",
		ctx
	});

	return block;
}

// (118:16) <PaginationItem>
function create_default_slot_6(ctx) {
	let current;

	const paginationlink = new PaginationLink({
			props: {
				href: "#",
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(paginationlink.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(paginationlink.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(paginationlink, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const paginationlink_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationlink_changes.$$scope = { dirty, ctx };
			}

			paginationlink.$set(paginationlink_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(paginationlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paginationlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(paginationlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(118:16) <PaginationItem>",
		ctx
	});

	return block;
}

// (122:20) <PaginationLink href="#">
function create_default_slot_5(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("3");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "3");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(122:20) <PaginationLink href=\\\"#\\\">",
		ctx
	});

	return block;
}

// (121:16) <PaginationItem>
function create_default_slot_4(ctx) {
	let current;

	const paginationlink = new PaginationLink({
			props: {
				href: "#",
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(paginationlink.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(paginationlink.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(paginationlink, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const paginationlink_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationlink_changes.$$scope = { dirty, ctx };
			}

			paginationlink.$set(paginationlink_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(paginationlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paginationlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(paginationlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(121:16) <PaginationItem>",
		ctx
	});

	return block;
}

// (124:16) <PaginationItem>
function create_default_slot_3(ctx) {
	let current;

	const paginationlink = new PaginationLink({
			props: { next: true, href: "#" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(paginationlink.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(paginationlink.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(paginationlink, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(paginationlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paginationlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(paginationlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(124:16) <PaginationItem>",
		ctx
	});

	return block;
}

// (127:16) <PaginationItem>
function create_default_slot_2(ctx) {
	let current;

	const paginationlink = new PaginationLink({
			props: { last: true, href: "#" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(paginationlink.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(paginationlink.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(paginationlink, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(paginationlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paginationlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(paginationlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(127:16) <PaginationItem>",
		ctx
	});

	return block;
}

// (108:12) <Pagination size="sm" ariaLabel="Page navigation example">
function create_default_slot_1(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let current;

	const paginationitem0 = new PaginationItem({
			props: {
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const paginationitem1 = new PaginationItem({
			props: {
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const paginationitem2 = new PaginationItem({
			props: {
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const paginationitem3 = new PaginationItem({
			props: {
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const paginationitem4 = new PaginationItem({
			props: {
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const paginationitem5 = new PaginationItem({
			props: {
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const paginationitem6 = new PaginationItem({
			props: {
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(paginationitem0.$$.fragment);
			t0 = space();
			create_component(paginationitem1.$$.fragment);
			t1 = space();
			create_component(paginationitem2.$$.fragment);
			t2 = space();
			create_component(paginationitem3.$$.fragment);
			t3 = space();
			create_component(paginationitem4.$$.fragment);
			t4 = space();
			create_component(paginationitem5.$$.fragment);
			t5 = space();
			create_component(paginationitem6.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(paginationitem0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(paginationitem1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(paginationitem2.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(paginationitem3.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(paginationitem4.$$.fragment, nodes);
			t4 = claim_space(nodes);
			claim_component(paginationitem5.$$.fragment, nodes);
			t5 = claim_space(nodes);
			claim_component(paginationitem6.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(paginationitem0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(paginationitem1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(paginationitem2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(paginationitem3, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(paginationitem4, target, anchor);
			insert_dev(target, t4, anchor);
			mount_component(paginationitem5, target, anchor);
			insert_dev(target, t5, anchor);
			mount_component(paginationitem6, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const paginationitem0_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationitem0_changes.$$scope = { dirty, ctx };
			}

			paginationitem0.$set(paginationitem0_changes);
			const paginationitem1_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationitem1_changes.$$scope = { dirty, ctx };
			}

			paginationitem1.$set(paginationitem1_changes);
			const paginationitem2_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationitem2_changes.$$scope = { dirty, ctx };
			}

			paginationitem2.$set(paginationitem2_changes);
			const paginationitem3_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationitem3_changes.$$scope = { dirty, ctx };
			}

			paginationitem3.$set(paginationitem3_changes);
			const paginationitem4_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationitem4_changes.$$scope = { dirty, ctx };
			}

			paginationitem4.$set(paginationitem4_changes);
			const paginationitem5_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationitem5_changes.$$scope = { dirty, ctx };
			}

			paginationitem5.$set(paginationitem5_changes);
			const paginationitem6_changes = {};

			if (dirty & /*$$scope*/ 4) {
				paginationitem6_changes.$$scope = { dirty, ctx };
			}

			paginationitem6.$set(paginationitem6_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(paginationitem0.$$.fragment, local);
			transition_in(paginationitem1.$$.fragment, local);
			transition_in(paginationitem2.$$.fragment, local);
			transition_in(paginationitem3.$$.fragment, local);
			transition_in(paginationitem4.$$.fragment, local);
			transition_in(paginationitem5.$$.fragment, local);
			transition_in(paginationitem6.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paginationitem0.$$.fragment, local);
			transition_out(paginationitem1.$$.fragment, local);
			transition_out(paginationitem2.$$.fragment, local);
			transition_out(paginationitem3.$$.fragment, local);
			transition_out(paginationitem4.$$.fragment, local);
			transition_out(paginationitem5.$$.fragment, local);
			transition_out(paginationitem6.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(paginationitem0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(paginationitem1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(paginationitem2, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(paginationitem3, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(paginationitem4, detaching);
			if (detaching) detach_dev(t4);
			destroy_component(paginationitem5, detaching);
			if (detaching) detach_dev(t5);
			destroy_component(paginationitem6, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(108:12) <Pagination size=\\\"sm\\\" ariaLabel=\\\"Page navigation example\\\">",
		ctx
	});

	return block;
}

// (78:0) <Row>
function create_default_slot(ctx) {
	let div1;
	let h2;
	let t0;
	let t1;
	let div0;
	let h40;
	let t2;
	let t3;
	let t4;
	let h41;
	let t5;
	let t6;
	let current;

	const pagination0 = new Pagination({
			props: {
				size: "lg",
				ariaLabel: "Page navigation example",
				$$slots: { default: [create_default_slot_12] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const pagination1 = new Pagination({
			props: {
				size: "sm",
				ariaLabel: "Page navigation example",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div1 = element("div");
			h2 = element("h2");
			t0 = text("Размеры элементов пагинации");
			t1 = space();
			div0 = element("div");
			h40 = element("h4");
			t2 = text("Большой");
			t3 = space();
			create_component(pagination0.$$.fragment);
			t4 = space();
			h41 = element("h4");
			t5 = text("Маленький");
			t6 = space();
			create_component(pagination1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h2 = claim_element(div1_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "Размеры элементов пагинации");
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", {});
			var div0_nodes = children(div0);
			h40 = claim_element(div0_nodes, "H4", {});
			var h40_nodes = children(h40);
			t2 = claim_text(h40_nodes, "Большой");
			h40_nodes.forEach(detach_dev);
			t3 = claim_space(div0_nodes);
			claim_component(pagination0.$$.fragment, div0_nodes);
			t4 = claim_space(div0_nodes);
			h41 = claim_element(div0_nodes, "H4", {});
			var h41_nodes = children(h41);
			t5 = claim_text(h41_nodes, "Маленький");
			h41_nodes.forEach(detach_dev);
			t6 = claim_space(div0_nodes);
			claim_component(pagination1.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "mt-4");
			add_location(h2, file, 79, 8, 3086);
			add_location(h40, file, 81, 12, 3164);
			add_location(h41, file, 106, 12, 4194);
			add_location(div0, file, 80, 8, 3145);
			attr_dev(div1, "class", "col-xl-12");
			add_location(div1, file, 78, 4, 3053);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, h2);
			append_dev(h2, t0);
			append_dev(div1, t1);
			append_dev(div1, div0);
			append_dev(div0, h40);
			append_dev(h40, t2);
			append_dev(div0, t3);
			mount_component(pagination0, div0, null);
			append_dev(div0, t4);
			append_dev(div0, h41);
			append_dev(h41, t5);
			append_dev(div0, t6);
			mount_component(pagination1, div0, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const pagination0_changes = {};

			if (dirty & /*$$scope*/ 4) {
				pagination0_changes.$$scope = { dirty, ctx };
			}

			pagination0.$set(pagination0_changes);
			const pagination1_changes = {};

			if (dirty & /*$$scope*/ 4) {
				pagination1_changes.$$scope = { dirty, ctx };
			}

			pagination1.$set(pagination1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(pagination0.$$.fragment, local);
			transition_in(pagination1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(pagination0.$$.fragment, local);
			transition_out(pagination1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(pagination0);
			destroy_component(pagination1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(78:0) <Row>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let title_value;
	let t0;
	let h1;
	let t1;
	let t2;
	let t3;
	let t4;
	let current;
	document.title = title_value = /*title*/ ctx[0];

	const breadcrumb = new Breadcrumb({
			props: {
				class: "mb-4",
				$$slots: { default: [create_default_slot_39] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row0 = new Row({
			props: {
				$$slots: { default: [create_default_slot_23] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row1 = new Row({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("Пагинация");
			t2 = space();
			create_component(breadcrumb.$$.fragment);
			t3 = space();
			create_component(row0.$$.fragment);
			t4 = space();
			create_component(row1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-46oba3\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Пагинация");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			claim_component(breadcrumb.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(row0.$$.fragment, nodes);
			t4 = claim_space(nodes);
			claim_component(row1.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "mt-4");
			add_location(h1, file, 24, 0, 608);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			mount_component(breadcrumb, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(row0, target, anchor);
			insert_dev(target, t4, anchor);
			mount_component(row1, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*title*/ 1) && title_value !== (title_value = /*title*/ ctx[0])) {
				document.title = title_value;
			}

			const breadcrumb_changes = {};

			if (dirty & /*$$scope*/ 4) {
				breadcrumb_changes.$$scope = { dirty, ctx };
			}

			breadcrumb.$set(breadcrumb_changes);
			const row0_changes = {};

			if (dirty & /*$$scope*/ 4) {
				row0_changes.$$scope = { dirty, ctx };
			}

			row0.$set(row0_changes);
			const row1_changes = {};

			if (dirty & /*$$scope*/ 4) {
				row1_changes.$$scope = { dirty, ctx };
			}

			row1.$set(row1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(breadcrumb.$$.fragment, local);
			transition_in(row0.$$.fragment, local);
			transition_in(row1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(breadcrumb.$$.fragment, local);
			transition_out(row0.$$.fragment, local);
			transition_out(row1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			destroy_component(breadcrumb, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(row0, detaching);
			if (detaching) detach_dev(t4);
			destroy_component(row1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self) {
	let title = "Пагинация | UI | Пользовательский Интерфейс";

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
	};

	return [title];
}

class Pagination_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Pagination_1",
			options,
			id: create_fragment.name
		});
	}
}

export default Pagination_1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
