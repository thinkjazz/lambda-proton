import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as create_slot, a as assign, c as clean, N as onMount, a1 as browserEvent, a2 as onDestroy, e as exclude_internal_props, b as clsx, f as element, g as claim_element, h as children, j as detach_dev, m as set_attributes, l as add_location, n as insert_dev, C as listen_dev, a3 as prevent_default, w as get_slot_context, x as get_slot_changes, u as get_spread_update, r as transition_in, t as transition_out, a4 as run_all, a5 as getNewCarouselActiveIndex, J as space, y as text, K as claim_space, z as claim_text, k as attr_dev, o as append_dev, A as set_data_dev, B as noop, a6 as toggle_class, M as destroy_each } from './client.93a41835.js';

/* node_modules\sveltestrap\src\Carousel.svelte generated by Svelte v3.18.1 */
const file = "node_modules\\sveltestrap\\src\\Carousel.svelte";

function create_fragment(ctx) {
	let div;
	let current;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[19].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[18], null);

	let div_levels = [
		/*props*/ ctx[4],
		{ id: /*id*/ ctx[0] },
		{ class: /*classes*/ ctx[3] },
		{ style: /*style*/ ctx[1] }
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { id: true, class: true, style: true });
			var div_nodes = children(div);
			if (default_slot) default_slot.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(div, div_data);
			add_location(div, file, 89, 0, 1881);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;

			dispose = [
				listen_dev(window, "keydown", prevent_default(/*handleKeydown*/ ctx[5]), false, true, false),
				listen_dev(div, "mouseenter", /*mouseenter_handler*/ ctx[20], false, false, false),
				listen_dev(div, "mouseleave", /*mouseleave_handler*/ ctx[21], false, false, false)
			];
		},
		p: function update(ctx, [dirty]) {
			if (default_slot && default_slot.p && dirty & /*$$scope*/ 262144) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[18], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[18], dirty, null));
			}

			set_attributes(div, get_spread_update(div_levels, [
				dirty & /*props*/ 16 && /*props*/ ctx[4],
				dirty & /*id*/ 1 && { id: /*id*/ ctx[0] },
				dirty & /*classes*/ 8 && { class: /*classes*/ ctx[3] },
				dirty & /*style*/ 2 && { style: /*style*/ ctx[1] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let classes = "";
	let { class: className = "" } = $$props;
	let { id = "" } = $$props;
	let { style = "" } = $$props;
	let { items = [] } = $$props;
	let { activeIndex = 0 } = $$props;
	let { ride = true } = $$props;
	let { interval = 5000 } = $$props;
	let { pause = true } = $$props;
	let { keyboard = true } = $$props;
	let _rideTimeoutId = false;
	let _removeVisibilityChangeListener = false;
	const props = clean($$props);

	onMount(() => {
		setRideTimeout();
	});

	_removeVisibilityChangeListener = browserEvent(document, "visibilitychange", () => {
		if (document.visibilityState === "hidden") {
			clearRideTimeout();
		} else {
			setRideTimeout();
		}
	});

	onDestroy(() => {
		if (_rideTimeoutId) {
			clearTimeout(_rideTimeoutId);
		}

		if (_removeVisibilityChangeListener) {
			_removeVisibilityChangeListener();
		}
	});

	function handleKeydown(event) {
		if (!keyboard) {
			return;
		}

		let direction = "";

		if (event.key === "ArrowLeft") {
			direction = "prev";
		} else if (event.key === "ArrowRight") {
			direction = "next";
		} else {
			return;
		}

		$$invalidate(8, activeIndex = getNewCarouselActiveIndex(direction, items, activeIndex));
	}

	function setRideTimeout() {
		clearRideTimeout();

		if (ride) {
			_rideTimeoutId = setTimeout(autoNext, interval);
		}
	}

	function clearRideTimeout() {
		if (_rideTimeoutId) {
			clearTimeout(_rideTimeoutId);
		}
	}

	function autoNext() {
		$$invalidate(8, activeIndex = getNewCarouselActiveIndex("next", items, activeIndex));
	}

	let { $$slots = {}, $$scope } = $$props;
	const mouseenter_handler = () => pause ? clearRideTimeout() : undefined;
	const mouseleave_handler = () => pause ? setRideTimeout() : undefined;

	$$self.$set = $$new_props => {
		$$invalidate(17, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(9, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ("style" in $$new_props) $$invalidate(1, style = $$new_props.style);
		if ("items" in $$new_props) $$invalidate(10, items = $$new_props.items);
		if ("activeIndex" in $$new_props) $$invalidate(8, activeIndex = $$new_props.activeIndex);
		if ("ride" in $$new_props) $$invalidate(11, ride = $$new_props.ride);
		if ("interval" in $$new_props) $$invalidate(12, interval = $$new_props.interval);
		if ("pause" in $$new_props) $$invalidate(2, pause = $$new_props.pause);
		if ("keyboard" in $$new_props) $$invalidate(13, keyboard = $$new_props.keyboard);
		if ("$$scope" in $$new_props) $$invalidate(18, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => {
		return {
			classes,
			className,
			id,
			style,
			items,
			activeIndex,
			ride,
			interval,
			pause,
			keyboard,
			_rideTimeoutId,
			_removeVisibilityChangeListener
		};
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(17, $$props = assign(assign({}, $$props), $$new_props));
		if ("classes" in $$props) $$invalidate(3, classes = $$new_props.classes);
		if ("className" in $$props) $$invalidate(9, className = $$new_props.className);
		if ("id" in $$props) $$invalidate(0, id = $$new_props.id);
		if ("style" in $$props) $$invalidate(1, style = $$new_props.style);
		if ("items" in $$props) $$invalidate(10, items = $$new_props.items);
		if ("activeIndex" in $$props) $$invalidate(8, activeIndex = $$new_props.activeIndex);
		if ("ride" in $$props) $$invalidate(11, ride = $$new_props.ride);
		if ("interval" in $$props) $$invalidate(12, interval = $$new_props.interval);
		if ("pause" in $$props) $$invalidate(2, pause = $$new_props.pause);
		if ("keyboard" in $$props) $$invalidate(13, keyboard = $$new_props.keyboard);
		if ("_rideTimeoutId" in $$props) _rideTimeoutId = $$new_props._rideTimeoutId;
		if ("_removeVisibilityChangeListener" in $$props) _removeVisibilityChangeListener = $$new_props._removeVisibilityChangeListener;
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className*/ 512) {
			 $$invalidate(3, classes = clsx(className, "carousel", "slide"));
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		id,
		style,
		pause,
		classes,
		props,
		handleKeydown,
		setRideTimeout,
		clearRideTimeout,
		activeIndex,
		className,
		items,
		ride,
		interval,
		keyboard,
		_rideTimeoutId,
		_removeVisibilityChangeListener,
		autoNext,
		$$props,
		$$scope,
		$$slots,
		mouseenter_handler,
		mouseleave_handler
	];
}

class Carousel extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			class: 9,
			id: 0,
			style: 1,
			items: 10,
			activeIndex: 8,
			ride: 11,
			interval: 12,
			pause: 2,
			keyboard: 13
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Carousel",
			options,
			id: create_fragment.name
		});
	}

	get class() {
		throw new Error("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get items() {
		throw new Error("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set items(value) {
		throw new Error("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get activeIndex() {
		throw new Error("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set activeIndex(value) {
		throw new Error("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ride() {
		throw new Error("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ride(value) {
		throw new Error("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get interval() {
		throw new Error("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set interval(value) {
		throw new Error("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get pause() {
		throw new Error("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set pause(value) {
		throw new Error("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get keyboard() {
		throw new Error("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set keyboard(value) {
		throw new Error("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\sveltestrap\src\CarouselControl.svelte generated by Svelte v3.18.1 */
const file$1 = "node_modules\\sveltestrap\\src\\CarouselControl.svelte";

function create_fragment$1(ctx) {
	let a;
	let span0;
	let span0_class_value;
	let t0;
	let span1;
	let t1;
	let dispose;

	let a_levels = [
		/*props*/ ctx[4],
		{ id: /*id*/ ctx[0] },
		{ class: /*classes*/ ctx[2] },
		{ role: "button" },
		{ href: "#" + /*direction*/ ctx[1] }
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	const block = {
		c: function create() {
			a = element("a");
			span0 = element("span");
			t0 = space();
			span1 = element("span");
			t1 = text(/*srText*/ ctx[3]);
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", {
				id: true,
				class: true,
				role: true,
				href: true
			});

			var a_nodes = children(a);
			span0 = claim_element(a_nodes, "SPAN", { class: true, "aria-hidden": true });
			children(span0).forEach(detach_dev);
			t0 = claim_space(a_nodes);
			span1 = claim_element(a_nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			t1 = claim_text(span1_nodes, /*srText*/ ctx[3]);
			span1_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span0, "class", span0_class_value = "carousel-control-" + /*direction*/ ctx[1] + "-icon");
			attr_dev(span0, "aria-hidden", "true");
			add_location(span0, file$1, 50, 2, 1172);
			attr_dev(span1, "class", "sr-only");
			add_location(span1, file$1, 51, 2, 1244);
			set_attributes(a, a_data);
			add_location(a, file$1, 43, 0, 1049);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, span0);
			append_dev(a, t0);
			append_dev(a, span1);
			append_dev(span1, t1);
			dispose = listen_dev(a, "click", prevent_default(/*clickHandler*/ ctx[5]), false, true, false);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*direction*/ 2 && span0_class_value !== (span0_class_value = "carousel-control-" + /*direction*/ ctx[1] + "-icon")) {
				attr_dev(span0, "class", span0_class_value);
			}

			if (dirty & /*srText*/ 8) set_data_dev(t1, /*srText*/ ctx[3]);

			set_attributes(a, get_spread_update(a_levels, [
				dirty & /*props*/ 16 && /*props*/ ctx[4],
				dirty & /*id*/ 1 && { id: /*id*/ ctx[0] },
				dirty & /*classes*/ 4 && { class: /*classes*/ ctx[2] },
				{ role: "button" },
				dirty & /*direction*/ 2 && { href: "#" + /*direction*/ ctx[1] }
			]));
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let classes = "";
	let { class: className = "" } = $$props;
	let srText = "";
	let { id = "" } = $$props;
	let { direction = "" } = $$props;
	let { directionText = "" } = $$props;
	let { activeIndex = 0 } = $$props;
	let { items = [] } = $$props;
	let { wrap = true } = $$props;
	const props = clean($$props);

	const getSrText = direction => {
		if (direction === "next") {
			return "Next";
		} else if (direction === "prev") {
			return "Previous";
		}
	};

	function clickHandler() {
		const endOrBeginning = direction === "next" && activeIndex + 1 > items.length - 1 || direction === "previous" && activeIndex - 1 < 0;

		if (!wrap && endOrBeginning) {
			return;
		}

		$$invalidate(6, activeIndex = getNewCarouselActiveIndex(direction, items, activeIndex));
	}

	$$self.$set = $$new_props => {
		$$invalidate(12, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(7, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ("direction" in $$new_props) $$invalidate(1, direction = $$new_props.direction);
		if ("directionText" in $$new_props) $$invalidate(8, directionText = $$new_props.directionText);
		if ("activeIndex" in $$new_props) $$invalidate(6, activeIndex = $$new_props.activeIndex);
		if ("items" in $$new_props) $$invalidate(9, items = $$new_props.items);
		if ("wrap" in $$new_props) $$invalidate(10, wrap = $$new_props.wrap);
	};

	$$self.$capture_state = () => {
		return {
			classes,
			className,
			srText,
			id,
			direction,
			directionText,
			activeIndex,
			items,
			wrap
		};
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(12, $$props = assign(assign({}, $$props), $$new_props));
		if ("classes" in $$props) $$invalidate(2, classes = $$new_props.classes);
		if ("className" in $$props) $$invalidate(7, className = $$new_props.className);
		if ("srText" in $$props) $$invalidate(3, srText = $$new_props.srText);
		if ("id" in $$props) $$invalidate(0, id = $$new_props.id);
		if ("direction" in $$props) $$invalidate(1, direction = $$new_props.direction);
		if ("directionText" in $$props) $$invalidate(8, directionText = $$new_props.directionText);
		if ("activeIndex" in $$props) $$invalidate(6, activeIndex = $$new_props.activeIndex);
		if ("items" in $$props) $$invalidate(9, items = $$new_props.items);
		if ("wrap" in $$props) $$invalidate(10, wrap = $$new_props.wrap);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*direction, className*/ 130) {
			 $$invalidate(2, classes = clsx(`carousel-control-${direction}`, className));
		}

		if ($$self.$$.dirty & /*directionText, direction*/ 258) {
			 $$invalidate(3, srText = directionText ? directionText : getSrText(direction));
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		id,
		direction,
		classes,
		srText,
		props,
		clickHandler,
		activeIndex,
		className,
		directionText,
		items,
		wrap
	];
}

class CarouselControl extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			class: 7,
			id: 0,
			direction: 1,
			directionText: 8,
			activeIndex: 6,
			items: 9,
			wrap: 10
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CarouselControl",
			options,
			id: create_fragment$1.name
		});
	}

	get class() {
		throw new Error("<CarouselControl>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<CarouselControl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<CarouselControl>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<CarouselControl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get direction() {
		throw new Error("<CarouselControl>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<CarouselControl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get directionText() {
		throw new Error("<CarouselControl>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set directionText(value) {
		throw new Error("<CarouselControl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get activeIndex() {
		throw new Error("<CarouselControl>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set activeIndex(value) {
		throw new Error("<CarouselControl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get items() {
		throw new Error("<CarouselControl>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set items(value) {
		throw new Error("<CarouselControl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get wrap() {
		throw new Error("<CarouselControl>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set wrap(value) {
		throw new Error("<CarouselControl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\sveltestrap\src\CarouselIndicators.svelte generated by Svelte v3.18.1 */
const file$2 = "node_modules\\sveltestrap\\src\\CarouselIndicators.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[8] = list[i];
	child_ctx[10] = i;
	return child_ctx;
}

// (18:2) {#each items as item, index}
function create_each_block(ctx) {
	let li;
	let dispose;

	function click_handler(...args) {
		return /*click_handler*/ ctx[7](/*index*/ ctx[10], ...args);
	}

	const block = {
		c: function create() {
			li = element("li");
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			children(li).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			toggle_class(li, "active", /*activeIndex*/ ctx[0] === /*index*/ ctx[10]);
			add_location(li, file$2, 18, 4, 396);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			dispose = listen_dev(li, "click", click_handler, false, false, false);
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*activeIndex*/ 1) {
				toggle_class(li, "active", /*activeIndex*/ ctx[0] === /*index*/ ctx[10]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(18:2) {#each items as item, index}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let ol;
	let each_value = /*items*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	let ol_levels = [/*props*/ ctx[4], { id: /*id*/ ctx[2] }, { class: /*classes*/ ctx[3] }];
	let ol_data = {};

	for (let i = 0; i < ol_levels.length; i += 1) {
		ol_data = assign(ol_data, ol_levels[i]);
	}

	const block = {
		c: function create() {
			ol = element("ol");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			ol = claim_element(nodes, "OL", { id: true, class: true });
			var ol_nodes = children(ol);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ol_nodes);
			}

			ol_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(ol, ol_data);
			add_location(ol, file$2, 16, 0, 324);
		},
		m: function mount(target, anchor) {
			insert_dev(target, ol, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ol, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*activeIndex, items*/ 3) {
				each_value = /*items*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ol, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			set_attributes(ol, get_spread_update(ol_levels, [
				dirty & /*props*/ 16 && /*props*/ ctx[4],
				dirty & /*id*/ 4 && { id: /*id*/ ctx[2] },
				dirty & /*classes*/ 8 && { class: /*classes*/ ctx[3] }
			]));
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(ol);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { class: className = "" } = $$props;
	let classes = "";
	let { items = [] } = $$props;
	let { activeIndex = 0 } = $$props;
	let { id = "" } = $$props;
	const props = clean($$props);
	const click_handler = index => $$invalidate(0, activeIndex = index);

	$$self.$set = $$new_props => {
		$$invalidate(6, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(5, className = $$new_props.class);
		if ("items" in $$new_props) $$invalidate(1, items = $$new_props.items);
		if ("activeIndex" in $$new_props) $$invalidate(0, activeIndex = $$new_props.activeIndex);
		if ("id" in $$new_props) $$invalidate(2, id = $$new_props.id);
	};

	$$self.$capture_state = () => {
		return {
			className,
			classes,
			items,
			activeIndex,
			id
		};
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(6, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(5, className = $$new_props.className);
		if ("classes" in $$props) $$invalidate(3, classes = $$new_props.classes);
		if ("items" in $$props) $$invalidate(1, items = $$new_props.items);
		if ("activeIndex" in $$props) $$invalidate(0, activeIndex = $$new_props.activeIndex);
		if ("id" in $$props) $$invalidate(2, id = $$new_props.id);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className*/ 32) {
			 $$invalidate(3, classes = clsx(className, "carousel-indicators"));
		}
	};

	$$props = exclude_internal_props($$props);
	return [activeIndex, items, id, classes, props, className, $$props, click_handler];
}

class CarouselIndicators extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
			class: 5,
			items: 1,
			activeIndex: 0,
			id: 2
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CarouselIndicators",
			options,
			id: create_fragment$2.name
		});
	}

	get class() {
		throw new Error("<CarouselIndicators>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<CarouselIndicators>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get items() {
		throw new Error("<CarouselIndicators>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set items(value) {
		throw new Error("<CarouselIndicators>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get activeIndex() {
		throw new Error("<CarouselIndicators>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set activeIndex(value) {
		throw new Error("<CarouselIndicators>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<CarouselIndicators>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<CarouselIndicators>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\sveltestrap\src\CarouselItem.svelte generated by Svelte v3.18.1 */
const file$3 = "node_modules\\sveltestrap\\src\\CarouselItem.svelte";

function create_fragment$3(ctx) {
	let div;
	let current;
	const default_slot_template = /*$$slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);

	let div_levels = [
		/*props*/ ctx[4],
		{ id: /*id*/ ctx[0] },
		{
			class: "" + (/*classes*/ ctx[3] + " active")
		}
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { id: true, class: true });
			var div_nodes = children(div);
			if (default_slot) default_slot.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(div, div_data);
			toggle_class(div, "active", /*itemIndex*/ ctx[1] === /*activeIndex*/ ctx[2]);
			add_location(div, file$3, 16, 0, 321);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot && default_slot.p && dirty & /*$$scope*/ 128) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[7], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null));
			}

			set_attributes(div, get_spread_update(div_levels, [
				dirty & /*props*/ 16 && /*props*/ ctx[4],
				dirty & /*id*/ 1 && { id: /*id*/ ctx[0] },
				dirty & /*classes*/ 8 && {
					class: "" + (/*classes*/ ctx[3] + " active")
				}
			]));

			toggle_class(div, "active", /*itemIndex*/ ctx[1] === /*activeIndex*/ ctx[2]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let classes = "";
	let { class: className = "" } = $$props;
	let { id = "" } = $$props;
	let { itemIndex = 0 } = $$props;
	let { activeIndex = 0 } = $$props;
	const props = clean($$props);
	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$new_props => {
		$$invalidate(6, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(5, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ("itemIndex" in $$new_props) $$invalidate(1, itemIndex = $$new_props.itemIndex);
		if ("activeIndex" in $$new_props) $$invalidate(2, activeIndex = $$new_props.activeIndex);
		if ("$$scope" in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => {
		return {
			classes,
			className,
			id,
			itemIndex,
			activeIndex
		};
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(6, $$props = assign(assign({}, $$props), $$new_props));
		if ("classes" in $$props) $$invalidate(3, classes = $$new_props.classes);
		if ("className" in $$props) $$invalidate(5, className = $$new_props.className);
		if ("id" in $$props) $$invalidate(0, id = $$new_props.id);
		if ("itemIndex" in $$props) $$invalidate(1, itemIndex = $$new_props.itemIndex);
		if ("activeIndex" in $$props) $$invalidate(2, activeIndex = $$new_props.activeIndex);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className*/ 32) {
			 $$invalidate(3, classes = clsx(className, "carousel-item"));
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		id,
		itemIndex,
		activeIndex,
		classes,
		props,
		className,
		$$props,
		$$scope,
		$$slots
	];
}

class CarouselItem extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
			class: 5,
			id: 0,
			itemIndex: 1,
			activeIndex: 2
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CarouselItem",
			options,
			id: create_fragment$3.name
		});
	}

	get class() {
		throw new Error("<CarouselItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<CarouselItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<CarouselItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<CarouselItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get itemIndex() {
		throw new Error("<CarouselItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set itemIndex(value) {
		throw new Error("<CarouselItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get activeIndex() {
		throw new Error("<CarouselItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set activeIndex(value) {
		throw new Error("<CarouselItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\sveltestrap\src\CarouselCaption.svelte generated by Svelte v3.18.1 */
const file$4 = "node_modules\\sveltestrap\\src\\CarouselCaption.svelte";

function create_fragment$4(ctx) {
	let div;
	let h5;
	let t0;
	let t1;
	let p;
	let t2;
	let t3;
	let current;
	const default_slot_template = /*$$slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	let div_levels = [/*props*/ ctx[4], { id: /*id*/ ctx[0] }, { class: /*classes*/ ctx[3] }];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			h5 = element("h5");
			t0 = text(/*captionHeader*/ ctx[1]);
			t1 = space();
			p = element("p");
			t2 = text(/*captionText*/ ctx[2]);
			t3 = space();
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { id: true, class: true });
			var div_nodes = children(div);
			h5 = claim_element(div_nodes, "H5", {});
			var h5_nodes = children(h5);
			t0 = claim_text(h5_nodes, /*captionHeader*/ ctx[1]);
			h5_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			p = claim_element(div_nodes, "P", {});
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, /*captionText*/ ctx[2]);
			p_nodes.forEach(detach_dev);
			t3 = claim_space(div_nodes);
			if (default_slot) default_slot.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h5, file$4, 17, 2, 394);
			add_location(p, file$4, 18, 2, 421);
			set_attributes(div, div_data);
			add_location(div, file$4, 16, 0, 354);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h5);
			append_dev(h5, t0);
			append_dev(div, t1);
			append_dev(div, p);
			append_dev(p, t2);
			append_dev(div, t3);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*captionHeader*/ 2) set_data_dev(t0, /*captionHeader*/ ctx[1]);
			if (!current || dirty & /*captionText*/ 4) set_data_dev(t2, /*captionText*/ ctx[2]);

			if (default_slot && default_slot.p && dirty & /*$$scope*/ 128) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[7], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null));
			}

			set_attributes(div, get_spread_update(div_levels, [
				dirty & /*props*/ 16 && /*props*/ ctx[4],
				dirty & /*id*/ 1 && { id: /*id*/ ctx[0] },
				dirty & /*classes*/ 8 && { class: /*classes*/ ctx[3] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	let classes = "";
	let { class: className = "" } = $$props;
	let { id = "" } = $$props;
	let { captionHeader = "" } = $$props;
	let { captionText = "" } = $$props;
	const props = clean($$props);
	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$new_props => {
		$$invalidate(6, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(5, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ("captionHeader" in $$new_props) $$invalidate(1, captionHeader = $$new_props.captionHeader);
		if ("captionText" in $$new_props) $$invalidate(2, captionText = $$new_props.captionText);
		if ("$$scope" in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => {
		return {
			classes,
			className,
			id,
			captionHeader,
			captionText
		};
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(6, $$props = assign(assign({}, $$props), $$new_props));
		if ("classes" in $$props) $$invalidate(3, classes = $$new_props.classes);
		if ("className" in $$props) $$invalidate(5, className = $$new_props.className);
		if ("id" in $$props) $$invalidate(0, id = $$new_props.id);
		if ("captionHeader" in $$props) $$invalidate(1, captionHeader = $$new_props.captionHeader);
		if ("captionText" in $$props) $$invalidate(2, captionText = $$new_props.captionText);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className*/ 32) {
			 $$invalidate(3, classes = clsx(className, "carousel-caption", "d-none", "d-md-block"));
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		id,
		captionHeader,
		captionText,
		classes,
		props,
		className,
		$$props,
		$$scope,
		$$slots
	];
}

class CarouselCaption extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$4, create_fragment$4, safe_not_equal, {
			class: 5,
			id: 0,
			captionHeader: 1,
			captionText: 2
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CarouselCaption",
			options,
			id: create_fragment$4.name
		});
	}

	get class() {
		throw new Error("<CarouselCaption>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<CarouselCaption>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<CarouselCaption>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<CarouselCaption>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get captionHeader() {
		throw new Error("<CarouselCaption>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set captionHeader(value) {
		throw new Error("<CarouselCaption>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get captionText() {
		throw new Error("<CarouselCaption>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set captionText(value) {
		throw new Error("<CarouselCaption>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Carousel as C, CarouselControl as a, CarouselIndicators as b, CarouselItem as c, CarouselCaption as d };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
