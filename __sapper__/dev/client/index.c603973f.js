import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, F as create_component, G as claim_component, H as mount_component, r as transition_in, t as transition_out, I as destroy_component, J as space, K as claim_space, n as insert_dev, j as detach_dev, f as element, y as text, g as claim_element, h as children, z as claim_text, k as attr_dev, l as add_location, o as append_dev, A as set_data_dev, v as create_slot, w as get_slot_context, x as get_slot_changes, L as query_selector_all, B as noop } from './client.00b52971.js';
import { B as Breadcrumb, a as BreadcrumbItem } from './BreadcrumbItem.5ea0248b.js';
import { C as Card, a as CardBody } from './CardBody.c5f34e82.js';
import { C as CardHeader } from './CardHeader.f7662186.js';
import { C as CardText } from './CardText.78b68ff7.js';
import { R as Row } from './Row.9247abca.js';
import { C as CardFooter } from './CardFooter.95d0e6c0.js';
import { T as Table } from './Table.c2a9d079.js';
import './Image.0d4d9ace.js';
import { A as AreaChart } from './AreaChart.e56d3d64.js';
import { B as BarChart } from './BarChart.468974ac.js';

/* src\components\DashboardCard.svelte generated by Svelte v3.18.1 */
const file = "src\\components\\DashboardCard.svelte";

// (20:4) <CardText>
function create_default_slot_3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*cardTitle*/ ctx[0]);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, /*cardTitle*/ ctx[0]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*cardTitle*/ 1) set_data_dev(t, /*cardTitle*/ ctx[0]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(20:4) <CardText>",
		ctx
	});

	return block;
}

// (19:2) <CardBody>
function create_default_slot_2(ctx) {
	let current;

	const cardtext = new CardText({
			props: {
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(cardtext.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(cardtext.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const cardtext_changes = {};

			if (dirty & /*$$scope, cardTitle*/ 9) {
				cardtext_changes.$$scope = { dirty, ctx };
			}

			cardtext.$set(cardtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(19:2) <CardBody>",
		ctx
	});

	return block;
}

// (22:2) <CardFooter class="d-flex align-items-center justify-content-between">
function create_default_slot_1(ctx) {
	let a;
	let t0;
	let t1;
	let div;
	let i;

	const block = {
		c: function create() {
			a = element("a");
			t0 = text(/*cardFooterText*/ ctx[2]);
			t1 = space();
			div = element("div");
			i = element("i");
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { class: true, href: true });
			var a_nodes = children(a);
			t0 = claim_text(a_nodes, /*cardFooterText*/ ctx[2]);
			a_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			i = claim_element(div_nodes, "I", { class: true });
			children(i).forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "class", "small text-white stretched-link");
			attr_dev(a, "href", "charts");
			add_location(a, file, 22, 4, 830);
			attr_dev(i, "class", "fas fa-angle-right");
			add_location(i, file, 26, 6, 965);
			attr_dev(div, "class", "small text-white");
			add_location(div, file, 25, 4, 927);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, div, anchor);
			append_dev(div, i);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*cardFooterText*/ 4) set_data_dev(t0, /*cardFooterText*/ ctx[2]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(22:2) <CardFooter class=\\\"d-flex align-items-center justify-content-between\\\">",
		ctx
	});

	return block;
}

// (18:0) <Card inverse color={cardColor} class="mb-4">
function create_default_slot(ctx) {
	let t;
	let current;

	const cardbody = new CardBody({
			props: {
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const cardfooter = new CardFooter({
			props: {
				class: "d-flex align-items-center justify-content-between",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(cardbody.$$.fragment);
			t = space();
			create_component(cardfooter.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(cardbody.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(cardfooter.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardbody, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(cardfooter, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const cardbody_changes = {};

			if (dirty & /*$$scope, cardTitle*/ 9) {
				cardbody_changes.$$scope = { dirty, ctx };
			}

			cardbody.$set(cardbody_changes);
			const cardfooter_changes = {};

			if (dirty & /*$$scope, cardFooterText*/ 12) {
				cardfooter_changes.$$scope = { dirty, ctx };
			}

			cardfooter.$set(cardfooter_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardbody.$$.fragment, local);
			transition_in(cardfooter.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardbody.$$.fragment, local);
			transition_out(cardfooter.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardbody, detaching);
			if (detaching) detach_dev(t);
			destroy_component(cardfooter, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(18:0) <Card inverse color={cardColor} class=\\\"mb-4\\\">",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let current;

	const card = new Card({
			props: {
				inverse: true,
				color: /*cardColor*/ ctx[1],
				class: "mb-4",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(card.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(card.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(card, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const card_changes = {};
			if (dirty & /*cardColor*/ 2) card_changes.color = /*cardColor*/ ctx[1];

			if (dirty & /*$$scope, cardFooterText, cardTitle*/ 13) {
				card_changes.$$scope = { dirty, ctx };
			}

			card.$set(card_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(card, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { cardTitle = "" } = $$props;
	let { cardColor } = $$props;
	let { cardFooterText = "Детали" } = $$props;
	const writable_props = ["cardTitle", "cardColor", "cardFooterText"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<DashboardCard> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("cardTitle" in $$props) $$invalidate(0, cardTitle = $$props.cardTitle);
		if ("cardColor" in $$props) $$invalidate(1, cardColor = $$props.cardColor);
		if ("cardFooterText" in $$props) $$invalidate(2, cardFooterText = $$props.cardFooterText);
	};

	$$self.$capture_state = () => {
		return { cardTitle, cardColor, cardFooterText };
	};

	$$self.$inject_state = $$props => {
		if ("cardTitle" in $$props) $$invalidate(0, cardTitle = $$props.cardTitle);
		if ("cardColor" in $$props) $$invalidate(1, cardColor = $$props.cardColor);
		if ("cardFooterText" in $$props) $$invalidate(2, cardFooterText = $$props.cardFooterText);
	};

	return [cardTitle, cardColor, cardFooterText];
}

class DashboardCard extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			cardTitle: 0,
			cardColor: 1,
			cardFooterText: 2
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "DashboardCard",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*cardColor*/ ctx[1] === undefined && !("cardColor" in props)) {
			console.warn("<DashboardCard> was created without expected prop 'cardColor'");
		}
	}

	get cardTitle() {
		throw new Error("<DashboardCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set cardTitle(value) {
		throw new Error("<DashboardCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get cardColor() {
		throw new Error("<DashboardCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set cardColor(value) {
		throw new Error("<DashboardCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get cardFooterText() {
		throw new Error("<DashboardCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set cardFooterText(value) {
		throw new Error("<DashboardCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src\components\CustomCard.svelte generated by Svelte v3.18.1 */
const file$1 = "src\\components\\CustomCard.svelte";
const get_chartCaption_slot_changes = dirty => ({});
const get_chartCaption_slot_context = ctx => ({});

// (13:2) <CardHeader>
function create_default_slot_2$1(ctx) {
	let i;
	let t0;
	let t1;

	const block = {
		c: function create() {
			i = element("i");
			t0 = space();
			t1 = text(/*cardTitle*/ ctx[0]);
			this.h();
		},
		l: function claim(nodes) {
			i = claim_element(nodes, "I", { class: true });
			children(i).forEach(detach_dev);
			t0 = claim_space(nodes);
			t1 = claim_text(nodes, /*cardTitle*/ ctx[0]);
			this.h();
		},
		h: function hydrate() {
			attr_dev(i, "class", /*cardIcon*/ ctx[1]);
			add_location(i, file$1, 13, 4, 351);
		},
		m: function mount(target, anchor) {
			insert_dev(target, i, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*cardIcon*/ 2) {
				attr_dev(i, "class", /*cardIcon*/ ctx[1]);
			}

			if (dirty & /*cardTitle*/ 1) set_data_dev(t1, /*cardTitle*/ ctx[0]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(i);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$1.name,
		type: "slot",
		source: "(13:2) <CardHeader>",
		ctx
	});

	return block;
}

// (17:2) <CardBody>
function create_default_slot_1$1(ctx) {
	let t;
	let current;
	const default_slot_template = /*$$slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);
	const chartCaption_slot_template = /*$$slots*/ ctx[2].chartCaption;
	const chartCaption_slot = create_slot(chartCaption_slot_template, ctx, /*$$scope*/ ctx[3], get_chartCaption_slot_context);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
			t = space();
			if (chartCaption_slot) chartCaption_slot.c();
		},
		l: function claim(nodes) {
			if (default_slot) default_slot.l(nodes);
			t = claim_space(nodes);
			if (chartCaption_slot) chartCaption_slot.l(nodes);
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			insert_dev(target, t, anchor);

			if (chartCaption_slot) {
				chartCaption_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot && default_slot.p && dirty & /*$$scope*/ 8) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[3], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null));
			}

			if (chartCaption_slot && chartCaption_slot.p && dirty & /*$$scope*/ 8) {
				chartCaption_slot.p(get_slot_context(chartCaption_slot_template, ctx, /*$$scope*/ ctx[3], get_chartCaption_slot_context), get_slot_changes(chartCaption_slot_template, /*$$scope*/ ctx[3], dirty, get_chartCaption_slot_changes));
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(chartCaption_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			transition_out(chartCaption_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
			if (detaching) detach_dev(t);
			if (chartCaption_slot) chartCaption_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$1.name,
		type: "slot",
		source: "(17:2) <CardBody>",
		ctx
	});

	return block;
}

// (12:0) <Card class="mb-4">
function create_default_slot$1(ctx) {
	let t;
	let current;

	const cardheader = new CardHeader({
			props: {
				$$slots: { default: [create_default_slot_2$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const cardbody = new CardBody({
			props: {
				$$slots: { default: [create_default_slot_1$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(cardheader.$$.fragment);
			t = space();
			create_component(cardbody.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(cardheader.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(cardbody.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardheader, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(cardbody, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const cardheader_changes = {};

			if (dirty & /*$$scope, cardTitle, cardIcon*/ 11) {
				cardheader_changes.$$scope = { dirty, ctx };
			}

			cardheader.$set(cardheader_changes);
			const cardbody_changes = {};

			if (dirty & /*$$scope*/ 8) {
				cardbody_changes.$$scope = { dirty, ctx };
			}

			cardbody.$set(cardbody_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardheader.$$.fragment, local);
			transition_in(cardbody.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardheader.$$.fragment, local);
			transition_out(cardbody.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardheader, detaching);
			if (detaching) detach_dev(t);
			destroy_component(cardbody, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(12:0) <Card class=\\\"mb-4\\\">",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let current;

	const card = new Card({
			props: {
				class: "mb-4",
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(card.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(card.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(card, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const card_changes = {};

			if (dirty & /*$$scope, cardTitle, cardIcon*/ 11) {
				card_changes.$$scope = { dirty, ctx };
			}

			card.$set(card_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(card, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { cardTitle = "" } = $$props;
	let { cardIcon = "" } = $$props;
	const writable_props = ["cardTitle", "cardIcon"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<CustomCard> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ("cardTitle" in $$props) $$invalidate(0, cardTitle = $$props.cardTitle);
		if ("cardIcon" in $$props) $$invalidate(1, cardIcon = $$props.cardIcon);
		if ("$$scope" in $$props) $$invalidate(3, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => {
		return { cardTitle, cardIcon };
	};

	$$self.$inject_state = $$props => {
		if ("cardTitle" in $$props) $$invalidate(0, cardTitle = $$props.cardTitle);
		if ("cardIcon" in $$props) $$invalidate(1, cardIcon = $$props.cardIcon);
	};

	return [cardTitle, cardIcon, $$slots, $$scope];
}

class CustomCard extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { cardTitle: 0, cardIcon: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CustomCard",
			options,
			id: create_fragment$1.name
		});
	}

	get cardTitle() {
		throw new Error("<CustomCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set cardTitle(value) {
		throw new Error("<CustomCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get cardIcon() {
		throw new Error("<CustomCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set cardIcon(value) {
		throw new Error("<CustomCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src\routes\index.svelte generated by Svelte v3.18.1 */
const file$2 = "src\\routes\\index.svelte";

// (25:2) <BreadcrumbItem active>
function create_default_slot_6(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Панель");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Панель");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(25:2) <BreadcrumbItem active>",
		ctx
	});

	return block;
}

// (24:0) <Breadcrumb class="mb-4">
function create_default_slot_5(ctx) {
	let current;

	const breadcrumbitem = new BreadcrumbItem({
			props: {
				active: true,
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(breadcrumbitem.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(breadcrumbitem.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(breadcrumbitem, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const breadcrumbitem_changes = {};

			if (dirty & /*$$scope*/ 2) {
				breadcrumbitem_changes.$$scope = { dirty, ctx };
			}

			breadcrumbitem.$set(breadcrumbitem_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(breadcrumbitem.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(breadcrumbitem.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(breadcrumbitem, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(24:0) <Breadcrumb class=\\\"mb-4\\\">",
		ctx
	});

	return block;
}

// (27:0) <Row>
function create_default_slot_4(ctx) {
	let div0;
	let t0;
	let div1;
	let t1;
	let div2;
	let t2;
	let div3;
	let current;

	const dashboardcard0 = new DashboardCard({
			props: {
				cardTitle: "Синяя плашка",
				cardColor: "primary"
			},
			$$inline: true
		});

	const dashboardcard1 = new DashboardCard({
			props: {
				cardTitle: "Оранжевая плашка",
				cardColor: "warning"
			},
			$$inline: true
		});

	const dashboardcard2 = new DashboardCard({
			props: {
				cardTitle: "Зеленая плашка",
				cardColor: "success"
			},
			$$inline: true
		});

	const dashboardcard3 = new DashboardCard({
			props: {
				cardTitle: "Опасная плашка",
				cardColor: "danger"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div0 = element("div");
			create_component(dashboardcard0.$$.fragment);
			t0 = space();
			div1 = element("div");
			create_component(dashboardcard1.$$.fragment);
			t1 = space();
			div2 = element("div");
			create_component(dashboardcard2.$$.fragment);
			t2 = space();
			div3 = element("div");
			create_component(dashboardcard3.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(dashboardcard0.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			claim_component(dashboardcard1.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			claim_component(dashboardcard2.$$.fragment, div2_nodes);
			div2_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			claim_component(dashboardcard3.$$.fragment, div3_nodes);
			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "col-xl-3 col-md-6");
			add_location(div0, file$2, 27, 2, 1032);
			attr_dev(div1, "class", "col-xl-3 col-md-6");
			add_location(div1, file$2, 30, 2, 1145);
			attr_dev(div2, "class", "col-xl-3 col-md-6");
			add_location(div2, file$2, 33, 2, 1262);
			attr_dev(div3, "class", "col-xl-3 col-md-6");
			add_location(div3, file$2, 36, 2, 1377);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			mount_component(dashboardcard0, div0, null);
			insert_dev(target, t0, anchor);
			insert_dev(target, div1, anchor);
			mount_component(dashboardcard1, div1, null);
			insert_dev(target, t1, anchor);
			insert_dev(target, div2, anchor);
			mount_component(dashboardcard2, div2, null);
			insert_dev(target, t2, anchor);
			insert_dev(target, div3, anchor);
			mount_component(dashboardcard3, div3, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(dashboardcard0.$$.fragment, local);
			transition_in(dashboardcard1.$$.fragment, local);
			transition_in(dashboardcard2.$$.fragment, local);
			transition_in(dashboardcard3.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dashboardcard0.$$.fragment, local);
			transition_out(dashboardcard1.$$.fragment, local);
			transition_out(dashboardcard2.$$.fragment, local);
			transition_out(dashboardcard3.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			destroy_component(dashboardcard0);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div1);
			destroy_component(dashboardcard1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div2);
			destroy_component(dashboardcard2);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(div3);
			destroy_component(dashboardcard3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(27:0) <Row>",
		ctx
	});

	return block;
}

// (43:4) <CustomCard cardTitle="Пример диаграммы" cardIcon="fas fa-chart-area">
function create_default_slot_3$1(ctx) {
	let current;
	const areachart = new AreaChart({ $$inline: true });

	const block = {
		c: function create() {
			create_component(areachart.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(areachart.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(areachart, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(areachart.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(areachart.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(areachart, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3$1.name,
		type: "slot",
		source: "(43:4) <CustomCard cardTitle=\\\"Пример диаграммы\\\" cardIcon=\\\"fas fa-chart-area\\\">",
		ctx
	});

	return block;
}

// (48:4) <CustomCard cardTitle="Пример гистограммы" cardIcon="fas fa-chart-bar">
function create_default_slot_2$2(ctx) {
	let current;
	const barchart = new BarChart({ $$inline: true });

	const block = {
		c: function create() {
			create_component(barchart.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(barchart.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(barchart, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(barchart.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(barchart.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(barchart, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$2.name,
		type: "slot",
		source: "(48:4) <CustomCard cardTitle=\\\"Пример гистограммы\\\" cardIcon=\\\"fas fa-chart-bar\\\">",
		ctx
	});

	return block;
}

// (41:0) <Row>
function create_default_slot_1$2(ctx) {
	let div0;
	let t;
	let div1;
	let current;

	const customcard0 = new CustomCard({
			props: {
				cardTitle: "Пример диаграммы",
				cardIcon: "fas fa-chart-area",
				$$slots: { default: [create_default_slot_3$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const customcard1 = new CustomCard({
			props: {
				cardTitle: "Пример гистограммы",
				cardIcon: "fas fa-chart-bar",
				$$slots: { default: [create_default_slot_2$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div0 = element("div");
			create_component(customcard0.$$.fragment);
			t = space();
			div1 = element("div");
			create_component(customcard1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(customcard0.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			claim_component(customcard1.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "col-xl-6");
			add_location(div0, file$2, 41, 2, 1506);
			attr_dev(div1, "class", "col-xl-6");
			add_location(div1, file$2, 46, 2, 1658);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			mount_component(customcard0, div0, null);
			insert_dev(target, t, anchor);
			insert_dev(target, div1, anchor);
			mount_component(customcard1, div1, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const customcard0_changes = {};

			if (dirty & /*$$scope*/ 2) {
				customcard0_changes.$$scope = { dirty, ctx };
			}

			customcard0.$set(customcard0_changes);
			const customcard1_changes = {};

			if (dirty & /*$$scope*/ 2) {
				customcard1_changes.$$scope = { dirty, ctx };
			}

			customcard1.$set(customcard1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(customcard0.$$.fragment, local);
			transition_in(customcard1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(customcard0.$$.fragment, local);
			transition_out(customcard1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			destroy_component(customcard0);
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(div1);
			destroy_component(customcard1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$2.name,
		type: "slot",
		source: "(41:0) <Row>",
		ctx
	});

	return block;
}

// (53:0) <CustomCard cardTitle="Пример DataTable" cardIcon="fas fa-table">
function create_default_slot$2(ctx) {
	let current;
	const table = new Table({ $$inline: true });

	const block = {
		c: function create() {
			create_component(table.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(table.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(table, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(table.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(table.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(table, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$2.name,
		type: "slot",
		source: "(53:0) <CustomCard cardTitle=\\\"Пример DataTable\\\" cardIcon=\\\"fas fa-table\\\">",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let title_value;
	let t0;
	let h1;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let current;
	document.title = title_value = /*title*/ ctx[0];

	const breadcrumb = new Breadcrumb({
			props: {
				class: "mb-4",
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row0 = new Row({
			props: {
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row1 = new Row({
			props: {
				$$slots: { default: [create_default_slot_1$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const customcard = new CustomCard({
			props: {
				cardTitle: "Пример DataTable",
				cardIcon: "fas fa-table",
				$$slots: { default: [create_default_slot$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("Панель");
			t2 = space();
			create_component(breadcrumb.$$.fragment);
			t3 = space();
			create_component(row0.$$.fragment);
			t4 = space();
			create_component(row1.$$.fragment);
			t5 = space();
			create_component(customcard.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-qazgrf\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Панель");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			claim_component(breadcrumb.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(row0.$$.fragment, nodes);
			t4 = claim_space(nodes);
			claim_component(row1.$$.fragment, nodes);
			t5 = claim_space(nodes);
			claim_component(customcard.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "mt-4");
			add_location(h1, file$2, 22, 0, 901);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			mount_component(breadcrumb, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(row0, target, anchor);
			insert_dev(target, t4, anchor);
			mount_component(row1, target, anchor);
			insert_dev(target, t5, anchor);
			mount_component(customcard, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*title*/ 1) && title_value !== (title_value = /*title*/ ctx[0])) {
				document.title = title_value;
			}

			const breadcrumb_changes = {};

			if (dirty & /*$$scope*/ 2) {
				breadcrumb_changes.$$scope = { dirty, ctx };
			}

			breadcrumb.$set(breadcrumb_changes);
			const row0_changes = {};

			if (dirty & /*$$scope*/ 2) {
				row0_changes.$$scope = { dirty, ctx };
			}

			row0.$set(row0_changes);
			const row1_changes = {};

			if (dirty & /*$$scope*/ 2) {
				row1_changes.$$scope = { dirty, ctx };
			}

			row1.$set(row1_changes);
			const customcard_changes = {};

			if (dirty & /*$$scope*/ 2) {
				customcard_changes.$$scope = { dirty, ctx };
			}

			customcard.$set(customcard_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(breadcrumb.$$.fragment, local);
			transition_in(row0.$$.fragment, local);
			transition_in(row1.$$.fragment, local);
			transition_in(customcard.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(breadcrumb.$$.fragment, local);
			transition_out(row0.$$.fragment, local);
			transition_out(row1.$$.fragment, local);
			transition_out(customcard.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			destroy_component(breadcrumb, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(row0, detaching);
			if (detaching) detach_dev(t4);
			destroy_component(row1, detaching);
			if (detaching) detach_dev(t5);
			destroy_component(customcard, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self) {
	let title = "λproton";

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
	};

	return [title];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment$2.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYzYwMzk3M2YuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0Rhc2hib2FyZENhcmQuc3ZlbHRlIiwiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvQ3VzdG9tQ2FyZC5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvcm91dGVzL2luZGV4LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxyXG4gIGltcG9ydCBDYXJkIGZyb20gXCJzdmVsdGVzdHJhcC9zcmMvQ2FyZC5zdmVsdGVcIjtcclxuICBpbXBvcnQgQ2FyZEJvZHkgZnJvbSBcInN2ZWx0ZXN0cmFwL3NyYy9DYXJkQm9keS5zdmVsdGVcIjtcclxuICBpbXBvcnQgQ2FyZEZvb3RlciBmcm9tIFwic3ZlbHRlc3RyYXAvc3JjL0NhcmRGb290ZXIuc3ZlbHRlXCI7XHJcbiAgaW1wb3J0IENhcmRIZWFkZXIgZnJvbSBcInN2ZWx0ZXN0cmFwL3NyYy9DYXJkSGVhZGVyLnN2ZWx0ZVwiO1xyXG4gIGltcG9ydCBDYXJkVGV4dCBmcm9tIFwic3ZlbHRlc3RyYXAvc3JjL0NhcmRUZXh0LnN2ZWx0ZVwiO1xyXG4gIGltcG9ydCBDYXJkU3VidGl0bGUgZnJvbSBcInN2ZWx0ZXN0cmFwL3NyYy9DYXJkU3VidGl0bGUuc3ZlbHRlXCI7XHJcbiAgaW1wb3J0IFRhYmxlIGZyb20gXCJzdmVsdGVzdHJhcC9zcmMvVGFibGUuc3ZlbHRlXCI7XHJcbiAgaW1wb3J0IFJvdyBmcm9tIFwic3ZlbHRlc3RyYXAvc3JjL1Jvdy5zdmVsdGVcIjtcclxuXHJcbiAgaW1wb3J0IEltYWdlIGZyb20gXCIuLi9jb21wb25lbnRzL0ltYWdlLnN2ZWx0ZVwiO1xyXG5cclxuICBleHBvcnQgbGV0IGNhcmRUaXRsZSA9IFwiXCI7XHJcbiAgZXhwb3J0IGxldCBjYXJkQ29sb3I7XHJcbiAgZXhwb3J0IGxldCBjYXJkRm9vdGVyVGV4dCA9IFwi0JTQtdGC0LDQu9C4XCI7XHJcbjwvc2NyaXB0PlxyXG5cclxuPENhcmQgaW52ZXJzZSBjb2xvcj17Y2FyZENvbG9yfSBjbGFzcz1cIm1iLTRcIj5cclxuICA8Q2FyZEJvZHk+XHJcbiAgICA8Q2FyZFRleHQ+e2NhcmRUaXRsZX08L0NhcmRUZXh0PlxyXG4gIDwvQ2FyZEJvZHk+XHJcbiAgPENhcmRGb290ZXIgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1iZXR3ZWVuXCI+XHJcbiAgICA8YSBjbGFzcz1cInNtYWxsIHRleHQtd2hpdGUgc3RyZXRjaGVkLWxpbmtcIiBocmVmPVwiY2hhcnRzXCI+XHJcbiAgICAgIHtjYXJkRm9vdGVyVGV4dH1cclxuICAgIDwvYT5cclxuICAgIDxkaXYgY2xhc3M9XCJzbWFsbCB0ZXh0LXdoaXRlXCI+XHJcbiAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWFuZ2xlLXJpZ2h0XCIgLz5cclxuICAgIDwvZGl2PlxyXG4gIDwvQ2FyZEZvb3Rlcj5cclxuPC9DYXJkPlxyXG4iLCI8c2NyaXB0PlxyXG4gIGltcG9ydCBDYXJkIGZyb20gXCJzdmVsdGVzdHJhcC9zcmMvQ2FyZC5zdmVsdGVcIjtcclxuICBpbXBvcnQgQ2FyZEJvZHkgZnJvbSBcInN2ZWx0ZXN0cmFwL3NyYy9DYXJkQm9keS5zdmVsdGVcIjtcclxuICBpbXBvcnQgQ2FyZEhlYWRlciBmcm9tIFwic3ZlbHRlc3RyYXAvc3JjL0NhcmRIZWFkZXIuc3ZlbHRlXCI7XHJcblxyXG4gIGltcG9ydCBJbWFnZSBmcm9tIFwiLi4vY29tcG9uZW50cy9JbWFnZS5zdmVsdGVcIjtcclxuXHJcbiAgZXhwb3J0IGxldCBjYXJkVGl0bGUgPSBcIlwiO1xyXG4gIGV4cG9ydCBsZXQgY2FyZEljb24gPSBcIlwiO1xyXG48L3NjcmlwdD5cclxuXHJcbjxDYXJkIGNsYXNzPVwibWItNFwiPlxyXG4gIDxDYXJkSGVhZGVyPlxyXG4gICAgPGkgY2xhc3M9e2NhcmRJY29ufSAvPlxyXG4gICAge2NhcmRUaXRsZX1cclxuICA8L0NhcmRIZWFkZXI+XHJcbiAgPENhcmRCb2R5PlxyXG4gICAgPHNsb3QgLz5cclxuICAgIDxzbG90IG5hbWU9XCJjaGFydENhcHRpb25cIiAvPlxyXG4gIDwvQ2FyZEJvZHk+XHJcbjwvQ2FyZD5cclxuIiwiPHNjcmlwdD5cclxuICBpbXBvcnQgQnJlYWRjcnVtYiBmcm9tIFwic3ZlbHRlc3RyYXAvc3JjL0JyZWFkY3J1bWIuc3ZlbHRlXCI7XHJcbiAgaW1wb3J0IEJyZWFkY3J1bWJJdGVtIGZyb20gXCJzdmVsdGVzdHJhcC9zcmMvQnJlYWRjcnVtYkl0ZW0uc3ZlbHRlXCI7XHJcbiAgaW1wb3J0IENhcmQgZnJvbSBcInN2ZWx0ZXN0cmFwL3NyYy9DYXJkLnN2ZWx0ZVwiO1xyXG4gIGltcG9ydCBDYXJkQm9keSBmcm9tIFwic3ZlbHRlc3RyYXAvc3JjL0NhcmRCb2R5LnN2ZWx0ZVwiO1xyXG4gIGltcG9ydCBDYXJkSGVhZGVyIGZyb20gXCJzdmVsdGVzdHJhcC9zcmMvQ2FyZEhlYWRlci5zdmVsdGVcIjtcclxuICBpbXBvcnQgQ2FyZFRleHQgZnJvbSBcInN2ZWx0ZXN0cmFwL3NyYy9DYXJkVGV4dC5zdmVsdGVcIjtcclxuICBpbXBvcnQgQ2FyZFN1YnRpdGxlIGZyb20gXCJzdmVsdGVzdHJhcC9zcmMvQ2FyZFN1YnRpdGxlLnN2ZWx0ZVwiO1xyXG4gIGltcG9ydCBSb3cgZnJvbSBcInN2ZWx0ZXN0cmFwL3NyYy9Sb3cuc3ZlbHRlXCI7XHJcblxyXG4gIGltcG9ydCBEYXNoYm9hcmRDYXJkIGZyb20gXCIuLi9jb21wb25lbnRzL0Rhc2hib2FyZENhcmQuc3ZlbHRlXCI7XHJcbiAgaW1wb3J0IEN1c3RvbUNhcmQgZnJvbSBcIi4uL2NvbXBvbmVudHMvQ3VzdG9tQ2FyZC5zdmVsdGVcIjtcclxuICBpbXBvcnQgVGFibGUgZnJvbSBcIi4uL2NvbXBvbmVudHMvVGFibGUuc3ZlbHRlXCI7XHJcbiAgaW1wb3J0IEFyZWFDaGFydCBmcm9tIFwiLi4vY29tcG9uZW50cy9DaGFydHMvQXJlYUNoYXJ0LnN2ZWx0ZVwiO1xyXG4gIGltcG9ydCBCYXJDaGFydCBmcm9tIFwiLi4vY29tcG9uZW50cy9DaGFydHMvQmFyQ2hhcnQuc3ZlbHRlXCI7XHJcblxyXG4gIGxldCB0aXRsZSA9IFwizrtwcm90b25cIjtcclxuPC9zY3JpcHQ+XHJcblxyXG48c3ZlbHRlOmhlYWQ+XHJcbiAgPHRpdGxlPnt0aXRsZX08L3RpdGxlPlxyXG48L3N2ZWx0ZTpoZWFkPlxyXG48aDEgY2xhc3M9XCJtdC00XCI+0J/QsNC90LXQu9GMPC9oMT5cclxuPEJyZWFkY3J1bWIgY2xhc3M9XCJtYi00XCI+XHJcbiAgPEJyZWFkY3J1bWJJdGVtIGFjdGl2ZT7Qn9Cw0L3QtdC70Yw8L0JyZWFkY3J1bWJJdGVtPlxyXG48L0JyZWFkY3J1bWI+XHJcbjxSb3c+XHJcbiAgPGRpdiBjbGFzcz1cImNvbC14bC0zIGNvbC1tZC02XCI+XHJcbiAgICA8RGFzaGJvYXJkQ2FyZCBjYXJkVGl0bGU9XCLQodC40L3Rj9GPINC/0LvQsNGI0LrQsFwiIGNhcmRDb2xvcj1cInByaW1hcnlcIiAvPlxyXG4gIDwvZGl2PlxyXG4gIDxkaXYgY2xhc3M9XCJjb2wteGwtMyBjb2wtbWQtNlwiPlxyXG4gICAgPERhc2hib2FyZENhcmQgY2FyZFRpdGxlPVwi0J7RgNCw0L3QttC10LLQsNGPINC/0LvQsNGI0LrQsFwiIGNhcmRDb2xvcj1cIndhcm5pbmdcIiAvPlxyXG4gIDwvZGl2PlxyXG4gIDxkaXYgY2xhc3M9XCJjb2wteGwtMyBjb2wtbWQtNlwiPlxyXG4gICAgPERhc2hib2FyZENhcmQgY2FyZFRpdGxlPVwi0JfQtdC70LXQvdCw0Y8g0L/Qu9Cw0YjQutCwXCIgY2FyZENvbG9yPVwic3VjY2Vzc1wiIC8+XHJcbiAgPC9kaXY+XHJcbiAgPGRpdiBjbGFzcz1cImNvbC14bC0zIGNvbC1tZC02XCI+XHJcbiAgICA8RGFzaGJvYXJkQ2FyZCBjYXJkVGl0bGU9XCLQntC/0LDRgdC90LDRjyDQv9C70LDRiNC60LBcIiBjYXJkQ29sb3I9XCJkYW5nZXJcIiAvPlxyXG4gIDwvZGl2PlxyXG48L1Jvdz5cclxuPFJvdz5cclxuICA8ZGl2IGNsYXNzPVwiY29sLXhsLTZcIj5cclxuICAgIDxDdXN0b21DYXJkIGNhcmRUaXRsZT1cItCf0YDQuNC80LXRgCDQtNC40LDQs9GA0LDQvNC80YtcIiBjYXJkSWNvbj1cImZhcyBmYS1jaGFydC1hcmVhXCI+XHJcbiAgICAgIDxBcmVhQ2hhcnQgLz5cclxuICAgIDwvQ3VzdG9tQ2FyZD5cclxuICA8L2Rpdj5cclxuICA8ZGl2IGNsYXNzPVwiY29sLXhsLTZcIj5cclxuICAgIDxDdXN0b21DYXJkIGNhcmRUaXRsZT1cItCf0YDQuNC80LXRgCDQs9C40YHRgtC+0LPRgNCw0LzQvNGLXCIgY2FyZEljb249XCJmYXMgZmEtY2hhcnQtYmFyXCI+XHJcbiAgICAgIDxCYXJDaGFydCAvPlxyXG4gICAgPC9DdXN0b21DYXJkPlxyXG4gIDwvZGl2PlxyXG48L1Jvdz5cclxuPEN1c3RvbUNhcmQgY2FyZFRpdGxlPVwi0J/RgNC40LzQtdGAIERhdGFUYWJsZVwiIGNhcmRJY29uPVwiZmFzIGZhLXRhYmxlXCI+XHJcbiAgPFRhYmxlIC8+XHJcbjwvQ3VzdG9tQ2FyZD5cclxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzswQkFtQmUsR0FBUzs7O3VDQUFULEdBQVM7Ozs7Ozs4REFBVCxHQUFTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztnQ0FJakIsR0FBYzs7Ozs7Ozs7OytDQUFkLEdBQWM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt5RUFBZCxHQUFjOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt5QkFOQSxHQUFTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7bUVBQVQsR0FBUzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQUxqQixTQUFTLEdBQUcsRUFBRTtPQUNkLFNBQVM7T0FDVCxjQUFjLEdBQUcsUUFBUTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsyQkNBakMsR0FBUzs7Ozs7Ozt3Q0FBVCxHQUFTOzs7O3FDQURBLEdBQVE7Ozs7Ozs7Ozs7c0NBQVIsR0FBUTs7OytEQUNqQixHQUFTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BUEQsU0FBUyxHQUFHLEVBQUU7T0FDZCxRQUFRLEdBQUcsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tDUXBCLEtBQUssR0FBRyxTQUFTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
