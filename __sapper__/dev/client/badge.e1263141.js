import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, U as Button, J as space, f as element, y as text, F as create_component, L as query_selector_all, j as detach_dev, K as claim_space, g as claim_element, h as children, z as claim_text, G as claim_component, k as attr_dev, l as add_location, n as insert_dev, o as append_dev, H as mount_component, r as transition_in, t as transition_out, I as destroy_component, p as group_outros, q as check_outros, M as destroy_each, B as noop } from './client.f386ce35.js';
import { B as Breadcrumb, a as BreadcrumbItem } from './BreadcrumbItem.a86ea66b.js';
import { R as Row } from './Row.2c4fae52.js';
import { B as Badge } from './Badge.d4b93609.js';

/* src\routes\ui\badge.svelte generated by Svelte v3.18.1 */
const file = "src\\routes\\ui\\badge.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

// (26:4) <BreadcrumbItem active>
function create_default_slot_22(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Значки");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Значки");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_22.name,
		type: "slot",
		source: "(26:4) <BreadcrumbItem active>",
		ctx
	});

	return block;
}

// (25:0) <Breadcrumb class="mb-4">
function create_default_slot_21(ctx) {
	let current;

	const breadcrumbitem = new BreadcrumbItem({
			props: {
				active: true,
				$$slots: { default: [create_default_slot_22] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(breadcrumbitem.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(breadcrumbitem.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(breadcrumbitem, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const breadcrumbitem_changes = {};

			if (dirty & /*$$scope*/ 128) {
				breadcrumbitem_changes.$$scope = { dirty, ctx };
			}

			breadcrumbitem.$set(breadcrumbitem_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(breadcrumbitem.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(breadcrumbitem.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(breadcrumbitem, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_21.name,
		type: "slot",
		source: "(25:0) <Breadcrumb class=\\\"mb-4\\\">",
		ctx
	});

	return block;
}

// (31:22) <Badge color="success">
function create_default_slot_20(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Новый");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Новый");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_20.name,
		type: "slot",
		source: "(31:22) <Badge color=\\\"success\\\">",
		ctx
	});

	return block;
}

// (32:22) <Badge color="warning" >
function create_default_slot_19(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Новый");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Новый");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_19.name,
		type: "slot",
		source: "(32:22) <Badge color=\\\"warning\\\" >",
		ctx
	});

	return block;
}

// (33:22) <Badge color="danger" >
function create_default_slot_18(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Новый");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Новый");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_18.name,
		type: "slot",
		source: "(33:22) <Badge color=\\\"danger\\\" >",
		ctx
	});

	return block;
}

// (34:22) <Badge>
function create_default_slot_17(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Новый");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Новый");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_17.name,
		type: "slot",
		source: "(34:22) <Badge>",
		ctx
	});

	return block;
}

// (35:22) <Badge>
function create_default_slot_16(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Новый");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Новый");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_16.name,
		type: "slot",
		source: "(35:22) <Badge>",
		ctx
	});

	return block;
}

// (36:22) <Badge>
function create_default_slot_15(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Новый");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Новый");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_15.name,
		type: "slot",
		source: "(36:22) <Badge>",
		ctx
	});

	return block;
}

// (42:24) <Badge color="secondary">
function create_default_slot_14(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("4");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "4");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_14.name,
		type: "slot",
		source: "(42:24) <Badge color=\\\"secondary\\\">",
		ctx
	});

	return block;
}

// (41:8) <Button color="primary" outline>
function create_default_slot_13(ctx) {
	let t;
	let current;

	const badge = new Badge({
			props: {
				color: "secondary",
				$$slots: { default: [create_default_slot_14] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t = text("Уведомление ");
			create_component(badge.$$.fragment);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Уведомление ");
			claim_component(badge.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			mount_component(badge, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const badge_changes = {};

			if (dirty & /*$$scope*/ 128) {
				badge_changes.$$scope = { dirty, ctx };
			}

			badge.$set(badge_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(badge.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(badge.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			destroy_component(badge, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13.name,
		type: "slot",
		source: "(41:8) <Button color=\\\"primary\\\" outline>",
		ctx
	});

	return block;
}

// (51:16) <Badge {color}>
function create_default_slot_12(ctx) {
	let t_value = /*color*/ ctx[2] + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12.name,
		type: "slot",
		source: "(51:16) <Badge {color}>",
		ctx
	});

	return block;
}

// (49:8) {#each colors as color}
function create_each_block_1(ctx) {
	let div;
	let t;
	let current;

	const badge = new Badge({
			props: {
				color: /*color*/ ctx[2],
				$$slots: { default: [create_default_slot_12] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(badge.$$.fragment);
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			claim_component(badge.$$.fragment, div_nodes);
			t = claim_space(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(div, file, 49, 12, 1523);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(badge, div, null);
			append_dev(div, t);
			current = true;
		},
		p: function update(ctx, dirty) {
			const badge_changes = {};

			if (dirty & /*$$scope*/ 128) {
				badge_changes.$$scope = { dirty, ctx };
			}

			badge.$set(badge_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(badge.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(badge.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(badge);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(49:8) {#each colors as color}",
		ctx
	});

	return block;
}

// (62:16) <Badge pill {color}>
function create_default_slot_11(ctx) {
	let t_value = /*color*/ ctx[2] + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11.name,
		type: "slot",
		source: "(62:16) <Badge pill {color}>",
		ctx
	});

	return block;
}

// (60:8) {#each colors as color}
function create_each_block(ctx) {
	let div;
	let t;
	let current;

	const badge = new Badge({
			props: {
				pill: true,
				color: /*color*/ ctx[2],
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(badge.$$.fragment);
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			claim_component(badge.$$.fragment, div_nodes);
			t = claim_space(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(div, file, 60, 12, 1814);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(badge, div, null);
			append_dev(div, t);
			current = true;
		},
		p: function update(ctx, dirty) {
			const badge_changes = {};

			if (dirty & /*$$scope*/ 128) {
				badge_changes.$$scope = { dirty, ctx };
			}

			badge.$set(badge_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(badge.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(badge.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(badge);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(60:8) {#each colors as color}",
		ctx
	});

	return block;
}

// (28:0) <Row>
function create_default_slot_10(ctx) {
	let div0;
	let h20;
	let t0;
	let t1;
	let h1;
	let t2;
	let t3;
	let h21;
	let t4;
	let t5;
	let h3;
	let t6;
	let t7;
	let h40;
	let t8;
	let t9;
	let h5;
	let t10;
	let t11;
	let h6;
	let t12;
	let t13;
	let div1;
	let h22;
	let t14;
	let t15;
	let h41;
	let t16;
	let t17;
	let t18;
	let div2;
	let h23;
	let t19;
	let t20;
	let h42;
	let t21;
	let t22;
	let t23;
	let div3;
	let h24;
	let t24;
	let t25;
	let h43;
	let t26;
	let t27;
	let current;

	const badge0 = new Badge({
			props: {
				color: "success",
				$$slots: { default: [create_default_slot_20] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const badge1 = new Badge({
			props: {
				color: "warning",
				$$slots: { default: [create_default_slot_19] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const badge2 = new Badge({
			props: {
				color: "danger",
				$$slots: { default: [create_default_slot_18] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const badge3 = new Badge({
			props: {
				$$slots: { default: [create_default_slot_17] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const badge4 = new Badge({
			props: {
				$$slots: { default: [create_default_slot_16] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const badge5 = new Badge({
			props: {
				$$slots: { default: [create_default_slot_15] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const button = new Button({
			props: {
				color: "primary",
				outline: true,
				$$slots: { default: [create_default_slot_13] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	let each_value_1 = /*colors*/ ctx[0];
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks_1[i], 1, 1, () => {
		each_blocks_1[i] = null;
	});

	let each_value = /*colors*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out_1 = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			div0 = element("div");
			h20 = element("h2");
			t0 = text("Пример");
			t1 = space();
			h1 = element("h1");
			t2 = text("Заголовок ");
			create_component(badge0.$$.fragment);
			t3 = space();
			h21 = element("h2");
			t4 = text("Заголовок ");
			create_component(badge1.$$.fragment);
			t5 = space();
			h3 = element("h3");
			t6 = text("Заголовок ");
			create_component(badge2.$$.fragment);
			t7 = space();
			h40 = element("h4");
			t8 = text("Заголовок ");
			create_component(badge3.$$.fragment);
			t9 = space();
			h5 = element("h5");
			t10 = text("Заголовок ");
			create_component(badge4.$$.fragment);
			t11 = space();
			h6 = element("h6");
			t12 = text("Заголовок ");
			create_component(badge5.$$.fragment);
			t13 = space();
			div1 = element("div");
			h22 = element("h2");
			t14 = text("Уведомление");
			t15 = space();
			h41 = element("h4");
			t16 = text("Пример");
			t17 = space();
			create_component(button.$$.fragment);
			t18 = space();
			div2 = element("div");
			h23 = element("h2");
			t19 = text("Цвета");
			t20 = space();
			h42 = element("h4");
			t21 = text("Пример");
			t22 = space();

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t23 = space();
			div3 = element("div");
			h24 = element("h2");
			t24 = text("Округлые значки");
			t25 = space();
			h43 = element("h4");
			t26 = text("Пример");
			t27 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h20 = claim_element(div0_nodes, "H2", { class: true });
			var h20_nodes = children(h20);
			t0 = claim_text(h20_nodes, "Пример");
			h20_nodes.forEach(detach_dev);
			t1 = claim_space(div0_nodes);
			h1 = claim_element(div0_nodes, "H1", {});
			var h1_nodes = children(h1);
			t2 = claim_text(h1_nodes, "Заголовок ");
			claim_component(badge0.$$.fragment, h1_nodes);
			h1_nodes.forEach(detach_dev);
			t3 = claim_space(div0_nodes);
			h21 = claim_element(div0_nodes, "H2", {});
			var h21_nodes = children(h21);
			t4 = claim_text(h21_nodes, "Заголовок ");
			claim_component(badge1.$$.fragment, h21_nodes);
			h21_nodes.forEach(detach_dev);
			t5 = claim_space(div0_nodes);
			h3 = claim_element(div0_nodes, "H3", {});
			var h3_nodes = children(h3);
			t6 = claim_text(h3_nodes, "Заголовок ");
			claim_component(badge2.$$.fragment, h3_nodes);
			h3_nodes.forEach(detach_dev);
			t7 = claim_space(div0_nodes);
			h40 = claim_element(div0_nodes, "H4", {});
			var h40_nodes = children(h40);
			t8 = claim_text(h40_nodes, "Заголовок ");
			claim_component(badge3.$$.fragment, h40_nodes);
			h40_nodes.forEach(detach_dev);
			t9 = claim_space(div0_nodes);
			h5 = claim_element(div0_nodes, "H5", {});
			var h5_nodes = children(h5);
			t10 = claim_text(h5_nodes, "Заголовок ");
			claim_component(badge4.$$.fragment, h5_nodes);
			h5_nodes.forEach(detach_dev);
			t11 = claim_space(div0_nodes);
			h6 = claim_element(div0_nodes, "H6", {});
			var h6_nodes = children(h6);
			t12 = claim_text(h6_nodes, "Заголовок ");
			claim_component(badge5.$$.fragment, h6_nodes);
			h6_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t13 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h22 = claim_element(div1_nodes, "H2", { class: true });
			var h22_nodes = children(h22);
			t14 = claim_text(h22_nodes, "Уведомление");
			h22_nodes.forEach(detach_dev);
			t15 = claim_space(div1_nodes);
			h41 = claim_element(div1_nodes, "H4", { class: true });
			var h41_nodes = children(h41);
			t16 = claim_text(h41_nodes, "Пример");
			h41_nodes.forEach(detach_dev);
			t17 = claim_space(div1_nodes);
			claim_component(button.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			t18 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			h23 = claim_element(div2_nodes, "H2", { class: true });
			var h23_nodes = children(h23);
			t19 = claim_text(h23_nodes, "Цвета");
			h23_nodes.forEach(detach_dev);
			t20 = claim_space(div2_nodes);
			h42 = claim_element(div2_nodes, "H4", { class: true });
			var h42_nodes = children(h42);
			t21 = claim_text(h42_nodes, "Пример");
			h42_nodes.forEach(detach_dev);
			t22 = claim_space(div2_nodes);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(div2_nodes);
			}

			div2_nodes.forEach(detach_dev);
			t23 = claim_space(nodes);
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			h24 = claim_element(div3_nodes, "H2", { class: true });
			var h24_nodes = children(h24);
			t24 = claim_text(h24_nodes, "Округлые значки");
			h24_nodes.forEach(detach_dev);
			t25 = claim_space(div3_nodes);
			h43 = claim_element(div3_nodes, "H4", { class: true });
			var h43_nodes = children(h43);
			t26 = claim_text(h43_nodes, "Пример");
			h43_nodes.forEach(detach_dev);
			t27 = claim_space(div3_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div3_nodes);
			}

			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h20, "class", "mt-4");
			add_location(h20, file, 29, 8, 766);
			add_location(h1, file, 30, 8, 803);
			add_location(h21, file, 31, 8, 867);
			add_location(h3, file, 32, 8, 932);
			add_location(h40, file, 33, 8, 996);
			add_location(h5, file, 34, 8, 1044);
			add_location(h6, file, 35, 8, 1092);
			attr_dev(div0, "class", "col-xl-6");
			add_location(div0, file, 28, 4, 735);
			attr_dev(h22, "class", "mt-4");
			add_location(h22, file, 38, 8, 1178);
			attr_dev(h41, "class", "mt-4");
			add_location(h41, file, 39, 8, 1220);
			attr_dev(div1, "class", "col-xl-6");
			add_location(div1, file, 37, 4, 1147);
			attr_dev(h23, "class", "mt-4");
			add_location(h23, file, 46, 8, 1414);
			attr_dev(h42, "class", "mt-4");
			add_location(h42, file, 47, 8, 1450);
			attr_dev(div2, "class", "col-xl-6");
			add_location(div2, file, 44, 4, 1382);
			attr_dev(h24, "class", "mt-4");
			add_location(h24, file, 57, 8, 1695);
			attr_dev(h43, "class", "mt-4");
			add_location(h43, file, 58, 8, 1741);
			attr_dev(div3, "class", "col-xl-6");
			add_location(div3, file, 56, 4, 1664);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			append_dev(div0, h20);
			append_dev(h20, t0);
			append_dev(div0, t1);
			append_dev(div0, h1);
			append_dev(h1, t2);
			mount_component(badge0, h1, null);
			append_dev(div0, t3);
			append_dev(div0, h21);
			append_dev(h21, t4);
			mount_component(badge1, h21, null);
			append_dev(div0, t5);
			append_dev(div0, h3);
			append_dev(h3, t6);
			mount_component(badge2, h3, null);
			append_dev(div0, t7);
			append_dev(div0, h40);
			append_dev(h40, t8);
			mount_component(badge3, h40, null);
			append_dev(div0, t9);
			append_dev(div0, h5);
			append_dev(h5, t10);
			mount_component(badge4, h5, null);
			append_dev(div0, t11);
			append_dev(div0, h6);
			append_dev(h6, t12);
			mount_component(badge5, h6, null);
			insert_dev(target, t13, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, h22);
			append_dev(h22, t14);
			append_dev(div1, t15);
			append_dev(div1, h41);
			append_dev(h41, t16);
			append_dev(div1, t17);
			mount_component(button, div1, null);
			insert_dev(target, t18, anchor);
			insert_dev(target, div2, anchor);
			append_dev(div2, h23);
			append_dev(h23, t19);
			append_dev(div2, t20);
			append_dev(div2, h42);
			append_dev(h42, t21);
			append_dev(div2, t22);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(div2, null);
			}

			insert_dev(target, t23, anchor);
			insert_dev(target, div3, anchor);
			append_dev(div3, h24);
			append_dev(h24, t24);
			append_dev(div3, t25);
			append_dev(div3, h43);
			append_dev(h43, t26);
			append_dev(div3, t27);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div3, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			const badge0_changes = {};

			if (dirty & /*$$scope*/ 128) {
				badge0_changes.$$scope = { dirty, ctx };
			}

			badge0.$set(badge0_changes);
			const badge1_changes = {};

			if (dirty & /*$$scope*/ 128) {
				badge1_changes.$$scope = { dirty, ctx };
			}

			badge1.$set(badge1_changes);
			const badge2_changes = {};

			if (dirty & /*$$scope*/ 128) {
				badge2_changes.$$scope = { dirty, ctx };
			}

			badge2.$set(badge2_changes);
			const badge3_changes = {};

			if (dirty & /*$$scope*/ 128) {
				badge3_changes.$$scope = { dirty, ctx };
			}

			badge3.$set(badge3_changes);
			const badge4_changes = {};

			if (dirty & /*$$scope*/ 128) {
				badge4_changes.$$scope = { dirty, ctx };
			}

			badge4.$set(badge4_changes);
			const badge5_changes = {};

			if (dirty & /*$$scope*/ 128) {
				badge5_changes.$$scope = { dirty, ctx };
			}

			badge5.$set(badge5_changes);
			const button_changes = {};

			if (dirty & /*$$scope*/ 128) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);

			if (dirty & /*colors*/ 1) {
				each_value_1 = /*colors*/ ctx[0];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
						transition_in(each_blocks_1[i], 1);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						transition_in(each_blocks_1[i], 1);
						each_blocks_1[i].m(div2, null);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks_1.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (dirty & /*colors*/ 1) {
				each_value = /*colors*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div3, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out_1(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(badge0.$$.fragment, local);
			transition_in(badge1.$$.fragment, local);
			transition_in(badge2.$$.fragment, local);
			transition_in(badge3.$$.fragment, local);
			transition_in(badge4.$$.fragment, local);
			transition_in(badge5.$$.fragment, local);
			transition_in(button.$$.fragment, local);

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks_1[i]);
			}

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(badge0.$$.fragment, local);
			transition_out(badge1.$$.fragment, local);
			transition_out(badge2.$$.fragment, local);
			transition_out(badge3.$$.fragment, local);
			transition_out(badge4.$$.fragment, local);
			transition_out(badge5.$$.fragment, local);
			transition_out(button.$$.fragment, local);
			each_blocks_1 = each_blocks_1.filter(Boolean);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				transition_out(each_blocks_1[i]);
			}

			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			destroy_component(badge0);
			destroy_component(badge1);
			destroy_component(badge2);
			destroy_component(badge3);
			destroy_component(badge4);
			destroy_component(badge5);
			if (detaching) detach_dev(t13);
			if (detaching) detach_dev(div1);
			destroy_component(button);
			if (detaching) detach_dev(t18);
			if (detaching) detach_dev(div2);
			destroy_each(each_blocks_1, detaching);
			if (detaching) detach_dev(t23);
			if (detaching) detach_dev(div3);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(28:0) <Row>",
		ctx
	});

	return block;
}

// (73:10) <Badge href="#" color="primary">
function create_default_slot_9(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Основной");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Основной");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(73:10) <Badge href=\\\"#\\\" color=\\\"primary\\\">",
		ctx
	});

	return block;
}

// (74:10) <Badge href="#" color="secondary">
function create_default_slot_8(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Вторичный");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Вторичный");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(74:10) <Badge href=\\\"#\\\" color=\\\"secondary\\\">",
		ctx
	});

	return block;
}

// (75:10) <Badge href="#" color="success">
function create_default_slot_7(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Успешно");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Успешно");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(75:10) <Badge href=\\\"#\\\" color=\\\"success\\\">",
		ctx
	});

	return block;
}

// (76:10) <Badge href="#" color="danger">
function create_default_slot_6(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Опасность");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Опасность");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(76:10) <Badge href=\\\"#\\\" color=\\\"danger\\\">",
		ctx
	});

	return block;
}

// (77:10) <Badge href="#" color="warning">
function create_default_slot_5(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Предупреждение");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Предупреждение");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(77:10) <Badge href=\\\"#\\\" color=\\\"warning\\\">",
		ctx
	});

	return block;
}

// (78:10) <Badge href="#" color="info">
function create_default_slot_4(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Информация");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Информация");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(78:10) <Badge href=\\\"#\\\" color=\\\"info\\\">",
		ctx
	});

	return block;
}

// (79:10) <Badge href="#" color="light">
function create_default_slot_3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Светлый");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Светлый");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(79:10) <Badge href=\\\"#\\\" color=\\\"light\\\">",
		ctx
	});

	return block;
}

// (80:10) <Badge href="#" color="dark">
function create_default_slot_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Тёмный");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Тёмный");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(80:10) <Badge href=\\\"#\\\" color=\\\"dark\\\">",
		ctx
	});

	return block;
}

// (69:2) <Row>
function create_default_slot_1(ctx) {
	let div;
	let h2;
	let t0;
	let t1;
	let h4;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;
	let t7;
	let t8;
	let t9;
	let t10;
	let current;

	const badge0 = new Badge({
			props: {
				href: "#",
				color: "primary",
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const badge1 = new Badge({
			props: {
				href: "#",
				color: "secondary",
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const badge2 = new Badge({
			props: {
				href: "#",
				color: "success",
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const badge3 = new Badge({
			props: {
				href: "#",
				color: "danger",
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const badge4 = new Badge({
			props: {
				href: "#",
				color: "warning",
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const badge5 = new Badge({
			props: {
				href: "#",
				color: "info",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const badge6 = new Badge({
			props: {
				href: "#",
				color: "light",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const badge7 = new Badge({
			props: {
				href: "#",
				color: "dark",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			h2 = element("h2");
			t0 = text("Цветные значки");
			t1 = space();
			h4 = element("h4");
			t2 = text("Пример");
			t3 = space();
			create_component(badge0.$$.fragment);
			t4 = space();
			create_component(badge1.$$.fragment);
			t5 = space();
			create_component(badge2.$$.fragment);
			t6 = space();
			create_component(badge3.$$.fragment);
			t7 = space();
			create_component(badge4.$$.fragment);
			t8 = space();
			create_component(badge5.$$.fragment);
			t9 = space();
			create_component(badge6.$$.fragment);
			t10 = space();
			create_component(badge7.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h2 = claim_element(div_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "Цветные значки");
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			h4 = claim_element(div_nodes, "H4", { class: true });
			var h4_nodes = children(h4);
			t2 = claim_text(h4_nodes, "Пример");
			h4_nodes.forEach(detach_dev);
			t3 = claim_space(div_nodes);
			claim_component(badge0.$$.fragment, div_nodes);
			t4 = claim_space(div_nodes);
			claim_component(badge1.$$.fragment, div_nodes);
			t5 = claim_space(div_nodes);
			claim_component(badge2.$$.fragment, div_nodes);
			t6 = claim_space(div_nodes);
			claim_component(badge3.$$.fragment, div_nodes);
			t7 = claim_space(div_nodes);
			claim_component(badge4.$$.fragment, div_nodes);
			t8 = claim_space(div_nodes);
			claim_component(badge5.$$.fragment, div_nodes);
			t9 = claim_space(div_nodes);
			claim_component(badge6.$$.fragment, div_nodes);
			t10 = claim_space(div_nodes);
			claim_component(badge7.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "mt-4");
			add_location(h2, file, 70, 10, 2011);
			attr_dev(h4, "class", "mt-4");
			add_location(h4, file, 71, 10, 2058);
			attr_dev(div, "class", "col-xl-12");
			add_location(div, file, 69, 6, 1977);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h2);
			append_dev(h2, t0);
			append_dev(div, t1);
			append_dev(div, h4);
			append_dev(h4, t2);
			append_dev(div, t3);
			mount_component(badge0, div, null);
			append_dev(div, t4);
			mount_component(badge1, div, null);
			append_dev(div, t5);
			mount_component(badge2, div, null);
			append_dev(div, t6);
			mount_component(badge3, div, null);
			append_dev(div, t7);
			mount_component(badge4, div, null);
			append_dev(div, t8);
			mount_component(badge5, div, null);
			append_dev(div, t9);
			mount_component(badge6, div, null);
			append_dev(div, t10);
			mount_component(badge7, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const badge0_changes = {};

			if (dirty & /*$$scope*/ 128) {
				badge0_changes.$$scope = { dirty, ctx };
			}

			badge0.$set(badge0_changes);
			const badge1_changes = {};

			if (dirty & /*$$scope*/ 128) {
				badge1_changes.$$scope = { dirty, ctx };
			}

			badge1.$set(badge1_changes);
			const badge2_changes = {};

			if (dirty & /*$$scope*/ 128) {
				badge2_changes.$$scope = { dirty, ctx };
			}

			badge2.$set(badge2_changes);
			const badge3_changes = {};

			if (dirty & /*$$scope*/ 128) {
				badge3_changes.$$scope = { dirty, ctx };
			}

			badge3.$set(badge3_changes);
			const badge4_changes = {};

			if (dirty & /*$$scope*/ 128) {
				badge4_changes.$$scope = { dirty, ctx };
			}

			badge4.$set(badge4_changes);
			const badge5_changes = {};

			if (dirty & /*$$scope*/ 128) {
				badge5_changes.$$scope = { dirty, ctx };
			}

			badge5.$set(badge5_changes);
			const badge6_changes = {};

			if (dirty & /*$$scope*/ 128) {
				badge6_changes.$$scope = { dirty, ctx };
			}

			badge6.$set(badge6_changes);
			const badge7_changes = {};

			if (dirty & /*$$scope*/ 128) {
				badge7_changes.$$scope = { dirty, ctx };
			}

			badge7.$set(badge7_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(badge0.$$.fragment, local);
			transition_in(badge1.$$.fragment, local);
			transition_in(badge2.$$.fragment, local);
			transition_in(badge3.$$.fragment, local);
			transition_in(badge4.$$.fragment, local);
			transition_in(badge5.$$.fragment, local);
			transition_in(badge6.$$.fragment, local);
			transition_in(badge7.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(badge0.$$.fragment, local);
			transition_out(badge1.$$.fragment, local);
			transition_out(badge2.$$.fragment, local);
			transition_out(badge3.$$.fragment, local);
			transition_out(badge4.$$.fragment, local);
			transition_out(badge5.$$.fragment, local);
			transition_out(badge6.$$.fragment, local);
			transition_out(badge7.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(badge0);
			destroy_component(badge1);
			destroy_component(badge2);
			destroy_component(badge3);
			destroy_component(badge4);
			destroy_component(badge5);
			destroy_component(badge6);
			destroy_component(badge7);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(69:2) <Row>",
		ctx
	});

	return block;
}

// (85:0) <Row>
function create_default_slot(ctx) {
	let div;
	let br;

	const block = {
		c: function create() {
			div = element("div");
			br = element("br");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			br = claim_element(div_nodes, "BR", {});
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(br, file, 86, 8, 2624);
			attr_dev(div, "class", "col-xl-12");
			add_location(div, file, 85, 4, 2592);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, br);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(85:0) <Row>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let title_value;
	let t0;
	let h1;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let current;
	document.title = title_value = /*title*/ ctx[1];

	const breadcrumb = new Breadcrumb({
			props: {
				class: "mb-4",
				$$slots: { default: [create_default_slot_21] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row0 = new Row({
			props: {
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row1 = new Row({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row2 = new Row({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("Значки");
			t2 = space();
			create_component(breadcrumb.$$.fragment);
			t3 = space();
			create_component(row0.$$.fragment);
			t4 = space();
			create_component(row1.$$.fragment);
			t5 = space();
			create_component(row2.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1uo06u1\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Значки");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			claim_component(breadcrumb.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(row0.$$.fragment, nodes);
			t4 = claim_space(nodes);
			claim_component(row1.$$.fragment, nodes);
			t5 = claim_space(nodes);
			claim_component(row2.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "mt-4");
			add_location(h1, file, 23, 0, 605);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			mount_component(breadcrumb, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(row0, target, anchor);
			insert_dev(target, t4, anchor);
			mount_component(row1, target, anchor);
			insert_dev(target, t5, anchor);
			mount_component(row2, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*title*/ 2) && title_value !== (title_value = /*title*/ ctx[1])) {
				document.title = title_value;
			}

			const breadcrumb_changes = {};

			if (dirty & /*$$scope*/ 128) {
				breadcrumb_changes.$$scope = { dirty, ctx };
			}

			breadcrumb.$set(breadcrumb_changes);
			const row0_changes = {};

			if (dirty & /*$$scope*/ 128) {
				row0_changes.$$scope = { dirty, ctx };
			}

			row0.$set(row0_changes);
			const row1_changes = {};

			if (dirty & /*$$scope*/ 128) {
				row1_changes.$$scope = { dirty, ctx };
			}

			row1.$set(row1_changes);
			const row2_changes = {};

			if (dirty & /*$$scope*/ 128) {
				row2_changes.$$scope = { dirty, ctx };
			}

			row2.$set(row2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(breadcrumb.$$.fragment, local);
			transition_in(row0.$$.fragment, local);
			transition_in(row1.$$.fragment, local);
			transition_in(row2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(breadcrumb.$$.fragment, local);
			transition_out(row0.$$.fragment, local);
			transition_out(row1.$$.fragment, local);
			transition_out(row2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			destroy_component(breadcrumb, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(row0, detaching);
			if (detaching) detach_dev(t4);
			destroy_component(row1, detaching);
			if (detaching) detach_dev(t5);
			destroy_component(row2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self) {
	const colors = [
		"primary",
		"secondary",
		"success",
		"danger",
		"warning",
		"info",
		"light",
		"dark"
	];

	let title = "Значки | UI | Пользовательский интерфейс";

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("title" in $$props) $$invalidate(1, title = $$props.title);
	};

	return [colors, title];
}

class Badge_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Badge_1",
			options,
			id: create_fragment.name
		});
	}
}

export default Badge_1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFkZ2UuZTEyNjMxNDEuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvdWkvYmFkZ2Uuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gICAgaW1wb3J0IEJyZWFkY3J1bWIgZnJvbSBcInN2ZWx0ZXN0cmFwL3NyYy9CcmVhZGNydW1iLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBCcmVhZGNydW1iSXRlbSBmcm9tIFwic3ZlbHRlc3RyYXAvc3JjL0JyZWFkY3J1bWJJdGVtLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBSb3cgZnJvbSBcInN2ZWx0ZXN0cmFwL3NyYy9Sb3cuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IEJhZGdlIGZyb20gXCJzdmVsdGVzdHJhcC9zcmMvQmFkZ2Uuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IEJ1dHRvbiBmcm9tIFwic3ZlbHRlc3RyYXAvc3JjL0J1dHRvbi5zdmVsdGVcIjtcblxuICAgIGNvbnN0IGNvbG9ycyA9IFtcbiAgICAgICAgXCJwcmltYXJ5XCIsXG4gICAgICAgIFwic2Vjb25kYXJ5XCIsXG4gICAgICAgIFwic3VjY2Vzc1wiLFxuICAgICAgICBcImRhbmdlclwiLFxuICAgICAgICBcIndhcm5pbmdcIixcbiAgICAgICAgXCJpbmZvXCIsXG4gICAgICAgIFwibGlnaHRcIixcbiAgICAgICAgXCJkYXJrXCJcbiAgICBdO1xuICAgIGxldCB0aXRsZSA9IFwi0JfQvdCw0YfQutC4IHwgVUkgfCDQn9C+0LvRjNC30L7QstCw0YLQtdC70YzRgdC60LjQuSDQuNC90YLQtdGA0YTQtdC50YFcIjtcbjwvc2NyaXB0PlxuXG48c3ZlbHRlOmhlYWQ+XG4gICAgPHRpdGxlPnt0aXRsZX08L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cbjxoMSBjbGFzcz1cIm10LTRcIj7Ql9C90LDRh9C60Lg8L2gxPlxuPEJyZWFkY3J1bWIgY2xhc3M9XCJtYi00XCI+XG4gICAgPEJyZWFkY3J1bWJJdGVtIGFjdGl2ZT7Ql9C90LDRh9C60Lg8L0JyZWFkY3J1bWJJdGVtPlxuPC9CcmVhZGNydW1iPlxuPFJvdz5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLXhsLTZcIj5cbiAgICAgICAgPGgyIGNsYXNzPVwibXQtNFwiPtCf0YDQuNC80LXRgDwvaDI+XG4gICAgICAgIDxoMT7Ql9Cw0LPQvtC70L7QstC+0LogPEJhZGdlIGNvbG9yPVwic3VjY2Vzc1wiPtCd0L7QstGL0Lk8L0JhZGdlPjwvaDE+XG4gICAgICAgIDxoMj7Ql9Cw0LPQvtC70L7QstC+0LogPEJhZGdlIGNvbG9yPVwid2FybmluZ1wiID7QndC+0LLRi9C5PC9CYWRnZT48L2gyPlxuICAgICAgICA8aDM+0JfQsNCz0L7Qu9C+0LLQvtC6IDxCYWRnZSBjb2xvcj1cImRhbmdlclwiID7QndC+0LLRi9C5PC9CYWRnZT48L2gzPlxuICAgICAgICA8aDQ+0JfQsNCz0L7Qu9C+0LLQvtC6IDxCYWRnZT7QndC+0LLRi9C5PC9CYWRnZT48L2g0PlxuICAgICAgICA8aDU+0JfQsNCz0L7Qu9C+0LLQvtC6IDxCYWRnZT7QndC+0LLRi9C5PC9CYWRnZT48L2g1PlxuICAgICAgICA8aDY+0JfQsNCz0L7Qu9C+0LLQvtC6IDxCYWRnZT7QndC+0LLRi9C5PC9CYWRnZT48L2g2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjb2wteGwtNlwiPlxuICAgICAgICA8aDIgY2xhc3M9XCJtdC00XCI+0KPQstC10LTQvtC80LvQtdC90LjQtTwvaDI+XG4gICAgICAgIDxoNCBjbGFzcz1cIm10LTRcIj7Qn9GA0LjQvNC10YA8L2g0PlxuICAgICAgICA8QnV0dG9uIGNvbG9yPVwicHJpbWFyeVwiIG91dGxpbmU+XG4gICAgICAgICAgICDQo9Cy0LXQtNC+0LzQu9C10L3QuNC1IDxCYWRnZSBjb2xvcj1cInNlY29uZGFyeVwiPjQ8L0JhZGdlPlxuICAgICAgICA8L0J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLXhsLTZcIj5cblxuICAgICAgICA8aDIgY2xhc3M9XCJtdC00XCI+0KbQstC10YLQsDwvaDI+XG4gICAgICAgIDxoNCBjbGFzcz1cIm10LTRcIj7Qn9GA0LjQvNC10YA8L2g0PlxuICAgICAgICB7I2VhY2ggY29sb3JzIGFzIGNvbG9yfVxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8QmFkZ2Uge2NvbG9yfT5cbiAgICAgICAgICAgICAgICAgICAge2NvbG9yfVxuICAgICAgICAgICAgICAgIDwvQmFkZ2U+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgey9lYWNofVxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjb2wteGwtNlwiPlxuICAgICAgICA8aDIgY2xhc3M9XCJtdC00XCI+0J7QutGA0YPQs9C70YvQtSDQt9C90LDRh9C60Lg8L2gyPlxuICAgICAgICA8aDQgY2xhc3M9XCJtdC00XCI+0J/RgNC40LzQtdGAPC9oND5cbiAgICAgICAgeyNlYWNoIGNvbG9ycyBhcyBjb2xvcn1cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPEJhZGdlIHBpbGwge2NvbG9yfT5cbiAgICAgICAgICAgICAgICAgICAge2NvbG9yfVxuICAgICAgICAgICAgICAgIDwvQmFkZ2U+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgey9lYWNofVxuICAgIDwvZGl2PlxuPC9Sb3c+XG4gIDxSb3c+XG4gICAgICA8ZGl2IGNsYXNzPVwiY29sLXhsLTEyXCI+XG4gICAgICAgICAgPGgyIGNsYXNzPVwibXQtNFwiPtCm0LLQtdGC0L3Ri9C1INC30L3QsNGH0LrQuDwvaDI+XG4gICAgICAgICAgPGg0IGNsYXNzPVwibXQtNFwiPtCf0YDQuNC80LXRgDwvaDQ+XG4gICAgICAgICAgPEJhZGdlIGhyZWY9XCIjXCIgY29sb3I9XCJwcmltYXJ5XCI+0J7RgdC90L7QstC90L7QuTwvQmFkZ2U+XG4gICAgICAgICAgPEJhZGdlIGhyZWY9XCIjXCIgY29sb3I9XCJzZWNvbmRhcnlcIj7QktGC0L7RgNC40YfQvdGL0Lk8L0JhZGdlPlxuICAgICAgICAgIDxCYWRnZSBocmVmPVwiI1wiIGNvbG9yPVwic3VjY2Vzc1wiPtCj0YHQv9C10YjQvdC+PC9CYWRnZT5cbiAgICAgICAgICA8QmFkZ2UgaHJlZj1cIiNcIiBjb2xvcj1cImRhbmdlclwiPtCe0L/QsNGB0L3QvtGB0YLRjDwvQmFkZ2U+XG4gICAgICAgICAgPEJhZGdlIGhyZWY9XCIjXCIgY29sb3I9XCJ3YXJuaW5nXCI+0J/RgNC10LTRg9C/0YDQtdC20LTQtdC90LjQtTwvQmFkZ2U+XG4gICAgICAgICAgPEJhZGdlIGhyZWY9XCIjXCIgY29sb3I9XCJpbmZvXCI+0JjQvdGE0L7RgNC80LDRhtC40Y88L0JhZGdlPlxuICAgICAgICAgIDxCYWRnZSBocmVmPVwiI1wiIGNvbG9yPVwibGlnaHRcIj7QodCy0LXRgtC70YvQuTwvQmFkZ2U+XG4gICAgICAgICAgPEJhZGdlIGhyZWY9XCIjXCIgY29sb3I9XCJkYXJrXCI+0KLRkdC80L3Ri9C5PC9CYWRnZT5cbiAgICAgIDwvZGl2PlxuICA8L1Jvdz5cblxuXG48Um93PlxuICAgIDxkaXYgY2xhc3M9XCJjb2wteGwtMTJcIj5cbiAgICAgICAgPGJyPlxuICAgIDwvZGl2PlxuPC9Sb3c+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7K0JBZ0RlLEdBQU07OztrQ0FBWCxNQUFJOzs7Ozs7Ozs2QkFXQyxHQUFNOzs7Z0NBQVgsTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OEJBWEMsR0FBTTs7O2lDQUFYLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7MEJBQUosTUFBSTs7Ozs7Ozs7NEJBV0MsR0FBTTs7OytCQUFYLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7d0JBQUosTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7b0NBWEosTUFBSTs7OztrQ0FXSixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQXBESixNQUFNO0VBQ1IsU0FBUztFQUNULFdBQVc7RUFDWCxTQUFTO0VBQ1QsUUFBUTtFQUNSLFNBQVM7RUFDVCxNQUFNO0VBQ04sT0FBTztFQUNQLE1BQU07OztLQUVOLEtBQUssR0FBRywwQ0FBMEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
