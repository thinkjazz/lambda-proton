import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, ab as binding_callbacks, ao as bind, J as space, f as element, y as text, F as create_component, L as query_selector_all, j as detach_dev, K as claim_space, g as claim_element, h as children, z as claim_text, G as claim_component, k as attr_dev, l as add_location, n as insert_dev, o as append_dev, H as mount_component, r as transition_in, t as transition_out, I as destroy_component, ap as add_flush_callback, p as group_outros, q as check_outros, M as destroy_each, B as noop } from './client.fc2a4c24.js';
import { B as Breadcrumb, a as BreadcrumbItem } from './BreadcrumbItem.ddbe9aa9.js';
import { R as Row } from './Row.52fd6996.js';
import { C as Carousel, a as CarouselControl, b as CarouselIndicators, c as CarouselItem, d as CarouselCaption } from './CarouselCaption.8113a7f7.js';

/* src\routes\ui\carousel.svelte generated by Svelte v3.18.1 */
const file = "src\\routes\\ui\\carousel.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[21] = list[i];
	child_ctx[23] = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[21] = list[i];
	child_ctx[23] = i;
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[21] = list[i];
	child_ctx[23] = i;
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[21] = list[i];
	child_ctx[23] = i;
	return child_ctx;
}

// (59:4) <BreadcrumbItem active>
function create_default_slot_13(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Карусель и Слайдер");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Карусель и Слайдер");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13.name,
		type: "slot",
		source: "(59:4) <BreadcrumbItem active>",
		ctx
	});

	return block;
}

// (58:0) <Breadcrumb class="mb-4">
function create_default_slot_12(ctx) {
	let current;

	const breadcrumbitem = new BreadcrumbItem({
			props: {
				active: true,
				$$slots: { default: [create_default_slot_13] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(breadcrumbitem.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(breadcrumbitem.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(breadcrumbitem, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const breadcrumbitem_changes = {};

			if (dirty & /*$$scope*/ 134217728) {
				breadcrumbitem_changes.$$scope = { dirty, ctx };
			}

			breadcrumbitem.$set(breadcrumbitem_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(breadcrumbitem.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(breadcrumbitem.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(breadcrumbitem, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12.name,
		type: "slot",
		source: "(58:0) <Breadcrumb class=\\\"mb-4\\\">",
		ctx
	});

	return block;
}

// (67:20) <CarouselItem bind:activeIndex itemIndex={index}>
function create_default_slot_11(ctx) {
	let img;
	let img_src_value;
	let img_alt_value;
	let t;

	const block = {
		c: function create() {
			img = element("img");
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { src: true, class: true, alt: true });
			t = claim_space(nodes);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*item*/ ctx[21])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "class", "d-block w-100");
			attr_dev(img, "alt", img_alt_value = `${/*item*/ ctx[21]} ${/*index*/ ctx[23] + 1}`);
			add_location(img, file, 67, 24, 8175);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
			insert_dev(target, t, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11.name,
		type: "slot",
		source: "(67:20) <CarouselItem bind:activeIndex itemIndex={index}>",
		ctx
	});

	return block;
}

// (66:16) {#each items as item, index}
function create_each_block_3(ctx) {
	let updating_activeIndex;
	let current;

	function carouselitem_activeIndex_binding(value) {
		/*carouselitem_activeIndex_binding*/ ctx[5].call(null, value);
	}

	let carouselitem_props = {
		itemIndex: /*index*/ ctx[23],
		$$slots: { default: [create_default_slot_11] },
		$$scope: { ctx }
	};

	if (/*activeIndex*/ ctx[0] !== void 0) {
		carouselitem_props.activeIndex = /*activeIndex*/ ctx[0];
	}

	const carouselitem = new CarouselItem({
			props: carouselitem_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(carouselitem, "activeIndex", carouselitem_activeIndex_binding));

	const block = {
		c: function create() {
			create_component(carouselitem.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(carouselitem.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(carouselitem, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const carouselitem_changes = {};

			if (dirty & /*$$scope*/ 134217728) {
				carouselitem_changes.$$scope = { dirty, ctx };
			}

			if (!updating_activeIndex && dirty & /*activeIndex*/ 1) {
				updating_activeIndex = true;
				carouselitem_changes.activeIndex = /*activeIndex*/ ctx[0];
				add_flush_callback(() => updating_activeIndex = false);
			}

			carouselitem.$set(carouselitem_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(carouselitem.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(carouselitem.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(carouselitem, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_3.name,
		type: "each",
		source: "(66:16) {#each items as item, index}",
		ctx
	});

	return block;
}

// (64:8) <Carousel {items} bind:activeIndex>
function create_default_slot_10(ctx) {
	let div;
	let current;
	let each_value_3 = /*items*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "carousel-inner");
			add_location(div, file, 64, 12, 8004);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*activeIndex, items*/ 3) {
				each_value_3 = /*items*/ ctx[1];
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_3(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value_3.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value_3.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(64:8) <Carousel {items} bind:activeIndex>",
		ctx
	});

	return block;
}

// (61:0) <Row>
function create_default_slot_9(ctx) {
	let div;
	let h1;
	let t0;
	let t1;
	let updating_activeIndex;
	let current;

	function carousel_activeIndex_binding(value) {
		/*carousel_activeIndex_binding*/ ctx[6].call(null, value);
	}

	let carousel_props = {
		items: /*items*/ ctx[1],
		$$slots: { default: [create_default_slot_10] },
		$$scope: { ctx }
	};

	if (/*activeIndex*/ ctx[0] !== void 0) {
		carousel_props.activeIndex = /*activeIndex*/ ctx[0];
	}

	const carousel = new Carousel({ props: carousel_props, $$inline: true });
	binding_callbacks.push(() => bind(carousel, "activeIndex", carousel_activeIndex_binding));

	const block = {
		c: function create() {
			div = element("div");
			h1 = element("h1");
			t0 = text("Пример слайдов");
			t1 = space();
			create_component(carousel.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h1 = claim_element(div_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Пример слайдов");
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			claim_component(carousel.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "mt-4");
			add_location(h1, file, 62, 8, 7909);
			attr_dev(div, "class", "col-xl-8");
			add_location(div, file, 61, 4, 7877);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h1);
			append_dev(h1, t0);
			append_dev(div, t1);
			mount_component(carousel, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const carousel_changes = {};

			if (dirty & /*$$scope, activeIndex*/ 134217729) {
				carousel_changes.$$scope = { dirty, ctx };
			}

			if (!updating_activeIndex && dirty & /*activeIndex*/ 1) {
				updating_activeIndex = true;
				carousel_changes.activeIndex = /*activeIndex*/ ctx[0];
				add_flush_callback(() => updating_activeIndex = false);
			}

			carousel.$set(carousel_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(carousel.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(carousel.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(carousel);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(61:0) <Row>",
		ctx
	});

	return block;
}

// (82:28) <CarouselItem bind:activeIndex itemIndex={index}>
function create_default_slot_8(ctx) {
	let img;
	let img_src_value;
	let img_alt_value;
	let t;

	const block = {
		c: function create() {
			img = element("img");
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { src: true, class: true, alt: true });
			t = claim_space(nodes);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*item*/ ctx[21])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "class", "d-block w-100");
			attr_dev(img, "alt", img_alt_value = `${/*item*/ ctx[21]} ${/*index*/ ctx[23] + 1}`);
			add_location(img, file, 82, 32, 8786);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
			insert_dev(target, t, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(82:28) <CarouselItem bind:activeIndex itemIndex={index}>",
		ctx
	});

	return block;
}

// (81:24) {#each items as item, index}
function create_each_block_2(ctx) {
	let updating_activeIndex;
	let current;

	function carouselitem_activeIndex_binding_1(value) {
		/*carouselitem_activeIndex_binding_1*/ ctx[7].call(null, value);
	}

	let carouselitem_props = {
		itemIndex: /*index*/ ctx[23],
		$$slots: { default: [create_default_slot_8] },
		$$scope: { ctx }
	};

	if (/*activeIndex*/ ctx[0] !== void 0) {
		carouselitem_props.activeIndex = /*activeIndex*/ ctx[0];
	}

	const carouselitem = new CarouselItem({
			props: carouselitem_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(carouselitem, "activeIndex", carouselitem_activeIndex_binding_1));

	const block = {
		c: function create() {
			create_component(carouselitem.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(carouselitem.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(carouselitem, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const carouselitem_changes = {};

			if (dirty & /*$$scope*/ 134217728) {
				carouselitem_changes.$$scope = { dirty, ctx };
			}

			if (!updating_activeIndex && dirty & /*activeIndex*/ 1) {
				updating_activeIndex = true;
				carouselitem_changes.activeIndex = /*activeIndex*/ ctx[0];
				add_flush_callback(() => updating_activeIndex = false);
			}

			carouselitem.$set(carouselitem_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(carouselitem.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(carouselitem.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(carouselitem, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(81:24) {#each items as item, index}",
		ctx
	});

	return block;
}

// (79:16) <Carousel {items} bind:activeIndex>
function create_default_slot_7(ctx) {
	let div;
	let t0;
	let updating_activeIndex;
	let t1;
	let updating_activeIndex_1;
	let current;
	let each_value_2 = /*items*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	function carouselcontrol0_activeIndex_binding(value) {
		/*carouselcontrol0_activeIndex_binding*/ ctx[8].call(null, value);
	}

	let carouselcontrol0_props = {
		direction: "prev",
		items: /*items*/ ctx[1]
	};

	if (/*activeIndex*/ ctx[0] !== void 0) {
		carouselcontrol0_props.activeIndex = /*activeIndex*/ ctx[0];
	}

	const carouselcontrol0 = new CarouselControl({
			props: carouselcontrol0_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(carouselcontrol0, "activeIndex", carouselcontrol0_activeIndex_binding));

	function carouselcontrol1_activeIndex_binding(value_1) {
		/*carouselcontrol1_activeIndex_binding*/ ctx[9].call(null, value_1);
	}

	let carouselcontrol1_props = {
		direction: "next",
		items: /*items*/ ctx[1]
	};

	if (/*activeIndex*/ ctx[0] !== void 0) {
		carouselcontrol1_props.activeIndex = /*activeIndex*/ ctx[0];
	}

	const carouselcontrol1 = new CarouselControl({
			props: carouselcontrol1_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(carouselcontrol1, "activeIndex", carouselcontrol1_activeIndex_binding));

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			create_component(carouselcontrol0.$$.fragment);
			t1 = space();
			create_component(carouselcontrol1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			claim_component(carouselcontrol0.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(carouselcontrol1.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "carousel-inner");
			add_location(div, file, 79, 20, 8591);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			insert_dev(target, t0, anchor);
			mount_component(carouselcontrol0, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(carouselcontrol1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*activeIndex, items*/ 3) {
				each_value_2 = /*items*/ ctx[1];
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value_2.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			const carouselcontrol0_changes = {};

			if (!updating_activeIndex && dirty & /*activeIndex*/ 1) {
				updating_activeIndex = true;
				carouselcontrol0_changes.activeIndex = /*activeIndex*/ ctx[0];
				add_flush_callback(() => updating_activeIndex = false);
			}

			carouselcontrol0.$set(carouselcontrol0_changes);
			const carouselcontrol1_changes = {};

			if (!updating_activeIndex_1 && dirty & /*activeIndex*/ 1) {
				updating_activeIndex_1 = true;
				carouselcontrol1_changes.activeIndex = /*activeIndex*/ ctx[0];
				add_flush_callback(() => updating_activeIndex_1 = false);
			}

			carouselcontrol1.$set(carouselcontrol1_changes);
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value_2.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(carouselcontrol0.$$.fragment, local);
			transition_in(carouselcontrol1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(carouselcontrol0.$$.fragment, local);
			transition_out(carouselcontrol1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(carouselcontrol0, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(carouselcontrol1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(79:16) <Carousel {items} bind:activeIndex>",
		ctx
	});

	return block;
}

// (75:0) <Row>
function create_default_slot_6(ctx) {
	let div;
	let h1;
	let t0;
	let t1;
	let h2;
	let t2;
	let t3;
	let updating_activeIndex;
	let current;

	function carousel_activeIndex_binding_1(value) {
		/*carousel_activeIndex_binding_1*/ ctx[10].call(null, value);
	}

	let carousel_props = {
		items: /*items*/ ctx[1],
		$$slots: { default: [create_default_slot_7] },
		$$scope: { ctx }
	};

	if (/*activeIndex*/ ctx[0] !== void 0) {
		carousel_props.activeIndex = /*activeIndex*/ ctx[0];
	}

	const carousel = new Carousel({ props: carousel_props, $$inline: true });
	binding_callbacks.push(() => bind(carousel, "activeIndex", carousel_activeIndex_binding_1));

	const block = {
		c: function create() {
			div = element("div");
			h1 = element("h1");
			t0 = text("Пример слайдов с управлением");
			t1 = space();
			h2 = element("h2");
			t2 = text("Пример слайдов");
			t3 = space();
			create_component(carousel.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h1 = claim_element(div_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Пример слайдов с управлением");
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			h2 = claim_element(div_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t2 = claim_text(h2_nodes, "Пример слайдов");
			h2_nodes.forEach(detach_dev);
			t3 = claim_space(div_nodes);
			claim_component(carousel.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "mt-4");
			add_location(h1, file, 76, 8, 8412);
			attr_dev(h2, "class", "mt-4");
			add_location(h2, file, 77, 16, 8480);
			attr_dev(div, "class", "col-xl-8");
			add_location(div, file, 75, 4, 8380);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h1);
			append_dev(h1, t0);
			append_dev(div, t1);
			append_dev(div, h2);
			append_dev(h2, t2);
			append_dev(div, t3);
			mount_component(carousel, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const carousel_changes = {};

			if (dirty & /*$$scope, activeIndex*/ 134217729) {
				carousel_changes.$$scope = { dirty, ctx };
			}

			if (!updating_activeIndex && dirty & /*activeIndex*/ 1) {
				updating_activeIndex = true;
				carousel_changes.activeIndex = /*activeIndex*/ ctx[0];
				add_flush_callback(() => updating_activeIndex = false);
			}

			carousel.$set(carousel_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(carousel.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(carousel.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(carousel);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(75:0) <Row>",
		ctx
	});

	return block;
}

// (101:24) <CarouselItem bind:activeIndex itemIndex={index}>
function create_default_slot_5(ctx) {
	let img;
	let img_src_value;
	let img_alt_value;
	let t;

	const block = {
		c: function create() {
			img = element("img");
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { src: true, class: true, alt: true });
			t = claim_space(nodes);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*item*/ ctx[21])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "class", "d-block w-100");
			attr_dev(img, "alt", img_alt_value = `${/*item*/ ctx[21]} ${/*index*/ ctx[23] + 1}`);
			add_location(img, file, 101, 28, 9633);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
			insert_dev(target, t, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(101:24) <CarouselItem bind:activeIndex itemIndex={index}>",
		ctx
	});

	return block;
}

// (100:20) {#each items as item, index}
function create_each_block_1(ctx) {
	let updating_activeIndex;
	let current;

	function carouselitem_activeIndex_binding_2(value) {
		/*carouselitem_activeIndex_binding_2*/ ctx[12].call(null, value);
	}

	let carouselitem_props = {
		itemIndex: /*index*/ ctx[23],
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	};

	if (/*activeIndex*/ ctx[0] !== void 0) {
		carouselitem_props.activeIndex = /*activeIndex*/ ctx[0];
	}

	const carouselitem = new CarouselItem({
			props: carouselitem_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(carouselitem, "activeIndex", carouselitem_activeIndex_binding_2));

	const block = {
		c: function create() {
			create_component(carouselitem.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(carouselitem.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(carouselitem, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const carouselitem_changes = {};

			if (dirty & /*$$scope*/ 134217728) {
				carouselitem_changes.$$scope = { dirty, ctx };
			}

			if (!updating_activeIndex && dirty & /*activeIndex*/ 1) {
				updating_activeIndex = true;
				carouselitem_changes.activeIndex = /*activeIndex*/ ctx[0];
				add_flush_callback(() => updating_activeIndex = false);
			}

			carouselitem.$set(carouselitem_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(carouselitem.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(carouselitem.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(carouselitem, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(100:20) {#each items as item, index}",
		ctx
	});

	return block;
}

// (96:12) <Carousel {items} bind:activeIndex>
function create_default_slot_4(ctx) {
	let updating_activeIndex;
	let t0;
	let div;
	let t1;
	let updating_activeIndex_1;
	let t2;
	let updating_activeIndex_2;
	let current;

	function carouselindicators_activeIndex_binding(value) {
		/*carouselindicators_activeIndex_binding*/ ctx[11].call(null, value);
	}

	let carouselindicators_props = { items: /*items*/ ctx[1] };

	if (/*activeIndex*/ ctx[0] !== void 0) {
		carouselindicators_props.activeIndex = /*activeIndex*/ ctx[0];
	}

	const carouselindicators = new CarouselIndicators({
			props: carouselindicators_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(carouselindicators, "activeIndex", carouselindicators_activeIndex_binding));
	let each_value_1 = /*items*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	function carouselcontrol0_activeIndex_binding_1(value_1) {
		/*carouselcontrol0_activeIndex_binding_1*/ ctx[13].call(null, value_1);
	}

	let carouselcontrol0_props = {
		direction: "prev",
		items: /*items*/ ctx[1]
	};

	if (/*activeIndex*/ ctx[0] !== void 0) {
		carouselcontrol0_props.activeIndex = /*activeIndex*/ ctx[0];
	}

	const carouselcontrol0 = new CarouselControl({
			props: carouselcontrol0_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(carouselcontrol0, "activeIndex", carouselcontrol0_activeIndex_binding_1));

	function carouselcontrol1_activeIndex_binding_1(value_2) {
		/*carouselcontrol1_activeIndex_binding_1*/ ctx[14].call(null, value_2);
	}

	let carouselcontrol1_props = {
		direction: "next",
		items: /*items*/ ctx[1]
	};

	if (/*activeIndex*/ ctx[0] !== void 0) {
		carouselcontrol1_props.activeIndex = /*activeIndex*/ ctx[0];
	}

	const carouselcontrol1 = new CarouselControl({
			props: carouselcontrol1_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(carouselcontrol1, "activeIndex", carouselcontrol1_activeIndex_binding_1));

	const block = {
		c: function create() {
			create_component(carouselindicators.$$.fragment);
			t0 = space();
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t1 = space();
			create_component(carouselcontrol0.$$.fragment);
			t2 = space();
			create_component(carouselcontrol1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			claim_component(carouselindicators.$$.fragment, nodes);
			t0 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			claim_component(carouselcontrol0.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(carouselcontrol1.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "carousel-inner");
			add_location(div, file, 98, 16, 9450);
		},
		m: function mount(target, anchor) {
			mount_component(carouselindicators, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			insert_dev(target, t1, anchor);
			mount_component(carouselcontrol0, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(carouselcontrol1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const carouselindicators_changes = {};

			if (!updating_activeIndex && dirty & /*activeIndex*/ 1) {
				updating_activeIndex = true;
				carouselindicators_changes.activeIndex = /*activeIndex*/ ctx[0];
				add_flush_callback(() => updating_activeIndex = false);
			}

			carouselindicators.$set(carouselindicators_changes);

			if (dirty & /*activeIndex, items*/ 3) {
				each_value_1 = /*items*/ ctx[1];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			const carouselcontrol0_changes = {};

			if (!updating_activeIndex_1 && dirty & /*activeIndex*/ 1) {
				updating_activeIndex_1 = true;
				carouselcontrol0_changes.activeIndex = /*activeIndex*/ ctx[0];
				add_flush_callback(() => updating_activeIndex_1 = false);
			}

			carouselcontrol0.$set(carouselcontrol0_changes);
			const carouselcontrol1_changes = {};

			if (!updating_activeIndex_2 && dirty & /*activeIndex*/ 1) {
				updating_activeIndex_2 = true;
				carouselcontrol1_changes.activeIndex = /*activeIndex*/ ctx[0];
				add_flush_callback(() => updating_activeIndex_2 = false);
			}

			carouselcontrol1.$set(carouselcontrol1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(carouselindicators.$$.fragment, local);

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(carouselcontrol0.$$.fragment, local);
			transition_in(carouselcontrol1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(carouselindicators.$$.fragment, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(carouselcontrol0.$$.fragment, local);
			transition_out(carouselcontrol1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(carouselindicators, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(carouselcontrol0, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(carouselcontrol1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(96:12) <Carousel {items} bind:activeIndex>",
		ctx
	});

	return block;
}

// (92:0) <Row>
function create_default_slot_3(ctx) {
	let div;
	let h1;
	let t0;
	let t1;
	let h2;
	let t2;
	let t3;
	let updating_activeIndex;
	let current;

	function carousel_activeIndex_binding_2(value) {
		/*carousel_activeIndex_binding_2*/ ctx[15].call(null, value);
	}

	let carousel_props = {
		items: /*items*/ ctx[1],
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	};

	if (/*activeIndex*/ ctx[0] !== void 0) {
		carousel_props.activeIndex = /*activeIndex*/ ctx[0];
	}

	const carousel = new Carousel({ props: carousel_props, $$inline: true });
	binding_callbacks.push(() => bind(carousel, "activeIndex", carousel_activeIndex_binding_2));

	const block = {
		c: function create() {
			div = element("div");
			h1 = element("h1");
			t0 = text("Пример слайдов с индикаторами");
			t1 = space();
			h2 = element("h2");
			t2 = text("Пример слайдов");
			t3 = space();
			create_component(carousel.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h1 = claim_element(div_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Пример слайдов с индикаторами");
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			h2 = claim_element(div_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t2 = claim_text(h2_nodes, "Пример слайдов");
			h2_nodes.forEach(detach_dev);
			t3 = claim_space(div_nodes);
			claim_component(carousel.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "mt-4");
			add_location(h1, file, 93, 4, 9217);
			attr_dev(h2, "class", "mt-4");
			add_location(h2, file, 94, 10, 9280);
			attr_dev(div, "class", "col-xl-8");
			add_location(div, file, 92, 0, 9189);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h1);
			append_dev(h1, t0);
			append_dev(div, t1);
			append_dev(div, h2);
			append_dev(h2, t2);
			append_dev(div, t3);
			mount_component(carousel, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const carousel_changes = {};

			if (dirty & /*$$scope, activeIndex*/ 134217729) {
				carousel_changes.$$scope = { dirty, ctx };
			}

			if (!updating_activeIndex && dirty & /*activeIndex*/ 1) {
				updating_activeIndex = true;
				carousel_changes.activeIndex = /*activeIndex*/ ctx[0];
				add_flush_callback(() => updating_activeIndex = false);
			}

			carousel.$set(carousel_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(carousel.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(carousel.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(carousel);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(92:0) <Row>",
		ctx
	});

	return block;
}

// (122:20) <CarouselItem bind:activeIndex itemIndex={index}>
function create_default_slot_2(ctx) {
	let img;
	let img_src_value;
	let img_alt_value;
	let t0;
	let t1;
	let current;

	const carouselcaption = new CarouselCaption({
			props: {
				captionHeader: /*item*/ ctx[21].title,
				captionText: /*item*/ ctx[21].subTitle
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			img = element("img");
			t0 = space();
			create_component(carouselcaption.$$.fragment);
			t1 = space();
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { src: true, class: true, alt: true });
			t0 = claim_space(nodes);
			claim_component(carouselcaption.$$.fragment, nodes);
			t1 = claim_space(nodes);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*item*/ ctx[21].url)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "class", "d-block w-100");
			attr_dev(img, "alt", img_alt_value = /*item*/ ctx[21].title);
			add_location(img, file, 122, 24, 10468);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
			insert_dev(target, t0, anchor);
			mount_component(carouselcaption, target, anchor);
			insert_dev(target, t1, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(carouselcaption.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(carouselcaption.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			if (detaching) detach_dev(t0);
			destroy_component(carouselcaption, detaching);
			if (detaching) detach_dev(t1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(122:20) <CarouselItem bind:activeIndex itemIndex={index}>",
		ctx
	});

	return block;
}

// (121:16) {#each items2 as item, index}
function create_each_block(ctx) {
	let updating_activeIndex;
	let current;

	function carouselitem_activeIndex_binding_3(value) {
		/*carouselitem_activeIndex_binding_3*/ ctx[17].call(null, value);
	}

	let carouselitem_props = {
		itemIndex: /*index*/ ctx[23],
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	};

	if (/*activeIndex*/ ctx[0] !== void 0) {
		carouselitem_props.activeIndex = /*activeIndex*/ ctx[0];
	}

	const carouselitem = new CarouselItem({
			props: carouselitem_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(carouselitem, "activeIndex", carouselitem_activeIndex_binding_3));

	const block = {
		c: function create() {
			create_component(carouselitem.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(carouselitem.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(carouselitem, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const carouselitem_changes = {};

			if (dirty & /*$$scope*/ 134217728) {
				carouselitem_changes.$$scope = { dirty, ctx };
			}

			if (!updating_activeIndex && dirty & /*activeIndex*/ 1) {
				updating_activeIndex = true;
				carouselitem_changes.activeIndex = /*activeIndex*/ ctx[0];
				add_flush_callback(() => updating_activeIndex = false);
			}

			carouselitem.$set(carouselitem_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(carouselitem.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(carouselitem.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(carouselitem, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(121:16) {#each items2 as item, index}",
		ctx
	});

	return block;
}

// (117:8) <Carousel {items2} bind:activeIndex ride={true} interval={2000}>
function create_default_slot_1(ctx) {
	let updating_activeIndex;
	let t0;
	let div;
	let t1;
	let updating_activeIndex_1;
	let t2;
	let updating_activeIndex_2;
	let current;

	function carouselindicators_activeIndex_binding_1(value) {
		/*carouselindicators_activeIndex_binding_1*/ ctx[16].call(null, value);
	}

	let carouselindicators_props = { items2: /*items2*/ ctx[2] };

	if (/*activeIndex*/ ctx[0] !== void 0) {
		carouselindicators_props.activeIndex = /*activeIndex*/ ctx[0];
	}

	const carouselindicators = new CarouselIndicators({
			props: carouselindicators_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(carouselindicators, "activeIndex", carouselindicators_activeIndex_binding_1));
	let each_value = /*items2*/ ctx[2];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	function carouselcontrol0_activeIndex_binding_2(value_1) {
		/*carouselcontrol0_activeIndex_binding_2*/ ctx[18].call(null, value_1);
	}

	let carouselcontrol0_props = {
		direction: "prev",
		items: /*items*/ ctx[1]
	};

	if (/*activeIndex*/ ctx[0] !== void 0) {
		carouselcontrol0_props.activeIndex = /*activeIndex*/ ctx[0];
	}

	const carouselcontrol0 = new CarouselControl({
			props: carouselcontrol0_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(carouselcontrol0, "activeIndex", carouselcontrol0_activeIndex_binding_2));

	function carouselcontrol1_activeIndex_binding_2(value_2) {
		/*carouselcontrol1_activeIndex_binding_2*/ ctx[19].call(null, value_2);
	}

	let carouselcontrol1_props = {
		direction: "next",
		items: /*items*/ ctx[1]
	};

	if (/*activeIndex*/ ctx[0] !== void 0) {
		carouselcontrol1_props.activeIndex = /*activeIndex*/ ctx[0];
	}

	const carouselcontrol1 = new CarouselControl({
			props: carouselcontrol1_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(carouselcontrol1, "activeIndex", carouselcontrol1_activeIndex_binding_2));

	const block = {
		c: function create() {
			create_component(carouselindicators.$$.fragment);
			t0 = space();
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t1 = space();
			create_component(carouselcontrol0.$$.fragment);
			t2 = space();
			create_component(carouselcontrol1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			claim_component(carouselindicators.$$.fragment, nodes);
			t0 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			claim_component(carouselcontrol0.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(carouselcontrol1.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "carousel-inner");
			add_location(div, file, 119, 12, 10296);
		},
		m: function mount(target, anchor) {
			mount_component(carouselindicators, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			insert_dev(target, t1, anchor);
			mount_component(carouselcontrol0, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(carouselcontrol1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const carouselindicators_changes = {};

			if (!updating_activeIndex && dirty & /*activeIndex*/ 1) {
				updating_activeIndex = true;
				carouselindicators_changes.activeIndex = /*activeIndex*/ ctx[0];
				add_flush_callback(() => updating_activeIndex = false);
			}

			carouselindicators.$set(carouselindicators_changes);

			if (dirty & /*activeIndex, items2*/ 5) {
				each_value = /*items2*/ ctx[2];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			const carouselcontrol0_changes = {};

			if (!updating_activeIndex_1 && dirty & /*activeIndex*/ 1) {
				updating_activeIndex_1 = true;
				carouselcontrol0_changes.activeIndex = /*activeIndex*/ ctx[0];
				add_flush_callback(() => updating_activeIndex_1 = false);
			}

			carouselcontrol0.$set(carouselcontrol0_changes);
			const carouselcontrol1_changes = {};

			if (!updating_activeIndex_2 && dirty & /*activeIndex*/ 1) {
				updating_activeIndex_2 = true;
				carouselcontrol1_changes.activeIndex = /*activeIndex*/ ctx[0];
				add_flush_callback(() => updating_activeIndex_2 = false);
			}

			carouselcontrol1.$set(carouselcontrol1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(carouselindicators.$$.fragment, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(carouselcontrol0.$$.fragment, local);
			transition_in(carouselcontrol1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(carouselindicators.$$.fragment, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(carouselcontrol0.$$.fragment, local);
			transition_out(carouselcontrol1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(carouselindicators, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(carouselcontrol0, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(carouselcontrol1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(117:8) <Carousel {items2} bind:activeIndex ride={true} interval={2000}>",
		ctx
	});

	return block;
}

// (113:0) <Row>
function create_default_slot(ctx) {
	let div;
	let h1;
	let t0;
	let t1;
	let h2;
	let t2;
	let t3;
	let updating_activeIndex;
	let current;

	function carousel_activeIndex_binding_3(value) {
		/*carousel_activeIndex_binding_3*/ ctx[20].call(null, value);
	}

	let carousel_props = {
		items2: /*items2*/ ctx[2],
		ride: true,
		interval: 2000,
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	};

	if (/*activeIndex*/ ctx[0] !== void 0) {
		carousel_props.activeIndex = /*activeIndex*/ ctx[0];
	}

	const carousel = new Carousel({ props: carousel_props, $$inline: true });
	binding_callbacks.push(() => bind(carousel, "activeIndex", carousel_activeIndex_binding_3));

	const block = {
		c: function create() {
			div = element("div");
			h1 = element("h1");
			t0 = text("Пример слайдов с заголовками");
			t1 = space();
			h2 = element("h2");
			t2 = text("Пример слайдов");
			t3 = space();
			create_component(carousel.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h1 = claim_element(div_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Пример слайдов с заголовками");
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			h2 = claim_element(div_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t2 = claim_text(h2_nodes, "Пример слайдов");
			h2_nodes.forEach(detach_dev);
			t3 = claim_space(div_nodes);
			claim_component(carousel.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "mt-4");
			add_location(h1, file, 114, 8, 10044);
			attr_dev(h2, "class", "mt-4");
			add_location(h2, file, 115, 12, 10108);
			attr_dev(div, "class", "col-xl-8");
			add_location(div, file, 113, 4, 10012);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h1);
			append_dev(h1, t0);
			append_dev(div, t1);
			append_dev(div, h2);
			append_dev(h2, t2);
			append_dev(div, t3);
			mount_component(carousel, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const carousel_changes = {};

			if (dirty & /*$$scope, activeIndex*/ 134217729) {
				carousel_changes.$$scope = { dirty, ctx };
			}

			if (!updating_activeIndex && dirty & /*activeIndex*/ 1) {
				updating_activeIndex = true;
				carousel_changes.activeIndex = /*activeIndex*/ ctx[0];
				add_flush_callback(() => updating_activeIndex = false);
			}

			carousel.$set(carousel_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(carousel.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(carousel.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(carousel);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(113:0) <Row>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let title_value;
	let t0;
	let h1;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;
	let current;
	document.title = title_value = /*title*/ ctx[3];

	const breadcrumb = new Breadcrumb({
			props: {
				class: "mb-4",
				$$slots: { default: [create_default_slot_12] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row0 = new Row({
			props: {
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row1 = new Row({
			props: {
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row2 = new Row({
			props: {
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row3 = new Row({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("Карусель и Слайдер");
			t2 = space();
			create_component(breadcrumb.$$.fragment);
			t3 = space();
			create_component(row0.$$.fragment);
			t4 = space();
			create_component(row1.$$.fragment);
			t5 = space();
			create_component(row2.$$.fragment);
			t6 = space();
			create_component(row3.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-46oba3\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Карусель и Слайдер");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			claim_component(breadcrumb.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(row0.$$.fragment, nodes);
			t4 = claim_space(nodes);
			claim_component(row1.$$.fragment, nodes);
			t5 = claim_space(nodes);
			claim_component(row2.$$.fragment, nodes);
			t6 = claim_space(nodes);
			claim_component(row3.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "mt-4");
			add_location(h1, file, 56, 0, 7718);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			mount_component(breadcrumb, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(row0, target, anchor);
			insert_dev(target, t4, anchor);
			mount_component(row1, target, anchor);
			insert_dev(target, t5, anchor);
			mount_component(row2, target, anchor);
			insert_dev(target, t6, anchor);
			mount_component(row3, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*title*/ 8) && title_value !== (title_value = /*title*/ ctx[3])) {
				document.title = title_value;
			}

			const breadcrumb_changes = {};

			if (dirty & /*$$scope*/ 134217728) {
				breadcrumb_changes.$$scope = { dirty, ctx };
			}

			breadcrumb.$set(breadcrumb_changes);
			const row0_changes = {};

			if (dirty & /*$$scope, activeIndex*/ 134217729) {
				row0_changes.$$scope = { dirty, ctx };
			}

			row0.$set(row0_changes);
			const row1_changes = {};

			if (dirty & /*$$scope, activeIndex*/ 134217729) {
				row1_changes.$$scope = { dirty, ctx };
			}

			row1.$set(row1_changes);
			const row2_changes = {};

			if (dirty & /*$$scope, activeIndex*/ 134217729) {
				row2_changes.$$scope = { dirty, ctx };
			}

			row2.$set(row2_changes);
			const row3_changes = {};

			if (dirty & /*$$scope, activeIndex*/ 134217729) {
				row3_changes.$$scope = { dirty, ctx };
			}

			row3.$set(row3_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(breadcrumb.$$.fragment, local);
			transition_in(row0.$$.fragment, local);
			transition_in(row1.$$.fragment, local);
			transition_in(row2.$$.fragment, local);
			transition_in(row3.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(breadcrumb.$$.fragment, local);
			transition_out(row0.$$.fragment, local);
			transition_out(row1.$$.fragment, local);
			transition_out(row2.$$.fragment, local);
			transition_out(row3.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			destroy_component(breadcrumb, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(row0, detaching);
			if (detaching) detach_dev(t4);
			destroy_component(row1, detaching);
			if (detaching) detach_dev(t5);
			destroy_component(row2, detaching);
			if (detaching) detach_dev(t6);
			destroy_component(row3, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const items = [
		"data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22800%22%20height%3D%22400%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20800%20400%22%20preserveAspectRatio%3D%22none%22%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%23holder_15ba800aa1d%20text%20%7B%20fill%3A%23555%3Bfont-weight%3Anormal%3Bfont-family%3AHelvetica%2C%20monospace%3Bfont-size%3A40pt%20%7D%20%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_15ba800aa1d%22%3E%3Crect%20width%3D%22800%22%20height%3D%22400%22%20fill%3D%22%23777%22%3E%3C%2Frect%3E%3Cg%3E%3Ctext%20x%3D%22285.921875%22%20y%3D%22218.3%22%3EFirst%20slide%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E",
		"data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22800%22%20height%3D%22400%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20800%20400%22%20preserveAspectRatio%3D%22none%22%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%23holder_15ba800aa20%20text%20%7B%20fill%3A%23444%3Bfont-weight%3Anormal%3Bfont-family%3AHelvetica%2C%20monospace%3Bfont-size%3A40pt%20%7D%20%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_15ba800aa20%22%3E%3Crect%20width%3D%22800%22%20height%3D%22400%22%20fill%3D%22%23666%22%3E%3C%2Frect%3E%3Cg%3E%3Ctext%20x%3D%22247.3203125%22%20y%3D%22218.3%22%3ESecond%20slide%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E",
		"data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22800%22%20height%3D%22400%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20800%20400%22%20preserveAspectRatio%3D%22none%22%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%23holder_15ba800aa21%20text%20%7B%20fill%3A%23333%3Bfont-weight%3Anormal%3Bfont-family%3AHelvetica%2C%20monospace%3Bfont-size%3A40pt%20%7D%20%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_15ba800aa21%22%3E%3Crect%20width%3D%22800%22%20height%3D%22400%22%20fill%3D%22%23555%22%3E%3C%2Frect%3E%3Cg%3E%3Ctext%20x%3D%22277%22%20y%3D%22218.3%22%3EThird%20slide%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E"
	];

	// const itemsControl = [
	//     'data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22800%22%20height%3D%22400%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20800%20400%22%20preserveAspectRatio%3D%22none%22%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%23holder_15ba800aa1d%20text%20%7B%20fill%3A%23555%3Bfont-weight%3Anormal%3Bfont-family%3AHelvetica%2C%20monospace%3Bfont-size%3A40pt%20%7D%20%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_15ba800aa1d%22%3E%3Crect%20width%3D%22800%22%20height%3D%22400%22%20fill%3D%22%23777%22%3E%3C%2Frect%3E%3Cg%3E%3Ctext%20x%3D%22285.921875%22%20y%3D%22218.3%22%3EFirst%20slide%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E',
	//     'data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22800%22%20height%3D%22400%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20800%20400%22%20preserveAspectRatio%3D%22none%22%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%23holder_15ba800aa20%20text%20%7B%20fill%3A%23444%3Bfont-weight%3Anormal%3Bfont-family%3AHelvetica%2C%20monospace%3Bfont-size%3A40pt%20%7D%20%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_15ba800aa20%22%3E%3Crect%20width%3D%22800%22%20height%3D%22400%22%20fill%3D%22%23666%22%3E%3C%2Frect%3E%3Cg%3E%3Ctext%20x%3D%22247.3203125%22%20y%3D%22218.3%22%3ESecond%20slide%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E',
	//     'data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22800%22%20height%3D%22400%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20800%20400%22%20preserveAspectRatio%3D%22none%22%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%23holder_15ba800aa21%20text%20%7B%20fill%3A%23333%3Bfont-weight%3Anormal%3Bfont-family%3AHelvetica%2C%20monospace%3Bfont-size%3A40pt%20%7D%20%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_15ba800aa21%22%3E%3Crect%20width%3D%22800%22%20height%3D%22400%22%20fill%3D%22%23555%22%3E%3C%2Frect%3E%3Cg%3E%3Ctext%20x%3D%22277%22%20y%3D%22218.3%22%3EThird%20slide%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E'
	// ];
	// const itemsIndicators = [
	//     'data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22800%22%20height%3D%22400%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20800%20400%22%20preserveAspectRatio%3D%22none%22%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%23holder_15ba800aa1d%20text%20%7B%20fill%3A%23555%3Bfont-weight%3Anormal%3Bfont-family%3AHelvetica%2C%20monospace%3Bfont-size%3A40pt%20%7D%20%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_15ba800aa1d%22%3E%3Crect%20width%3D%22800%22%20height%3D%22400%22%20fill%3D%22%23777%22%3E%3C%2Frect%3E%3Cg%3E%3Ctext%20x%3D%22285.921875%22%20y%3D%22218.3%22%3EFirst%20slide%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E',
	//     'data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22800%22%20height%3D%22400%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20800%20400%22%20preserveAspectRatio%3D%22none%22%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%23holder_15ba800aa20%20text%20%7B%20fill%3A%23444%3Bfont-weight%3Anormal%3Bfont-family%3AHelvetica%2C%20monospace%3Bfont-size%3A40pt%20%7D%20%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_15ba800aa20%22%3E%3Crect%20width%3D%22800%22%20height%3D%22400%22%20fill%3D%22%23666%22%3E%3C%2Frect%3E%3Cg%3E%3Ctext%20x%3D%22247.3203125%22%20y%3D%22218.3%22%3ESecond%20slide%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E',
	//     'data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22800%22%20height%3D%22400%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20800%20400%22%20preserveAspectRatio%3D%22none%22%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%23holder_15ba800aa21%20text%20%7B%20fill%3A%23333%3Bfont-weight%3Anormal%3Bfont-family%3AHelvetica%2C%20monospace%3Bfont-size%3A40pt%20%7D%20%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_15ba800aa21%22%3E%3Crect%20width%3D%22800%22%20height%3D%22400%22%20fill%3D%22%23555%22%3E%3C%2Frect%3E%3Cg%3E%3Ctext%20x%3D%22277%22%20y%3D%22218.3%22%3EThird%20slide%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E'
	// ];
	const items2 = [
		{
			url: "https://cs8.pikabu.ru/post_img/2018/02/18/5/1518939142130163736.jpg",
			title: "Slide 1",
			subTitle: "Slide 1"
		},
		{
			url: "https://i.pinimg.com/originals/a8/a5/e4/a8a5e476b954ea8a3a5555abad0d726e.jpg",
			title: "Slide 2",
			subTitle: "Slide 2"
		},
		{
			url: "https://www.shutterstock.com/blog/wp-content/uploads/sites/5/2013/12/blog_bloomua_155528621.jpg",
			title: "Slide 3",
			subTitle: "Slide 3"
		}
	];

	let activeIndex = 0;

	// let activeIndexControl = 0;
	// let activeIndexIndicators = 0;
	let activeIndexCaption = 0;

	let title = "Карусель и Слайдер | UI | Пользовательский Интерфейс";

	function carouselitem_activeIndex_binding(value) {
		activeIndex = value;
		$$invalidate(0, activeIndex);
	}

	function carousel_activeIndex_binding(value) {
		activeIndex = value;
		$$invalidate(0, activeIndex);
	}

	function carouselitem_activeIndex_binding_1(value) {
		activeIndex = value;
		$$invalidate(0, activeIndex);
	}

	function carouselcontrol0_activeIndex_binding(value) {
		activeIndex = value;
		$$invalidate(0, activeIndex);
	}

	function carouselcontrol1_activeIndex_binding(value_1) {
		activeIndex = value_1;
		$$invalidate(0, activeIndex);
	}

	function carousel_activeIndex_binding_1(value) {
		activeIndex = value;
		$$invalidate(0, activeIndex);
	}

	function carouselindicators_activeIndex_binding(value) {
		activeIndex = value;
		$$invalidate(0, activeIndex);
	}

	function carouselitem_activeIndex_binding_2(value) {
		activeIndex = value;
		$$invalidate(0, activeIndex);
	}

	function carouselcontrol0_activeIndex_binding_1(value_1) {
		activeIndex = value_1;
		$$invalidate(0, activeIndex);
	}

	function carouselcontrol1_activeIndex_binding_1(value_2) {
		activeIndex = value_2;
		$$invalidate(0, activeIndex);
	}

	function carousel_activeIndex_binding_2(value) {
		activeIndex = value;
		$$invalidate(0, activeIndex);
	}

	function carouselindicators_activeIndex_binding_1(value) {
		activeIndex = value;
		$$invalidate(0, activeIndex);
	}

	function carouselitem_activeIndex_binding_3(value) {
		activeIndex = value;
		$$invalidate(0, activeIndex);
	}

	function carouselcontrol0_activeIndex_binding_2(value_1) {
		activeIndex = value_1;
		$$invalidate(0, activeIndex);
	}

	function carouselcontrol1_activeIndex_binding_2(value_2) {
		activeIndex = value_2;
		$$invalidate(0, activeIndex);
	}

	function carousel_activeIndex_binding_3(value) {
		activeIndex = value;
		$$invalidate(0, activeIndex);
	}

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("activeIndex" in $$props) $$invalidate(0, activeIndex = $$props.activeIndex);
		if ("activeIndexCaption" in $$props) activeIndexCaption = $$props.activeIndexCaption;
		if ("title" in $$props) $$invalidate(3, title = $$props.title);
	};

	return [
		activeIndex,
		items,
		items2,
		title,
		activeIndexCaption,
		carouselitem_activeIndex_binding,
		carousel_activeIndex_binding,
		carouselitem_activeIndex_binding_1,
		carouselcontrol0_activeIndex_binding,
		carouselcontrol1_activeIndex_binding,
		carousel_activeIndex_binding_1,
		carouselindicators_activeIndex_binding,
		carouselitem_activeIndex_binding_2,
		carouselcontrol0_activeIndex_binding_1,
		carouselcontrol1_activeIndex_binding_1,
		carousel_activeIndex_binding_2,
		carouselindicators_activeIndex_binding_1,
		carouselitem_activeIndex_binding_3,
		carouselcontrol0_activeIndex_binding_2,
		carouselcontrol1_activeIndex_binding_2,
		carousel_activeIndex_binding_3
	];
}

class Carousel_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Carousel_1",
			options,
			id: create_fragment.name
		});
	}
}

export default Carousel_1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
