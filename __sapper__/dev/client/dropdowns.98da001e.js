import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, af as Dropdown, ag as UncontrolledDropdown, ah as Navbar, J as space, f as element, y as text, F as create_component, L as query_selector_all, j as detach_dev, K as claim_space, g as claim_element, h as children, z as claim_text, G as claim_component, k as attr_dev, l as add_location, n as insert_dev, o as append_dev, H as mount_component, r as transition_in, t as transition_out, I as destroy_component, ai as DropdownToggle, aj as DropdownMenu, ak as Nav, al as DropdownItem, am as NavItem, an as NavLink } from './client.a91fb9c0.js';
import { B as Breadcrumb, a as BreadcrumbItem } from './BreadcrumbItem.0ab13bc0.js';
import { R as Row } from './Row.3900bacf.js';

/* src\routes\ui\dropdowns.svelte generated by Svelte v3.18.1 */
const file = "src\\routes\\ui\\dropdowns.svelte";

// (43:4) <BreadcrumbItem active>
function create_default_slot_64(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Ниспадающее контекстное меню");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Ниспадающее контекстное меню");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_64.name,
		type: "slot",
		source: "(43:4) <BreadcrumbItem active>",
		ctx
	});

	return block;
}

// (42:0) <Breadcrumb class="mb-4">
function create_default_slot_63(ctx) {
	let current;

	const breadcrumbitem = new BreadcrumbItem({
			props: {
				active: true,
				$$slots: { default: [create_default_slot_64] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(breadcrumbitem.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(breadcrumbitem.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(breadcrumbitem, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const breadcrumbitem_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				breadcrumbitem_changes.$$scope = { dirty, ctx };
			}

			breadcrumbitem.$set(breadcrumbitem_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(breadcrumbitem.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(breadcrumbitem.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(breadcrumbitem, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_63.name,
		type: "slot",
		source: "(42:0) <Breadcrumb class=\\\"mb-4\\\">",
		ctx
	});

	return block;
}

// (68:12) <DropdownToggle caret>
function create_default_slot_62(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Dropdown");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Dropdown");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_62.name,
		type: "slot",
		source: "(68:12) <DropdownToggle caret>",
		ctx
	});

	return block;
}

// (70:16) <DropdownItem header>
function create_default_slot_61(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Хедер");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Хедер");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_61.name,
		type: "slot",
		source: "(70:16) <DropdownItem header>",
		ctx
	});

	return block;
}

// (71:16) <DropdownItem>
function create_default_slot_60(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Какие-то действия");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Какие-то действия");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_60.name,
		type: "slot",
		source: "(71:16) <DropdownItem>",
		ctx
	});

	return block;
}

// (72:16) <DropdownItem disabled>
function create_default_slot_59(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Действия (не активно)");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Действия (не активно)");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_59.name,
		type: "slot",
		source: "(72:16) <DropdownItem disabled>",
		ctx
	});

	return block;
}

// (74:16) <DropdownItem>
function create_default_slot_58(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Foo Действия");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Foo Действия");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_58.name,
		type: "slot",
		source: "(74:16) <DropdownItem>",
		ctx
	});

	return block;
}

// (75:16) <DropdownItem>
function create_default_slot_57(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Bar Действия");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Bar Действия");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_57.name,
		type: "slot",
		source: "(75:16) <DropdownItem>",
		ctx
	});

	return block;
}

// (76:16) <DropdownItem>
function create_default_slot_56(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Baz Действия");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Baz Действия");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_56.name,
		type: "slot",
		source: "(76:16) <DropdownItem>",
		ctx
	});

	return block;
}

// (69:12) <DropdownMenu>
function create_default_slot_55(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let current;

	const dropdownitem0 = new DropdownItem({
			props: {
				header: true,
				$$slots: { default: [create_default_slot_61] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownitem1 = new DropdownItem({
			props: {
				$$slots: { default: [create_default_slot_60] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownitem2 = new DropdownItem({
			props: {
				disabled: true,
				$$slots: { default: [create_default_slot_59] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownitem3 = new DropdownItem({ props: { divider: true }, $$inline: true });

	const dropdownitem4 = new DropdownItem({
			props: {
				$$slots: { default: [create_default_slot_58] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownitem5 = new DropdownItem({
			props: {
				$$slots: { default: [create_default_slot_57] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownitem6 = new DropdownItem({
			props: {
				$$slots: { default: [create_default_slot_56] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dropdownitem0.$$.fragment);
			t0 = space();
			create_component(dropdownitem1.$$.fragment);
			t1 = space();
			create_component(dropdownitem2.$$.fragment);
			t2 = space();
			create_component(dropdownitem3.$$.fragment);
			t3 = space();
			create_component(dropdownitem4.$$.fragment);
			t4 = space();
			create_component(dropdownitem5.$$.fragment);
			t5 = space();
			create_component(dropdownitem6.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(dropdownitem0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(dropdownitem1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(dropdownitem2.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(dropdownitem3.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(dropdownitem4.$$.fragment, nodes);
			t4 = claim_space(nodes);
			claim_component(dropdownitem5.$$.fragment, nodes);
			t5 = claim_space(nodes);
			claim_component(dropdownitem6.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(dropdownitem0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(dropdownitem1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(dropdownitem2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(dropdownitem3, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(dropdownitem4, target, anchor);
			insert_dev(target, t4, anchor);
			mount_component(dropdownitem5, target, anchor);
			insert_dev(target, t5, anchor);
			mount_component(dropdownitem6, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdownitem0_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownitem0_changes.$$scope = { dirty, ctx };
			}

			dropdownitem0.$set(dropdownitem0_changes);
			const dropdownitem1_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownitem1_changes.$$scope = { dirty, ctx };
			}

			dropdownitem1.$set(dropdownitem1_changes);
			const dropdownitem2_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownitem2_changes.$$scope = { dirty, ctx };
			}

			dropdownitem2.$set(dropdownitem2_changes);
			const dropdownitem4_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownitem4_changes.$$scope = { dirty, ctx };
			}

			dropdownitem4.$set(dropdownitem4_changes);
			const dropdownitem5_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownitem5_changes.$$scope = { dirty, ctx };
			}

			dropdownitem5.$set(dropdownitem5_changes);
			const dropdownitem6_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownitem6_changes.$$scope = { dirty, ctx };
			}

			dropdownitem6.$set(dropdownitem6_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdownitem0.$$.fragment, local);
			transition_in(dropdownitem1.$$.fragment, local);
			transition_in(dropdownitem2.$$.fragment, local);
			transition_in(dropdownitem3.$$.fragment, local);
			transition_in(dropdownitem4.$$.fragment, local);
			transition_in(dropdownitem5.$$.fragment, local);
			transition_in(dropdownitem6.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdownitem0.$$.fragment, local);
			transition_out(dropdownitem1.$$.fragment, local);
			transition_out(dropdownitem2.$$.fragment, local);
			transition_out(dropdownitem3.$$.fragment, local);
			transition_out(dropdownitem4.$$.fragment, local);
			transition_out(dropdownitem5.$$.fragment, local);
			transition_out(dropdownitem6.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdownitem0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(dropdownitem1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(dropdownitem2, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(dropdownitem3, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(dropdownitem4, detaching);
			if (detaching) detach_dev(t4);
			destroy_component(dropdownitem5, detaching);
			if (detaching) detach_dev(t5);
			destroy_component(dropdownitem6, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_55.name,
		type: "slot",
		source: "(69:12) <DropdownMenu>",
		ctx
	});

	return block;
}

// (67:8) <Dropdown   {isOpen} toggle={() => (isOpen = !isOpen)}>
function create_default_slot_54(ctx) {
	let t;
	let current;

	const dropdowntoggle = new DropdownToggle({
			props: {
				caret: true,
				$$slots: { default: [create_default_slot_62] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownmenu = new DropdownMenu({
			props: {
				$$slots: { default: [create_default_slot_55] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dropdowntoggle.$$.fragment);
			t = space();
			create_component(dropdownmenu.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(dropdowntoggle.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(dropdownmenu.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(dropdowntoggle, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(dropdownmenu, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdowntoggle_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdowntoggle_changes.$$scope = { dirty, ctx };
			}

			dropdowntoggle.$set(dropdowntoggle_changes);
			const dropdownmenu_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownmenu_changes.$$scope = { dirty, ctx };
			}

			dropdownmenu.$set(dropdownmenu_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdowntoggle.$$.fragment, local);
			transition_in(dropdownmenu.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdowntoggle.$$.fragment, local);
			transition_out(dropdownmenu.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdowntoggle, detaching);
			if (detaching) detach_dev(t);
			destroy_component(dropdownmenu, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_54.name,
		type: "slot",
		source: "(67:8) <Dropdown   {isOpen} toggle={() => (isOpen = !isOpen)}>",
		ctx
	});

	return block;
}

// (51:0) <Row>
function create_default_slot_53(ctx) {
	let div0;
	let h3;
	let t0;
	let t1;
	let p0;
	let t2;
	let t3;
	let h4;
	let t4;
	let t5;
	let p1;
	let t6;
	let t7;
	let div1;
	let current;

	const dropdown = new Dropdown({
			props: {
				isOpen: /*isOpen*/ ctx[0],
				toggle: /*func*/ ctx[7],
				$$slots: { default: [create_default_slot_54] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div0 = element("div");
			h3 = element("h3");
			t0 = text("Пример");
			t1 = space();
			p0 = element("p");
			t2 = text("Переключайте контекстные накладки для отображения списков ссылок\r\n            и многое другое с помощью выпадающего плагина Sveltestrap.");
			t3 = space();
			h4 = element("h4");
			t4 = text("Обзор");
			t5 = space();
			p1 = element("p");
			t6 = text("Dropdowns - это переключаемые контекстные вкладки\r\n            для отображения списков ссылок и многого другого.\r\n            Они сделаны интерактивными с помощью входящего в комплект\r\n            Sveltestrap выпадающего плагина JavaScript.\r\n            Они переключаются щелчком мыши, а не навешиванием;\r\n            это преднамеренное дизайнерское решение.");
			t7 = space();
			div1 = element("div");
			create_component(dropdown.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h3 = claim_element(div0_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, "Пример");
			h3_nodes.forEach(detach_dev);
			t1 = claim_space(div0_nodes);
			p0 = claim_element(div0_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t2 = claim_text(p0_nodes, "Переключайте контекстные накладки для отображения списков ссылок\r\n            и многое другое с помощью выпадающего плагина Sveltestrap.");
			p0_nodes.forEach(detach_dev);
			t3 = claim_space(div0_nodes);
			h4 = claim_element(div0_nodes, "H4", { class: true });
			var h4_nodes = children(h4);
			t4 = claim_text(h4_nodes, "Обзор");
			h4_nodes.forEach(detach_dev);
			t5 = claim_space(div0_nodes);
			p1 = claim_element(div0_nodes, "P", {});
			var p1_nodes = children(p1);
			t6 = claim_text(p1_nodes, "Dropdowns - это переключаемые контекстные вкладки\r\n            для отображения списков ссылок и многого другого.\r\n            Они сделаны интерактивными с помощью входящего в комплект\r\n            Sveltestrap выпадающего плагина JavaScript.\r\n            Они переключаются щелчком мыши, а не навешиванием;\r\n            это преднамеренное дизайнерское решение.");
			p1_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t7 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			claim_component(dropdown.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h3, "class", "mt-4");
			add_location(h3, file, 52, 10, 1632);
			attr_dev(p0, "class", "lead");
			add_location(p0, file, 53, 8, 1670);
			attr_dev(h4, "class", "mt-4");
			add_location(h4, file, 57, 8, 1860);
			add_location(p1, file, 58, 8, 1897);
			attr_dev(div0, "class", "col-xl-6");
			add_location(div0, file, 51, 4, 1598);
			attr_dev(div1, "class", "col-xl-6");
			add_location(div1, file, 65, 4, 2280);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			append_dev(div0, h3);
			append_dev(h3, t0);
			append_dev(div0, t1);
			append_dev(div0, p0);
			append_dev(p0, t2);
			append_dev(div0, t3);
			append_dev(div0, h4);
			append_dev(h4, t4);
			append_dev(div0, t5);
			append_dev(div0, p1);
			append_dev(p1, t6);
			insert_dev(target, t7, anchor);
			insert_dev(target, div1, anchor);
			mount_component(dropdown, div1, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdown_changes = {};
			if (dirty & /*isOpen*/ 1) dropdown_changes.isOpen = /*isOpen*/ ctx[0];
			if (dirty & /*isOpen*/ 1) dropdown_changes.toggle = /*func*/ ctx[7];

			if (dirty & /*$$scope*/ 32768) {
				dropdown_changes.$$scope = { dirty, ctx };
			}

			dropdown.$set(dropdown_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdown.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdown.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(div1);
			destroy_component(dropdown);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_53.name,
		type: "slot",
		source: "(51:0) <Row>",
		ctx
	});

	return block;
}

// (87:12) <DropdownToggle caret>
function create_default_slot_52(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Ниспадающее меню выравненное по правому краю");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Ниспадающее меню выравненное по правому краю");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_52.name,
		type: "slot",
		source: "(87:12) <DropdownToggle caret>",
		ctx
	});

	return block;
}

// (91:16) <DropdownItem header>
function create_default_slot_51(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Заголовок");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Заголовок");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_51.name,
		type: "slot",
		source: "(91:16) <DropdownItem header>",
		ctx
	});

	return block;
}

// (92:16) <DropdownItem disabled>
function create_default_slot_50(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Действие");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Действие");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_50.name,
		type: "slot",
		source: "(92:16) <DropdownItem disabled>",
		ctx
	});

	return block;
}

// (93:16) <DropdownItem>
function create_default_slot_49(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Другое действие");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Другое действие");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_49.name,
		type: "slot",
		source: "(93:16) <DropdownItem>",
		ctx
	});

	return block;
}

// (90:12) <DropdownMenu right>
function create_default_slot_48(ctx) {
	let t0;
	let t1;
	let current;

	const dropdownitem0 = new DropdownItem({
			props: {
				header: true,
				$$slots: { default: [create_default_slot_51] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownitem1 = new DropdownItem({
			props: {
				disabled: true,
				$$slots: { default: [create_default_slot_50] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownitem2 = new DropdownItem({
			props: {
				$$slots: { default: [create_default_slot_49] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dropdownitem0.$$.fragment);
			t0 = space();
			create_component(dropdownitem1.$$.fragment);
			t1 = space();
			create_component(dropdownitem2.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(dropdownitem0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(dropdownitem1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(dropdownitem2.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(dropdownitem0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(dropdownitem1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(dropdownitem2, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdownitem0_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownitem0_changes.$$scope = { dirty, ctx };
			}

			dropdownitem0.$set(dropdownitem0_changes);
			const dropdownitem1_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownitem1_changes.$$scope = { dirty, ctx };
			}

			dropdownitem1.$set(dropdownitem1_changes);
			const dropdownitem2_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownitem2_changes.$$scope = { dirty, ctx };
			}

			dropdownitem2.$set(dropdownitem2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdownitem0.$$.fragment, local);
			transition_in(dropdownitem1.$$.fragment, local);
			transition_in(dropdownitem2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdownitem0.$$.fragment, local);
			transition_out(dropdownitem1.$$.fragment, local);
			transition_out(dropdownitem2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdownitem0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(dropdownitem1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(dropdownitem2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_48.name,
		type: "slot",
		source: "(90:12) <DropdownMenu right>",
		ctx
	});

	return block;
}

// (86:8) <Dropdown isOpen={isOpen} toggle="{() => isOpen = !isOpen}">
function create_default_slot_47(ctx) {
	let t;
	let current;

	const dropdowntoggle = new DropdownToggle({
			props: {
				caret: true,
				$$slots: { default: [create_default_slot_52] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownmenu = new DropdownMenu({
			props: {
				right: true,
				$$slots: { default: [create_default_slot_48] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dropdowntoggle.$$.fragment);
			t = space();
			create_component(dropdownmenu.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(dropdowntoggle.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(dropdownmenu.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(dropdowntoggle, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(dropdownmenu, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdowntoggle_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdowntoggle_changes.$$scope = { dirty, ctx };
			}

			dropdowntoggle.$set(dropdowntoggle_changes);
			const dropdownmenu_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownmenu_changes.$$scope = { dirty, ctx };
			}

			dropdownmenu.$set(dropdownmenu_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdowntoggle.$$.fragment, local);
			transition_in(dropdownmenu.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdowntoggle.$$.fragment, local);
			transition_out(dropdownmenu.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdowntoggle, detaching);
			if (detaching) detach_dev(t);
			destroy_component(dropdownmenu, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_47.name,
		type: "slot",
		source: "(86:8) <Dropdown isOpen={isOpen} toggle=\\\"{() => isOpen = !isOpen}\\\">",
		ctx
	});

	return block;
}

// (82:0) <Row>
function create_default_slot_46(ctx) {
	let div;
	let h2;
	let t0;
	let t1;
	let h3;
	let t2;
	let t3;
	let current;

	const dropdown = new Dropdown({
			props: {
				isOpen: /*isOpen*/ ctx[0],
				toggle: /*func_1*/ ctx[8],
				$$slots: { default: [create_default_slot_47] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			h2 = element("h2");
			t0 = text("Выравнивание");
			t1 = space();
			h3 = element("h3");
			t2 = text("Пример");
			t3 = space();
			create_component(dropdown.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h2 = claim_element(div_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "Выравнивание");
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			h3 = claim_element(div_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t2 = claim_text(h3_nodes, "Пример");
			h3_nodes.forEach(detach_dev);
			t3 = claim_space(div_nodes);
			claim_component(dropdown.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "mt-4");
			add_location(h2, file, 83, 8, 2992);
			attr_dev(h3, "class", "mt-4");
			add_location(h3, file, 84, 8, 3036);
			attr_dev(div, "class", "col-xl-6");
			add_location(div, file, 82, 4, 2960);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h2);
			append_dev(h2, t0);
			append_dev(div, t1);
			append_dev(div, h3);
			append_dev(h3, t2);
			append_dev(div, t3);
			mount_component(dropdown, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdown_changes = {};
			if (dirty & /*isOpen*/ 1) dropdown_changes.isOpen = /*isOpen*/ ctx[0];
			if (dirty & /*isOpen*/ 1) dropdown_changes.toggle = /*func_1*/ ctx[8];

			if (dirty & /*$$scope*/ 32768) {
				dropdown_changes.$$scope = { dirty, ctx };
			}

			dropdown.$set(dropdown_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdown.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdown.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(dropdown);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_46.name,
		type: "slot",
		source: "(82:0) <Row>",
		ctx
	});

	return block;
}

// (108:12) <DropdownToggle caret>
function create_default_slot_45(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Dropup");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Dropup");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_45.name,
		type: "slot",
		source: "(108:12) <DropdownToggle caret>",
		ctx
	});

	return block;
}

// (110:16) <DropdownItem>
function create_default_slot_44(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Another Action");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Another Action");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_44.name,
		type: "slot",
		source: "(110:16) <DropdownItem>",
		ctx
	});

	return block;
}

// (111:16) <DropdownItem>
function create_default_slot_43(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Another Action");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Another Action");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_43.name,
		type: "slot",
		source: "(111:16) <DropdownItem>",
		ctx
	});

	return block;
}

// (109:12) <DropdownMenu>
function create_default_slot_42(ctx) {
	let t;
	let current;

	const dropdownitem0 = new DropdownItem({
			props: {
				$$slots: { default: [create_default_slot_44] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownitem1 = new DropdownItem({
			props: {
				$$slots: { default: [create_default_slot_43] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dropdownitem0.$$.fragment);
			t = space();
			create_component(dropdownitem1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(dropdownitem0.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(dropdownitem1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(dropdownitem0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(dropdownitem1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdownitem0_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownitem0_changes.$$scope = { dirty, ctx };
			}

			dropdownitem0.$set(dropdownitem0_changes);
			const dropdownitem1_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownitem1_changes.$$scope = { dirty, ctx };
			}

			dropdownitem1.$set(dropdownitem1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdownitem0.$$.fragment, local);
			transition_in(dropdownitem1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdownitem0.$$.fragment, local);
			transition_out(dropdownitem1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdownitem0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(dropdownitem1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_42.name,
		type: "slot",
		source: "(109:12) <DropdownMenu>",
		ctx
	});

	return block;
}

// (103:8) <Dropdown                  direction="up"                  {isOpen}                  toggle={() => (isOpen = !isOpen)}          >
function create_default_slot_41(ctx) {
	let t;
	let current;

	const dropdowntoggle = new DropdownToggle({
			props: {
				caret: true,
				$$slots: { default: [create_default_slot_45] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownmenu = new DropdownMenu({
			props: {
				$$slots: { default: [create_default_slot_42] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dropdowntoggle.$$.fragment);
			t = space();
			create_component(dropdownmenu.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(dropdowntoggle.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(dropdownmenu.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(dropdowntoggle, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(dropdownmenu, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdowntoggle_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdowntoggle_changes.$$scope = { dirty, ctx };
			}

			dropdowntoggle.$set(dropdowntoggle_changes);
			const dropdownmenu_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownmenu_changes.$$scope = { dirty, ctx };
			}

			dropdownmenu.$set(dropdownmenu_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdowntoggle.$$.fragment, local);
			transition_in(dropdownmenu.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdowntoggle.$$.fragment, local);
			transition_out(dropdownmenu.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdowntoggle, detaching);
			if (detaching) detach_dev(t);
			destroy_component(dropdownmenu, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_41.name,
		type: "slot",
		source: "(103:8) <Dropdown                  direction=\\\"up\\\"                  {isOpen}                  toggle={() => (isOpen = !isOpen)}          >",
		ctx
	});

	return block;
}

// (120:12) <DropdownToggle caret>
function create_default_slot_40(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Dropleft");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Dropleft");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_40.name,
		type: "slot",
		source: "(120:12) <DropdownToggle caret>",
		ctx
	});

	return block;
}

// (122:16) <DropdownItem>
function create_default_slot_39(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Another Action");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Another Action");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_39.name,
		type: "slot",
		source: "(122:16) <DropdownItem>",
		ctx
	});

	return block;
}

// (123:16) <DropdownItem>
function create_default_slot_38(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Another Action");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Another Action");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_38.name,
		type: "slot",
		source: "(123:16) <DropdownItem>",
		ctx
	});

	return block;
}

// (121:12) <DropdownMenu>
function create_default_slot_37(ctx) {
	let t;
	let current;

	const dropdownitem0 = new DropdownItem({
			props: {
				$$slots: { default: [create_default_slot_39] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownitem1 = new DropdownItem({
			props: {
				$$slots: { default: [create_default_slot_38] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dropdownitem0.$$.fragment);
			t = space();
			create_component(dropdownitem1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(dropdownitem0.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(dropdownitem1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(dropdownitem0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(dropdownitem1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdownitem0_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownitem0_changes.$$scope = { dirty, ctx };
			}

			dropdownitem0.$set(dropdownitem0_changes);
			const dropdownitem1_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownitem1_changes.$$scope = { dirty, ctx };
			}

			dropdownitem1.$set(dropdownitem1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdownitem0.$$.fragment, local);
			transition_in(dropdownitem1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdownitem0.$$.fragment, local);
			transition_out(dropdownitem1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdownitem0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(dropdownitem1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_37.name,
		type: "slot",
		source: "(121:12) <DropdownMenu>",
		ctx
	});

	return block;
}

// (115:8) <Dropdown                  direction="left"                  isOpen={leftIsOpen}                  toggle={() => (leftIsOpen = !leftIsOpen)}          >
function create_default_slot_36(ctx) {
	let t;
	let current;

	const dropdowntoggle = new DropdownToggle({
			props: {
				caret: true,
				$$slots: { default: [create_default_slot_40] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownmenu = new DropdownMenu({
			props: {
				$$slots: { default: [create_default_slot_37] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dropdowntoggle.$$.fragment);
			t = space();
			create_component(dropdownmenu.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(dropdowntoggle.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(dropdownmenu.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(dropdowntoggle, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(dropdownmenu, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdowntoggle_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdowntoggle_changes.$$scope = { dirty, ctx };
			}

			dropdowntoggle.$set(dropdowntoggle_changes);
			const dropdownmenu_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownmenu_changes.$$scope = { dirty, ctx };
			}

			dropdownmenu.$set(dropdownmenu_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdowntoggle.$$.fragment, local);
			transition_in(dropdownmenu.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdowntoggle.$$.fragment, local);
			transition_out(dropdownmenu.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdowntoggle, detaching);
			if (detaching) detach_dev(t);
			destroy_component(dropdownmenu, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_36.name,
		type: "slot",
		source: "(115:8) <Dropdown                  direction=\\\"left\\\"                  isOpen={leftIsOpen}                  toggle={() => (leftIsOpen = !leftIsOpen)}          >",
		ctx
	});

	return block;
}

// (132:12) <DropdownToggle caret>
function create_default_slot_35(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Dropright");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Dropright");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_35.name,
		type: "slot",
		source: "(132:12) <DropdownToggle caret>",
		ctx
	});

	return block;
}

// (134:16) <DropdownItem>
function create_default_slot_34(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Another Action");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Another Action");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_34.name,
		type: "slot",
		source: "(134:16) <DropdownItem>",
		ctx
	});

	return block;
}

// (135:16) <DropdownItem>
function create_default_slot_33(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Another Action");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Another Action");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_33.name,
		type: "slot",
		source: "(135:16) <DropdownItem>",
		ctx
	});

	return block;
}

// (133:12) <DropdownMenu>
function create_default_slot_32(ctx) {
	let t;
	let current;

	const dropdownitem0 = new DropdownItem({
			props: {
				$$slots: { default: [create_default_slot_34] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownitem1 = new DropdownItem({
			props: {
				$$slots: { default: [create_default_slot_33] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dropdownitem0.$$.fragment);
			t = space();
			create_component(dropdownitem1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(dropdownitem0.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(dropdownitem1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(dropdownitem0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(dropdownitem1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdownitem0_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownitem0_changes.$$scope = { dirty, ctx };
			}

			dropdownitem0.$set(dropdownitem0_changes);
			const dropdownitem1_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownitem1_changes.$$scope = { dirty, ctx };
			}

			dropdownitem1.$set(dropdownitem1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdownitem0.$$.fragment, local);
			transition_in(dropdownitem1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdownitem0.$$.fragment, local);
			transition_out(dropdownitem1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdownitem0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(dropdownitem1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_32.name,
		type: "slot",
		source: "(133:12) <DropdownMenu>",
		ctx
	});

	return block;
}

// (127:8) <Dropdown                  direction="right"                  isOpen={rightIsOpen}                  toggle={() => (rightIsOpen = !rightIsOpen)}          >
function create_default_slot_31(ctx) {
	let t;
	let current;

	const dropdowntoggle = new DropdownToggle({
			props: {
				caret: true,
				$$slots: { default: [create_default_slot_35] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownmenu = new DropdownMenu({
			props: {
				$$slots: { default: [create_default_slot_32] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dropdowntoggle.$$.fragment);
			t = space();
			create_component(dropdownmenu.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(dropdowntoggle.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(dropdownmenu.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(dropdowntoggle, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(dropdownmenu, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdowntoggle_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdowntoggle_changes.$$scope = { dirty, ctx };
			}

			dropdowntoggle.$set(dropdowntoggle_changes);
			const dropdownmenu_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownmenu_changes.$$scope = { dirty, ctx };
			}

			dropdownmenu.$set(dropdownmenu_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdowntoggle.$$.fragment, local);
			transition_in(dropdownmenu.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdowntoggle.$$.fragment, local);
			transition_out(dropdownmenu.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdowntoggle, detaching);
			if (detaching) detach_dev(t);
			destroy_component(dropdownmenu, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_31.name,
		type: "slot",
		source: "(127:8) <Dropdown                  direction=\\\"right\\\"                  isOpen={rightIsOpen}                  toggle={() => (rightIsOpen = !rightIsOpen)}          >",
		ctx
	});

	return block;
}

// (101:0) <Row>
function create_default_slot_30(ctx) {
	let div;
	let t0;
	let t1;
	let current;

	const dropdown0 = new Dropdown({
			props: {
				direction: "up",
				isOpen: /*isOpen*/ ctx[0],
				toggle: /*func_2*/ ctx[9],
				$$slots: { default: [create_default_slot_41] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdown1 = new Dropdown({
			props: {
				direction: "left",
				isOpen: /*leftIsOpen*/ ctx[1],
				toggle: /*func_3*/ ctx[10],
				$$slots: { default: [create_default_slot_36] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdown2 = new Dropdown({
			props: {
				direction: "right",
				isOpen: /*rightIsOpen*/ ctx[2],
				toggle: /*func_4*/ ctx[11],
				$$slots: { default: [create_default_slot_31] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(dropdown0.$$.fragment);
			t0 = space();
			create_component(dropdown1.$$.fragment);
			t1 = space();
			create_component(dropdown2.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(dropdown0.$$.fragment, div_nodes);
			t0 = claim_space(div_nodes);
			claim_component(dropdown1.$$.fragment, div_nodes);
			t1 = claim_space(div_nodes);
			claim_component(dropdown2.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "col-xl-12");
			add_location(div, file, 101, 4, 3575);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(dropdown0, div, null);
			append_dev(div, t0);
			mount_component(dropdown1, div, null);
			append_dev(div, t1);
			mount_component(dropdown2, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdown0_changes = {};
			if (dirty & /*isOpen*/ 1) dropdown0_changes.isOpen = /*isOpen*/ ctx[0];
			if (dirty & /*isOpen*/ 1) dropdown0_changes.toggle = /*func_2*/ ctx[9];

			if (dirty & /*$$scope*/ 32768) {
				dropdown0_changes.$$scope = { dirty, ctx };
			}

			dropdown0.$set(dropdown0_changes);
			const dropdown1_changes = {};
			if (dirty & /*leftIsOpen*/ 2) dropdown1_changes.isOpen = /*leftIsOpen*/ ctx[1];
			if (dirty & /*leftIsOpen*/ 2) dropdown1_changes.toggle = /*func_3*/ ctx[10];

			if (dirty & /*$$scope*/ 32768) {
				dropdown1_changes.$$scope = { dirty, ctx };
			}

			dropdown1.$set(dropdown1_changes);
			const dropdown2_changes = {};
			if (dirty & /*rightIsOpen*/ 4) dropdown2_changes.isOpen = /*rightIsOpen*/ ctx[2];
			if (dirty & /*rightIsOpen*/ 4) dropdown2_changes.toggle = /*func_4*/ ctx[11];

			if (dirty & /*$$scope*/ 32768) {
				dropdown2_changes.$$scope = { dirty, ctx };
			}

			dropdown2.$set(dropdown2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdown0.$$.fragment, local);
			transition_in(dropdown1.$$.fragment, local);
			transition_in(dropdown2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdown0.$$.fragment, local);
			transition_out(dropdown1.$$.fragment, local);
			transition_out(dropdown2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(dropdown0);
			destroy_component(dropdown1);
			destroy_component(dropdown2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_30.name,
		type: "slot",
		source: "(101:0) <Row>",
		ctx
	});

	return block;
}

// (151:4) <DropdownToggle caret>
function create_default_slot_29(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Large Dropdown");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Large Dropdown");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_29.name,
		type: "slot",
		source: "(151:4) <DropdownToggle caret>",
		ctx
	});

	return block;
}

// (153:6) <DropdownItem>
function create_default_slot_28(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Shave the modern way");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Shave the modern way");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_28.name,
		type: "slot",
		source: "(153:6) <DropdownItem>",
		ctx
	});

	return block;
}

// (152:4) <DropdownMenu>
function create_default_slot_27(ctx) {
	let current;

	const dropdownitem = new DropdownItem({
			props: {
				$$slots: { default: [create_default_slot_28] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dropdownitem.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(dropdownitem.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(dropdownitem, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdownitem_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownitem_changes.$$scope = { dirty, ctx };
			}

			dropdownitem.$set(dropdownitem_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdownitem.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdownitem.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdownitem, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_27.name,
		type: "slot",
		source: "(152:4) <DropdownMenu>",
		ctx
	});

	return block;
}

// (145:2) <Dropdown      group      isOpen={lgIsOpen}      size="lg"      toggle={() => (lgIsOpen = !lgIsOpen)}    >
function create_default_slot_26(ctx) {
	let t;
	let current;

	const dropdowntoggle = new DropdownToggle({
			props: {
				caret: true,
				$$slots: { default: [create_default_slot_29] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownmenu = new DropdownMenu({
			props: {
				$$slots: { default: [create_default_slot_27] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dropdowntoggle.$$.fragment);
			t = space();
			create_component(dropdownmenu.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(dropdowntoggle.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(dropdownmenu.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(dropdowntoggle, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(dropdownmenu, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdowntoggle_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdowntoggle_changes.$$scope = { dirty, ctx };
			}

			dropdowntoggle.$set(dropdowntoggle_changes);
			const dropdownmenu_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownmenu_changes.$$scope = { dirty, ctx };
			}

			dropdownmenu.$set(dropdownmenu_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdowntoggle.$$.fragment, local);
			transition_in(dropdownmenu.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdowntoggle.$$.fragment, local);
			transition_out(dropdownmenu.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdowntoggle, detaching);
			if (detaching) detach_dev(t);
			destroy_component(dropdownmenu, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_26.name,
		type: "slot",
		source: "(145:2) <Dropdown      group      isOpen={lgIsOpen}      size=\\\"lg\\\"      toggle={() => (lgIsOpen = !lgIsOpen)}    >",
		ctx
	});

	return block;
}

// (160:4) <DropdownToggle caret>
function create_default_slot_25(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Dropdown");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Dropdown");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_25.name,
		type: "slot",
		source: "(160:4) <DropdownToggle caret>",
		ctx
	});

	return block;
}

// (162:6) <DropdownItem>
function create_default_slot_24(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("No Brush, No Lather");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "No Brush, No Lather");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_24.name,
		type: "slot",
		source: "(162:6) <DropdownItem>",
		ctx
	});

	return block;
}

// (161:4) <DropdownMenu>
function create_default_slot_23(ctx) {
	let current;

	const dropdownitem = new DropdownItem({
			props: {
				$$slots: { default: [create_default_slot_24] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dropdownitem.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(dropdownitem.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(dropdownitem, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdownitem_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownitem_changes.$$scope = { dirty, ctx };
			}

			dropdownitem.$set(dropdownitem_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdownitem.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdownitem.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdownitem, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_23.name,
		type: "slot",
		source: "(161:4) <DropdownMenu>",
		ctx
	});

	return block;
}

// (159:2) <Dropdown {isOpen} toggle={() => (isOpen = !isOpen)}>
function create_default_slot_22(ctx) {
	let t;
	let current;

	const dropdowntoggle = new DropdownToggle({
			props: {
				caret: true,
				$$slots: { default: [create_default_slot_25] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownmenu = new DropdownMenu({
			props: {
				$$slots: { default: [create_default_slot_23] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dropdowntoggle.$$.fragment);
			t = space();
			create_component(dropdownmenu.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(dropdowntoggle.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(dropdownmenu.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(dropdowntoggle, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(dropdownmenu, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdowntoggle_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdowntoggle_changes.$$scope = { dirty, ctx };
			}

			dropdowntoggle.$set(dropdowntoggle_changes);
			const dropdownmenu_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownmenu_changes.$$scope = { dirty, ctx };
			}

			dropdownmenu.$set(dropdownmenu_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdowntoggle.$$.fragment, local);
			transition_in(dropdownmenu.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdowntoggle.$$.fragment, local);
			transition_out(dropdownmenu.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdowntoggle, detaching);
			if (detaching) detach_dev(t);
			destroy_component(dropdownmenu, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_22.name,
		type: "slot",
		source: "(159:2) <Dropdown {isOpen} toggle={() => (isOpen = !isOpen)}>",
		ctx
	});

	return block;
}

// (174:4) <DropdownToggle caret>
function create_default_slot_21(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Small Dropdown");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Small Dropdown");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_21.name,
		type: "slot",
		source: "(174:4) <DropdownToggle caret>",
		ctx
	});

	return block;
}

// (176:6) <DropdownItem>
function create_default_slot_20(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Burma-Shave");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Burma-Shave");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_20.name,
		type: "slot",
		source: "(176:6) <DropdownItem>",
		ctx
	});

	return block;
}

// (175:4) <DropdownMenu>
function create_default_slot_19(ctx) {
	let current;

	const dropdownitem = new DropdownItem({
			props: {
				$$slots: { default: [create_default_slot_20] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dropdownitem.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(dropdownitem.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(dropdownitem, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdownitem_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownitem_changes.$$scope = { dirty, ctx };
			}

			dropdownitem.$set(dropdownitem_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdownitem.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdownitem.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdownitem, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_19.name,
		type: "slot",
		source: "(175:4) <DropdownMenu>",
		ctx
	});

	return block;
}

// (168:2) <Dropdown      group      isOpen={smIsOpen}      size="sm"      toggle={() => (smIsOpen = !smIsOpen)}    >
function create_default_slot_18(ctx) {
	let t;
	let current;

	const dropdowntoggle = new DropdownToggle({
			props: {
				caret: true,
				$$slots: { default: [create_default_slot_21] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownmenu = new DropdownMenu({
			props: {
				$$slots: { default: [create_default_slot_19] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dropdowntoggle.$$.fragment);
			t = space();
			create_component(dropdownmenu.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(dropdowntoggle.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(dropdownmenu.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(dropdowntoggle, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(dropdownmenu, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdowntoggle_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdowntoggle_changes.$$scope = { dirty, ctx };
			}

			dropdowntoggle.$set(dropdowntoggle_changes);
			const dropdownmenu_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownmenu_changes.$$scope = { dirty, ctx };
			}

			dropdownmenu.$set(dropdownmenu_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdowntoggle.$$.fragment, local);
			transition_in(dropdownmenu.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdowntoggle.$$.fragment, local);
			transition_out(dropdownmenu.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdowntoggle, detaching);
			if (detaching) detach_dev(t);
			destroy_component(dropdownmenu, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_18.name,
		type: "slot",
		source: "(168:2) <Dropdown      group      isOpen={smIsOpen}      size=\\\"sm\\\"      toggle={() => (smIsOpen = !smIsOpen)}    >",
		ctx
	});

	return block;
}

// (186:2) <DropdownToggle caret>
function create_default_slot_17(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Dropdown");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Dropdown");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_17.name,
		type: "slot",
		source: "(186:2) <DropdownToggle caret>",
		ctx
	});

	return block;
}

// (188:8) <DropdownItem header>
function create_default_slot_16(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Header");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Header");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_16.name,
		type: "slot",
		source: "(188:8) <DropdownItem header>",
		ctx
	});

	return block;
}

// (189:8) <DropdownItem disabled>
function create_default_slot_15(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Action");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Action");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_15.name,
		type: "slot",
		source: "(189:8) <DropdownItem disabled>",
		ctx
	});

	return block;
}

// (190:8) <DropdownItem>
function create_default_slot_14(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Another Action");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Another Action");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_14.name,
		type: "slot",
		source: "(190:8) <DropdownItem>",
		ctx
	});

	return block;
}

// (192:8) <DropdownItem>
function create_default_slot_13(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Another Action");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Another Action");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13.name,
		type: "slot",
		source: "(192:8) <DropdownItem>",
		ctx
	});

	return block;
}

// (187:6) <DropdownMenu>
function create_default_slot_12(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let current;

	const dropdownitem0 = new DropdownItem({
			props: {
				header: true,
				$$slots: { default: [create_default_slot_16] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownitem1 = new DropdownItem({
			props: {
				disabled: true,
				$$slots: { default: [create_default_slot_15] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownitem2 = new DropdownItem({
			props: {
				$$slots: { default: [create_default_slot_14] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownitem3 = new DropdownItem({ props: { divider: true }, $$inline: true });

	const dropdownitem4 = new DropdownItem({
			props: {
				$$slots: { default: [create_default_slot_13] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dropdownitem0.$$.fragment);
			t0 = space();
			create_component(dropdownitem1.$$.fragment);
			t1 = space();
			create_component(dropdownitem2.$$.fragment);
			t2 = space();
			create_component(dropdownitem3.$$.fragment);
			t3 = space();
			create_component(dropdownitem4.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(dropdownitem0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(dropdownitem1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(dropdownitem2.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(dropdownitem3.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(dropdownitem4.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(dropdownitem0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(dropdownitem1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(dropdownitem2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(dropdownitem3, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(dropdownitem4, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdownitem0_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownitem0_changes.$$scope = { dirty, ctx };
			}

			dropdownitem0.$set(dropdownitem0_changes);
			const dropdownitem1_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownitem1_changes.$$scope = { dirty, ctx };
			}

			dropdownitem1.$set(dropdownitem1_changes);
			const dropdownitem2_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownitem2_changes.$$scope = { dirty, ctx };
			}

			dropdownitem2.$set(dropdownitem2_changes);
			const dropdownitem4_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownitem4_changes.$$scope = { dirty, ctx };
			}

			dropdownitem4.$set(dropdownitem4_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdownitem0.$$.fragment, local);
			transition_in(dropdownitem1.$$.fragment, local);
			transition_in(dropdownitem2.$$.fragment, local);
			transition_in(dropdownitem3.$$.fragment, local);
			transition_in(dropdownitem4.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdownitem0.$$.fragment, local);
			transition_out(dropdownitem1.$$.fragment, local);
			transition_out(dropdownitem2.$$.fragment, local);
			transition_out(dropdownitem3.$$.fragment, local);
			transition_out(dropdownitem4.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdownitem0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(dropdownitem1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(dropdownitem2, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(dropdownitem3, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(dropdownitem4, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12.name,
		type: "slot",
		source: "(187:6) <DropdownMenu>",
		ctx
	});

	return block;
}

// (185:0) <UncontrolledDropdown>
function create_default_slot_11(ctx) {
	let t;
	let current;

	const dropdowntoggle = new DropdownToggle({
			props: {
				caret: true,
				$$slots: { default: [create_default_slot_17] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownmenu = new DropdownMenu({
			props: {
				$$slots: { default: [create_default_slot_12] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dropdowntoggle.$$.fragment);
			t = space();
			create_component(dropdownmenu.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(dropdowntoggle.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(dropdownmenu.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(dropdowntoggle, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(dropdownmenu, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdowntoggle_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdowntoggle_changes.$$scope = { dirty, ctx };
			}

			dropdowntoggle.$set(dropdowntoggle_changes);
			const dropdownmenu_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownmenu_changes.$$scope = { dirty, ctx };
			}

			dropdownmenu.$set(dropdownmenu_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdowntoggle.$$.fragment, local);
			transition_in(dropdownmenu.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdowntoggle.$$.fragment, local);
			transition_out(dropdownmenu.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdowntoggle, detaching);
			if (detaching) detach_dev(t);
			destroy_component(dropdownmenu, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11.name,
		type: "slot",
		source: "(185:0) <UncontrolledDropdown>",
		ctx
	});

	return block;
}

// (140:0) <Row>
function create_default_slot_10(ctx) {
	let div3;
	let h30;
	let t0;
	let t1;
	let h40;
	let t2;
	let t3;
	let div0;
	let t4;
	let div1;
	let t5;
	let div2;
	let t6;
	let div4;
	let h31;
	let t7;
	let t8;
	let h41;
	let t9;
	let t10;
	let current;

	const dropdown0 = new Dropdown({
			props: {
				group: true,
				isOpen: /*lgIsOpen*/ ctx[3],
				size: "lg",
				toggle: /*func_5*/ ctx[12],
				$$slots: { default: [create_default_slot_26] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdown1 = new Dropdown({
			props: {
				isOpen: /*isOpen*/ ctx[0],
				toggle: /*func_6*/ ctx[13],
				$$slots: { default: [create_default_slot_22] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdown2 = new Dropdown({
			props: {
				group: true,
				isOpen: /*smIsOpen*/ ctx[4],
				size: "sm",
				toggle: /*func_7*/ ctx[14],
				$$slots: { default: [create_default_slot_18] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const uncontrolleddropdown = new UncontrolledDropdown({
			props: {
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div3 = element("div");
			h30 = element("h3");
			t0 = text("Размер");
			t1 = space();
			h40 = element("h4");
			t2 = text("Пример");
			t3 = space();
			div0 = element("div");
			create_component(dropdown0.$$.fragment);
			t4 = space();
			div1 = element("div");
			create_component(dropdown1.$$.fragment);
			t5 = space();
			div2 = element("div");
			create_component(dropdown2.$$.fragment);
			t6 = space();
			div4 = element("div");
			h31 = element("h3");
			t7 = text("Независимый");
			t8 = space();
			h41 = element("h4");
			t9 = text("Пример");
			t10 = space();
			create_component(uncontrolleddropdown.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			h30 = claim_element(div3_nodes, "H3", { class: true });
			var h30_nodes = children(h30);
			t0 = claim_text(h30_nodes, "Размер");
			h30_nodes.forEach(detach_dev);
			t1 = claim_space(div3_nodes);
			h40 = claim_element(div3_nodes, "H4", { class: true });
			var h40_nodes = children(h40);
			t2 = claim_text(h40_nodes, "Пример");
			h40_nodes.forEach(detach_dev);
			t3 = claim_space(div3_nodes);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(dropdown0.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t4 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			claim_component(dropdown1.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			t5 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			claim_component(dropdown2.$$.fragment, div2_nodes);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			t6 = claim_space(nodes);
			div4 = claim_element(nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			h31 = claim_element(div4_nodes, "H3", { class: true });
			var h31_nodes = children(h31);
			t7 = claim_text(h31_nodes, "Независимый");
			h31_nodes.forEach(detach_dev);
			t8 = claim_space(div4_nodes);
			h41 = claim_element(div4_nodes, "H4", { class: true });
			var h41_nodes = children(h41);
			t9 = claim_text(h41_nodes, "Пример");
			h41_nodes.forEach(detach_dev);
			t10 = claim_space(div4_nodes);
			claim_component(uncontrolleddropdown.$$.fragment, div4_nodes);
			div4_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h30, "class", "mt-4");
			add_location(h30, file, 141, 10, 4914);
			attr_dev(h40, "class", "mt-4");
			add_location(h40, file, 142, 10, 4954);
			attr_dev(div0, "class", "mb-3");
			add_location(div0, file, 143, 10, 4994);
			attr_dev(div1, "class", "mb-3");
			add_location(div1, file, 157, 0, 5306);
			attr_dev(div2, "class", "mb-3");
			add_location(div2, file, 166, 0, 5558);
			attr_dev(div3, "class", "col-xl-6");
			add_location(div3, file, 140, 4, 4880);
			attr_dev(h31, "class", "mt-4");
			add_location(h31, file, 182, 10, 5912);
			attr_dev(h41, "class", "mt-4");
			add_location(h41, file, 183, 10, 5957);
			attr_dev(div4, "class", "col-xl-6");
			add_location(div4, file, 181, 5, 5878);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div3, anchor);
			append_dev(div3, h30);
			append_dev(h30, t0);
			append_dev(div3, t1);
			append_dev(div3, h40);
			append_dev(h40, t2);
			append_dev(div3, t3);
			append_dev(div3, div0);
			mount_component(dropdown0, div0, null);
			append_dev(div3, t4);
			append_dev(div3, div1);
			mount_component(dropdown1, div1, null);
			append_dev(div3, t5);
			append_dev(div3, div2);
			mount_component(dropdown2, div2, null);
			insert_dev(target, t6, anchor);
			insert_dev(target, div4, anchor);
			append_dev(div4, h31);
			append_dev(h31, t7);
			append_dev(div4, t8);
			append_dev(div4, h41);
			append_dev(h41, t9);
			append_dev(div4, t10);
			mount_component(uncontrolleddropdown, div4, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdown0_changes = {};
			if (dirty & /*lgIsOpen*/ 8) dropdown0_changes.isOpen = /*lgIsOpen*/ ctx[3];
			if (dirty & /*lgIsOpen*/ 8) dropdown0_changes.toggle = /*func_5*/ ctx[12];

			if (dirty & /*$$scope*/ 32768) {
				dropdown0_changes.$$scope = { dirty, ctx };
			}

			dropdown0.$set(dropdown0_changes);
			const dropdown1_changes = {};
			if (dirty & /*isOpen*/ 1) dropdown1_changes.isOpen = /*isOpen*/ ctx[0];
			if (dirty & /*isOpen*/ 1) dropdown1_changes.toggle = /*func_6*/ ctx[13];

			if (dirty & /*$$scope*/ 32768) {
				dropdown1_changes.$$scope = { dirty, ctx };
			}

			dropdown1.$set(dropdown1_changes);
			const dropdown2_changes = {};
			if (dirty & /*smIsOpen*/ 16) dropdown2_changes.isOpen = /*smIsOpen*/ ctx[4];
			if (dirty & /*smIsOpen*/ 16) dropdown2_changes.toggle = /*func_7*/ ctx[14];

			if (dirty & /*$$scope*/ 32768) {
				dropdown2_changes.$$scope = { dirty, ctx };
			}

			dropdown2.$set(dropdown2_changes);
			const uncontrolleddropdown_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				uncontrolleddropdown_changes.$$scope = { dirty, ctx };
			}

			uncontrolleddropdown.$set(uncontrolleddropdown_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdown0.$$.fragment, local);
			transition_in(dropdown1.$$.fragment, local);
			transition_in(dropdown2.$$.fragment, local);
			transition_in(uncontrolleddropdown.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdown0.$$.fragment, local);
			transition_out(dropdown1.$$.fragment, local);
			transition_out(dropdown2.$$.fragment, local);
			transition_out(uncontrolleddropdown.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
			destroy_component(dropdown0);
			destroy_component(dropdown1);
			destroy_component(dropdown2);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(div4);
			destroy_component(uncontrolleddropdown);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(140:0) <Row>",
		ctx
	});

	return block;
}

// (204:6) <NavLink href="/components/">
function create_default_slot_9(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Inactive Link");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Inactive Link");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(204:6) <NavLink href=\\\"/components/\\\">",
		ctx
	});

	return block;
}

// (203:4) <NavItem>
function create_default_slot_8(ctx) {
	let current;

	const navlink = new NavLink({
			props: {
				href: "/components/",
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(navlink.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(navlink.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(navlink, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const navlink_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				navlink_changes.$$scope = { dirty, ctx };
			}

			navlink.$set(navlink_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(navlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(navlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(navlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(203:4) <NavItem>",
		ctx
	});

	return block;
}

// (207:6) <DropdownToggle nav class="nav-link" caret>
function create_default_slot_7(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Dropdown");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Dropdown");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(207:6) <DropdownToggle nav class=\\\"nav-link\\\" caret>",
		ctx
	});

	return block;
}

// (209:8) <DropdownItem tag="a" href="/blah" active>
function create_default_slot_6(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Link");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Link");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(209:8) <DropdownItem tag=\\\"a\\\" href=\\\"/blah\\\" active>",
		ctx
	});

	return block;
}

// (208:6) <DropdownMenu>
function create_default_slot_5(ctx) {
	let current;

	const dropdownitem = new DropdownItem({
			props: {
				tag: "a",
				href: "/blah",
				active: true,
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dropdownitem.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(dropdownitem.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(dropdownitem, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdownitem_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownitem_changes.$$scope = { dirty, ctx };
			}

			dropdownitem.$set(dropdownitem_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdownitem.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdownitem.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdownitem, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(208:6) <DropdownMenu>",
		ctx
	});

	return block;
}

// (206:4) <UncontrolledDropdown setActiveFromChild>
function create_default_slot_4(ctx) {
	let t;
	let current;

	const dropdowntoggle = new DropdownToggle({
			props: {
				nav: true,
				class: "nav-link",
				caret: true,
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownmenu = new DropdownMenu({
			props: {
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dropdowntoggle.$$.fragment);
			t = space();
			create_component(dropdownmenu.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(dropdowntoggle.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(dropdownmenu.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(dropdowntoggle, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(dropdownmenu, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdowntoggle_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdowntoggle_changes.$$scope = { dirty, ctx };
			}

			dropdowntoggle.$set(dropdowntoggle_changes);
			const dropdownmenu_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				dropdownmenu_changes.$$scope = { dirty, ctx };
			}

			dropdownmenu.$set(dropdownmenu_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdowntoggle.$$.fragment, local);
			transition_in(dropdownmenu.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdowntoggle.$$.fragment, local);
			transition_out(dropdownmenu.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdowntoggle, detaching);
			if (detaching) detach_dev(t);
			destroy_component(dropdownmenu, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(206:4) <UncontrolledDropdown setActiveFromChild>",
		ctx
	});

	return block;
}

// (202:2) <Nav class="ml-auto" navbar>
function create_default_slot_3(ctx) {
	let t;
	let current;

	const navitem = new NavItem({
			props: {
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const uncontrolleddropdown = new UncontrolledDropdown({
			props: {
				setActiveFromChild: true,
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(navitem.$$.fragment);
			t = space();
			create_component(uncontrolleddropdown.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(navitem.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(uncontrolleddropdown.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(navitem, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(uncontrolleddropdown, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const navitem_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				navitem_changes.$$scope = { dirty, ctx };
			}

			navitem.$set(navitem_changes);
			const uncontrolleddropdown_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				uncontrolleddropdown_changes.$$scope = { dirty, ctx };
			}

			uncontrolleddropdown.$set(uncontrolleddropdown_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(navitem.$$.fragment, local);
			transition_in(uncontrolleddropdown.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(navitem.$$.fragment, local);
			transition_out(uncontrolleddropdown.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(navitem, detaching);
			if (detaching) detach_dev(t);
			destroy_component(uncontrolleddropdown, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(202:2) <Nav class=\\\"ml-auto\\\" navbar>",
		ctx
	});

	return block;
}

// (201:0) <Navbar color="light" light expand="md">
function create_default_slot_2(ctx) {
	let current;

	const nav = new Nav({
			props: {
				class: "ml-auto",
				navbar: true,
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(nav.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(nav.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(nav, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const nav_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				nav_changes.$$scope = { dirty, ctx };
			}

			nav.$set(nav_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(nav.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(nav.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(nav, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(201:0) <Navbar color=\\\"light\\\" light expand=\\\"md\\\">",
		ctx
	});

	return block;
}

// (197:0) <Row>
function create_default_slot_1(ctx) {
	let div;
	let h3;
	let t0;
	let t1;
	let h4;
	let t2;
	let t3;
	let current;

	const navbar = new Navbar({
			props: {
				color: "light",
				light: true,
				expand: "md",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			h3 = element("h3");
			t0 = text("SetActiveFromChild");
			t1 = space();
			h4 = element("h4");
			t2 = text("Пример");
			t3 = space();
			create_component(navbar.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h3 = claim_element(div_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, "SetActiveFromChild");
			h3_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			h4 = claim_element(div_nodes, "H4", { class: true });
			var h4_nodes = children(h4);
			t2 = claim_text(h4_nodes, "Пример");
			h4_nodes.forEach(detach_dev);
			t3 = claim_space(div_nodes);
			claim_component(navbar.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h3, "class", "mt-4");
			add_location(h3, file, 198, 10, 6445);
			attr_dev(h4, "class", "mt-4");
			add_location(h4, file, 199, 10, 6497);
			attr_dev(div, "class", "col-xl-12");
			add_location(div, file, 197, 5, 6410);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h3);
			append_dev(h3, t0);
			append_dev(div, t1);
			append_dev(div, h4);
			append_dev(h4, t2);
			append_dev(div, t3);
			mount_component(navbar, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const navbar_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				navbar_changes.$$scope = { dirty, ctx };
			}

			navbar.$set(navbar_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(navbar.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(navbar.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(navbar);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(197:0) <Row>",
		ctx
	});

	return block;
}

// (216:0) <Row>
function create_default_slot(ctx) {
	let div;
	let br;

	const block = {
		c: function create() {
			div = element("div");
			br = element("br");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			br = claim_element(div_nodes, "BR", {});
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(br, file, 216, 25, 7033);
			attr_dev(div, "class", "col-xl-12");
			add_location(div, file, 216, 2, 7010);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, br);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(216:0) <Row>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let title_value;
	let t0;
	let h1;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;
	let t7;
	let t8;
	let current;
	document.title = title_value = /*title*/ ctx[5];

	const breadcrumb = new Breadcrumb({
			props: {
				class: "mb-4",
				$$slots: { default: [create_default_slot_63] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row0 = new Row({
			props: {
				$$slots: { default: [create_default_slot_53] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row1 = new Row({
			props: {
				$$slots: { default: [create_default_slot_46] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row2 = new Row({
			props: {
				$$slots: { default: [create_default_slot_30] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row3 = new Row({
			props: {
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row4 = new Row({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row5 = new Row({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("Ниспадающее контекстное меню");
			t2 = space();
			create_component(breadcrumb.$$.fragment);
			t3 = space();
			create_component(row0.$$.fragment);
			t4 = space();
			create_component(row1.$$.fragment);
			t5 = space();
			create_component(row2.$$.fragment);
			t6 = space();
			create_component(row3.$$.fragment);
			t7 = space();
			create_component(row4.$$.fragment);
			t8 = space();
			create_component(row5.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-46oba3\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Ниспадающее контекстное меню");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			claim_component(breadcrumb.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(row0.$$.fragment, nodes);
			t4 = claim_space(nodes);
			claim_component(row1.$$.fragment, nodes);
			t5 = claim_space(nodes);
			claim_component(row2.$$.fragment, nodes);
			t6 = claim_space(nodes);
			claim_component(row3.$$.fragment, nodes);
			t7 = claim_space(nodes);
			claim_component(row4.$$.fragment, nodes);
			t8 = claim_space(nodes);
			claim_component(row5.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "mt-4");
			add_location(h1, file, 40, 0, 1289);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			mount_component(breadcrumb, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(row0, target, anchor);
			insert_dev(target, t4, anchor);
			mount_component(row1, target, anchor);
			insert_dev(target, t5, anchor);
			mount_component(row2, target, anchor);
			insert_dev(target, t6, anchor);
			mount_component(row3, target, anchor);
			insert_dev(target, t7, anchor);
			mount_component(row4, target, anchor);
			insert_dev(target, t8, anchor);
			mount_component(row5, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*title*/ 32) && title_value !== (title_value = /*title*/ ctx[5])) {
				document.title = title_value;
			}

			const breadcrumb_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				breadcrumb_changes.$$scope = { dirty, ctx };
			}

			breadcrumb.$set(breadcrumb_changes);
			const row0_changes = {};

			if (dirty & /*$$scope, isOpen*/ 32769) {
				row0_changes.$$scope = { dirty, ctx };
			}

			row0.$set(row0_changes);
			const row1_changes = {};

			if (dirty & /*$$scope, isOpen*/ 32769) {
				row1_changes.$$scope = { dirty, ctx };
			}

			row1.$set(row1_changes);
			const row2_changes = {};

			if (dirty & /*$$scope, rightIsOpen, leftIsOpen, isOpen*/ 32775) {
				row2_changes.$$scope = { dirty, ctx };
			}

			row2.$set(row2_changes);
			const row3_changes = {};

			if (dirty & /*$$scope, smIsOpen, isOpen, lgIsOpen*/ 32793) {
				row3_changes.$$scope = { dirty, ctx };
			}

			row3.$set(row3_changes);
			const row4_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				row4_changes.$$scope = { dirty, ctx };
			}

			row4.$set(row4_changes);
			const row5_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				row5_changes.$$scope = { dirty, ctx };
			}

			row5.$set(row5_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(breadcrumb.$$.fragment, local);
			transition_in(row0.$$.fragment, local);
			transition_in(row1.$$.fragment, local);
			transition_in(row2.$$.fragment, local);
			transition_in(row3.$$.fragment, local);
			transition_in(row4.$$.fragment, local);
			transition_in(row5.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(breadcrumb.$$.fragment, local);
			transition_out(row0.$$.fragment, local);
			transition_out(row1.$$.fragment, local);
			transition_out(row2.$$.fragment, local);
			transition_out(row3.$$.fragment, local);
			transition_out(row4.$$.fragment, local);
			transition_out(row5.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			destroy_component(breadcrumb, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(row0, detaching);
			if (detaching) detach_dev(t4);
			destroy_component(row1, detaching);
			if (detaching) detach_dev(t5);
			destroy_component(row2, detaching);
			if (detaching) detach_dev(t6);
			destroy_component(row3, detaching);
			if (detaching) detach_dev(t7);
			destroy_component(row4, detaching);
			if (detaching) detach_dev(t8);
			destroy_component(row5, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let title = "Ниспадающее контекстное меню | UI | Пользовательский Интерфейс";

	const colors = [
		"primary",
		"secondary",
		"success",
		"danger",
		"warning",
		"info",
		"light",
		"dark"
	];

	let isOpen = false;
	let leftIsOpen = false;
	let rightIsOpen = false;
	let lgIsOpen = false;
	let smIsOpen = false;
	const func = () => $$invalidate(0, isOpen = !isOpen);
	const func_1 = () => $$invalidate(0, isOpen = !isOpen);
	const func_2 = () => $$invalidate(0, isOpen = !isOpen);
	const func_3 = () => $$invalidate(1, leftIsOpen = !leftIsOpen);
	const func_4 = () => $$invalidate(2, rightIsOpen = !rightIsOpen);
	const func_5 = () => $$invalidate(3, lgIsOpen = !lgIsOpen);
	const func_6 = () => $$invalidate(0, isOpen = !isOpen);
	const func_7 = () => $$invalidate(4, smIsOpen = !smIsOpen);

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("title" in $$props) $$invalidate(5, title = $$props.title);
		if ("isOpen" in $$props) $$invalidate(0, isOpen = $$props.isOpen);
		if ("leftIsOpen" in $$props) $$invalidate(1, leftIsOpen = $$props.leftIsOpen);
		if ("rightIsOpen" in $$props) $$invalidate(2, rightIsOpen = $$props.rightIsOpen);
		if ("lgIsOpen" in $$props) $$invalidate(3, lgIsOpen = $$props.lgIsOpen);
		if ("smIsOpen" in $$props) $$invalidate(4, smIsOpen = $$props.smIsOpen);
	};

	return [
		isOpen,
		leftIsOpen,
		rightIsOpen,
		lgIsOpen,
		smIsOpen,
		title,
		colors,
		func,
		func_1,
		func_2,
		func_3,
		func_4,
		func_5,
		func_6,
		func_7
	];
}

class Dropdowns extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Dropdowns",
			options,
			id: create_fragment.name
		});
	}
}

export default Dropdowns;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
