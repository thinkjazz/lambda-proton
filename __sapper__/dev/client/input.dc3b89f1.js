import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, P as Form, J as space, f as element, y as text, F as create_component, L as query_selector_all, j as detach_dev, K as claim_space, g as claim_element, h as children, z as claim_text, G as claim_component, k as attr_dev, l as add_location, n as insert_dev, o as append_dev, H as mount_component, r as transition_in, t as transition_out, I as destroy_component, Q as Label, R as Input, ab as binding_callbacks, ao as bind, A as set_data_dev, ap as add_flush_callback, B as noop } from './client.9878d071.js';
import { B as Breadcrumb, a as BreadcrumbItem } from './BreadcrumbItem.9b8e1b8d.js';
import { R as Row } from './Row.a794367a.js';
import { F as FormGroup } from './FormGroup.6f92cc27.js';
import { F as FormText } from './FormText.ff430610.js';

/* src\routes\ui\input.svelte generated by Svelte v3.18.1 */
const file = "src\\routes\\ui\\input.svelte";

// (25:4) <BreadcrumbItem active>
function create_default_slot_44(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Поле ввода Input");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Поле ввода Input");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_44.name,
		type: "slot",
		source: "(25:4) <BreadcrumbItem active>",
		ctx
	});

	return block;
}

// (24:0) <Breadcrumb class="mb-4">
function create_default_slot_43(ctx) {
	let current;

	const breadcrumbitem = new BreadcrumbItem({
			props: {
				active: true,
				$$slots: { default: [create_default_slot_44] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(breadcrumbitem.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(breadcrumbitem.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(breadcrumbitem, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const breadcrumbitem_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				breadcrumbitem_changes.$$scope = { dirty, ctx };
			}

			breadcrumbitem.$set(breadcrumbitem_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(breadcrumbitem.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(breadcrumbitem.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(breadcrumbitem, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_43.name,
		type: "slot",
		source: "(24:0) <Breadcrumb class=\\\"mb-4\\\">",
		ctx
	});

	return block;
}

// (33:12) <Label for="exampleEmail">
function create_default_slot_42(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Простой текст (статический)");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Простой текст (статический)");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_42.name,
		type: "slot",
		source: "(33:12) <Label for=\\\"exampleEmail\\\">",
		ctx
	});

	return block;
}

// (32:8) <FormGroup>
function create_default_slot_41(ctx) {
	let t;
	let current;

	const label = new Label({
			props: {
				for: "exampleEmail",
				$$slots: { default: [create_default_slot_42] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const input = new Input({
			props: {
				plaintext: true,
				value: "Некоторый обычный текст/статическое значение"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_41.name,
		type: "slot",
		source: "(32:8) <FormGroup>",
		ctx
	});

	return block;
}

// (37:12) <Label for="exampleEmail">
function create_default_slot_40(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Email");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Email");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_40.name,
		type: "slot",
		source: "(37:12) <Label for=\\\"exampleEmail\\\">",
		ctx
	});

	return block;
}

// (36:8) <FormGroup>
function create_default_slot_39(ctx) {
	let t;
	let current;

	const label = new Label({
			props: {
				for: "exampleEmail",
				$$slots: { default: [create_default_slot_40] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const input = new Input({
			props: {
				type: "email",
				name: "email",
				id: "exampleEmail",
				placeholder: "Введите почту"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_39.name,
		type: "slot",
		source: "(36:8) <FormGroup>",
		ctx
	});

	return block;
}

// (45:12) <Label for="examplePassword">
function create_default_slot_38(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Пароль");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Пароль");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_38.name,
		type: "slot",
		source: "(45:12) <Label for=\\\"examplePassword\\\">",
		ctx
	});

	return block;
}

// (44:8) <FormGroup>
function create_default_slot_37(ctx) {
	let t;
	let current;

	const label = new Label({
			props: {
				for: "examplePassword",
				$$slots: { default: [create_default_slot_38] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const input = new Input({
			props: {
				type: "password",
				name: "password",
				id: "examplePassword",
				placeholder: "Введите пароль"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_37.name,
		type: "slot",
		source: "(44:8) <FormGroup>",
		ctx
	});

	return block;
}

// (53:12) <Label for="exampleUrl">
function create_default_slot_36(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Url");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Url");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_36.name,
		type: "slot",
		source: "(53:12) <Label for=\\\"exampleUrl\\\">",
		ctx
	});

	return block;
}

// (52:8) <FormGroup>
function create_default_slot_35(ctx) {
	let t;
	let current;

	const label = new Label({
			props: {
				for: "exampleUrl",
				$$slots: { default: [create_default_slot_36] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const input = new Input({
			props: {
				type: "url",
				name: "url",
				id: "exampleUrl",
				placeholder: "введите url"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_35.name,
		type: "slot",
		source: "(52:8) <FormGroup>",
		ctx
	});

	return block;
}

// (61:12) <Label for="exampleNumber">
function create_default_slot_34(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Номер");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Номер");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_34.name,
		type: "slot",
		source: "(61:12) <Label for=\\\"exampleNumber\\\">",
		ctx
	});

	return block;
}

// (60:8) <FormGroup>
function create_default_slot_33(ctx) {
	let t;
	let current;

	const label = new Label({
			props: {
				for: "exampleNumber",
				$$slots: { default: [create_default_slot_34] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const input = new Input({
			props: {
				type: "number",
				name: "number",
				id: "exampleNumber",
				placeholder: "заполните номер"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_33.name,
		type: "slot",
		source: "(60:8) <FormGroup>",
		ctx
	});

	return block;
}

// (69:12) <Label for="exampleDatetime">
function create_default_slot_32(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Сроки");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Сроки");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_32.name,
		type: "slot",
		source: "(69:12) <Label for=\\\"exampleDatetime\\\">",
		ctx
	});

	return block;
}

// (68:8) <FormGroup>
function create_default_slot_31(ctx) {
	let t;
	let current;

	const label = new Label({
			props: {
				for: "exampleDatetime",
				$$slots: { default: [create_default_slot_32] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const input = new Input({
			props: {
				type: "datetime",
				name: "datetime",
				id: "exampleDatetime",
				placeholder: "Введите сроки"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_31.name,
		type: "slot",
		source: "(68:8) <FormGroup>",
		ctx
	});

	return block;
}

// (77:12) <Label for="exampleDate">
function create_default_slot_30(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Дата");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Дата");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_30.name,
		type: "slot",
		source: "(77:12) <Label for=\\\"exampleDate\\\">",
		ctx
	});

	return block;
}

// (76:8) <FormGroup>
function create_default_slot_29(ctx) {
	let t;
	let current;

	const label = new Label({
			props: {
				for: "exampleDate",
				$$slots: { default: [create_default_slot_30] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const input = new Input({
			props: {
				type: "date",
				name: "date",
				id: "exampleDate",
				placeholder: "Введите дату"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_29.name,
		type: "slot",
		source: "(76:8) <FormGroup>",
		ctx
	});

	return block;
}

// (85:12) <Label for="exampleTime">
function create_default_slot_28(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Время");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Время");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_28.name,
		type: "slot",
		source: "(85:12) <Label for=\\\"exampleTime\\\">",
		ctx
	});

	return block;
}

// (84:8) <FormGroup>
function create_default_slot_27(ctx) {
	let t;
	let current;

	const label = new Label({
			props: {
				for: "exampleTime",
				$$slots: { default: [create_default_slot_28] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const input = new Input({
			props: {
				type: "time",
				name: "time",
				id: "exampleTime",
				placeholder: "Введите время"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_27.name,
		type: "slot",
		source: "(84:8) <FormGroup>",
		ctx
	});

	return block;
}

// (93:12) <Label for="exampleColor">
function create_default_slot_26(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Цвет");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Цвет");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_26.name,
		type: "slot",
		source: "(93:12) <Label for=\\\"exampleColor\\\">",
		ctx
	});

	return block;
}

// (92:8) <FormGroup>
function create_default_slot_25(ctx) {
	let t;
	let current;

	const label = new Label({
			props: {
				for: "exampleColor",
				$$slots: { default: [create_default_slot_26] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const input = new Input({
			props: {
				type: "color",
				name: "color",
				id: "exampleColor",
				placeholder: "Цветовой плейсхолдер"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_25.name,
		type: "slot",
		source: "(92:8) <FormGroup>",
		ctx
	});

	return block;
}

// (101:12) <Label for="exampleSearch">
function create_default_slot_24(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Поиск");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Поиск");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_24.name,
		type: "slot",
		source: "(101:12) <Label for=\\\"exampleSearch\\\">",
		ctx
	});

	return block;
}

// (100:8) <FormGroup>
function create_default_slot_23(ctx) {
	let t;
	let current;

	const label = new Label({
			props: {
				for: "exampleSearch",
				$$slots: { default: [create_default_slot_24] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const input = new Input({
			props: {
				type: "search",
				name: "search",
				id: "exampleSearch",
				placeholder: "Введите запрос для поиска"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_23.name,
		type: "slot",
		source: "(100:8) <FormGroup>",
		ctx
	});

	return block;
}

// (109:12) <Label for="exampleSelect">
function create_default_slot_22(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Выбор(Селектор)");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Выбор(Селектор)");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_22.name,
		type: "slot",
		source: "(109:12) <Label for=\\\"exampleSelect\\\">",
		ctx
	});

	return block;
}

// (110:12) <Input type="select" name="select" id="exampleSelect">
function create_default_slot_21(ctx) {
	let option0;
	let t0;
	let t1;
	let option1;
	let t2;
	let t3;
	let option2;
	let t4;
	let t5;
	let option3;
	let t6;
	let t7;
	let option4;
	let t8;

	const block = {
		c: function create() {
			option0 = element("option");
			t0 = text("1");
			t1 = space();
			option1 = element("option");
			t2 = text("2");
			t3 = space();
			option2 = element("option");
			t4 = text("3");
			t5 = space();
			option3 = element("option");
			t6 = text("4");
			t7 = space();
			option4 = element("option");
			t8 = text("5");
			this.h();
		},
		l: function claim(nodes) {
			option0 = claim_element(nodes, "OPTION", { value: true });
			var option0_nodes = children(option0);
			t0 = claim_text(option0_nodes, "1");
			option0_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			option1 = claim_element(nodes, "OPTION", { value: true });
			var option1_nodes = children(option1);
			t2 = claim_text(option1_nodes, "2");
			option1_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			option2 = claim_element(nodes, "OPTION", { value: true });
			var option2_nodes = children(option2);
			t4 = claim_text(option2_nodes, "3");
			option2_nodes.forEach(detach_dev);
			t5 = claim_space(nodes);
			option3 = claim_element(nodes, "OPTION", { value: true });
			var option3_nodes = children(option3);
			t6 = claim_text(option3_nodes, "4");
			option3_nodes.forEach(detach_dev);
			t7 = claim_space(nodes);
			option4 = claim_element(nodes, "OPTION", { value: true });
			var option4_nodes = children(option4);
			t8 = claim_text(option4_nodes, "5");
			option4_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			option0.__value = "1";
			option0.value = option0.__value;
			add_location(option0, file, 110, 16, 3971);
			option1.__value = "2";
			option1.value = option1.__value;
			add_location(option1, file, 111, 16, 4007);
			option2.__value = "3";
			option2.value = option2.__value;
			add_location(option2, file, 112, 16, 4043);
			option3.__value = "4";
			option3.value = option3.__value;
			add_location(option3, file, 113, 16, 4079);
			option4.__value = "5";
			option4.value = option4.__value;
			add_location(option4, file, 114, 16, 4115);
		},
		m: function mount(target, anchor) {
			insert_dev(target, option0, anchor);
			append_dev(option0, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, option1, anchor);
			append_dev(option1, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, option2, anchor);
			append_dev(option2, t4);
			insert_dev(target, t5, anchor);
			insert_dev(target, option3, anchor);
			append_dev(option3, t6);
			insert_dev(target, t7, anchor);
			insert_dev(target, option4, anchor);
			append_dev(option4, t8);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(option0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(option1);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(option2);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(option3);
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(option4);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_21.name,
		type: "slot",
		source: "(110:12) <Input type=\\\"select\\\" name=\\\"select\\\" id=\\\"exampleSelect\\\">",
		ctx
	});

	return block;
}

// (108:8) <FormGroup>
function create_default_slot_20(ctx) {
	let t;
	let current;

	const label = new Label({
			props: {
				for: "exampleSelect",
				$$slots: { default: [create_default_slot_22] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const input = new Input({
			props: {
				type: "select",
				name: "select",
				id: "exampleSelect",
				$$slots: { default: [create_default_slot_21] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
			const input_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				input_changes.$$scope = { dirty, ctx };
			}

			input.$set(input_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_20.name,
		type: "slot",
		source: "(108:8) <FormGroup>",
		ctx
	});

	return block;
}

// (119:12) <Label for="exampleSelectMulti">
function create_default_slot_19(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Выбор нескольких параметров");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Выбор нескольких параметров");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_19.name,
		type: "slot",
		source: "(119:12) <Label for=\\\"exampleSelectMulti\\\">",
		ctx
	});

	return block;
}

// (120:12) <Input type="select" name="selectMulti" id="exampleSelectMulti" multiple>
function create_default_slot_18(ctx) {
	let option0;
	let t0;
	let t1;
	let option1;
	let t2;
	let t3;
	let option2;
	let t4;
	let t5;
	let option3;
	let t6;
	let t7;
	let option4;
	let t8;

	const block = {
		c: function create() {
			option0 = element("option");
			t0 = text("1");
			t1 = space();
			option1 = element("option");
			t2 = text("2");
			t3 = space();
			option2 = element("option");
			t4 = text("3");
			t5 = space();
			option3 = element("option");
			t6 = text("4");
			t7 = space();
			option4 = element("option");
			t8 = text("5");
			this.h();
		},
		l: function claim(nodes) {
			option0 = claim_element(nodes, "OPTION", { value: true });
			var option0_nodes = children(option0);
			t0 = claim_text(option0_nodes, "1");
			option0_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			option1 = claim_element(nodes, "OPTION", { value: true });
			var option1_nodes = children(option1);
			t2 = claim_text(option1_nodes, "2");
			option1_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			option2 = claim_element(nodes, "OPTION", { value: true });
			var option2_nodes = children(option2);
			t4 = claim_text(option2_nodes, "3");
			option2_nodes.forEach(detach_dev);
			t5 = claim_space(nodes);
			option3 = claim_element(nodes, "OPTION", { value: true });
			var option3_nodes = children(option3);
			t6 = claim_text(option3_nodes, "4");
			option3_nodes.forEach(detach_dev);
			t7 = claim_space(nodes);
			option4 = claim_element(nodes, "OPTION", { value: true });
			var option4_nodes = children(option4);
			t8 = claim_text(option4_nodes, "5");
			option4_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			option0.__value = "1";
			option0.value = option0.__value;
			add_location(option0, file, 120, 16, 4384);
			option1.__value = "2";
			option1.value = option1.__value;
			add_location(option1, file, 121, 16, 4420);
			option2.__value = "3";
			option2.value = option2.__value;
			add_location(option2, file, 122, 16, 4456);
			option3.__value = "4";
			option3.value = option3.__value;
			add_location(option3, file, 123, 16, 4492);
			option4.__value = "5";
			option4.value = option4.__value;
			add_location(option4, file, 124, 16, 4528);
		},
		m: function mount(target, anchor) {
			insert_dev(target, option0, anchor);
			append_dev(option0, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, option1, anchor);
			append_dev(option1, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, option2, anchor);
			append_dev(option2, t4);
			insert_dev(target, t5, anchor);
			insert_dev(target, option3, anchor);
			append_dev(option3, t6);
			insert_dev(target, t7, anchor);
			insert_dev(target, option4, anchor);
			append_dev(option4, t8);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(option0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(option1);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(option2);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(option3);
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(option4);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_18.name,
		type: "slot",
		source: "(120:12) <Input type=\\\"select\\\" name=\\\"selectMulti\\\" id=\\\"exampleSelectMulti\\\" multiple>",
		ctx
	});

	return block;
}

// (118:8) <FormGroup>
function create_default_slot_17(ctx) {
	let t;
	let current;

	const label = new Label({
			props: {
				for: "exampleSelectMulti",
				$$slots: { default: [create_default_slot_19] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const input = new Input({
			props: {
				type: "select",
				name: "selectMulti",
				id: "exampleSelectMulti",
				multiple: true,
				$$slots: { default: [create_default_slot_18] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
			const input_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				input_changes.$$scope = { dirty, ctx };
			}

			input.$set(input_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_17.name,
		type: "slot",
		source: "(118:8) <FormGroup>",
		ctx
	});

	return block;
}

// (129:12) <Label for="exampleText">
function create_default_slot_16(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Текстовая область");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Текстовая область");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_16.name,
		type: "slot",
		source: "(129:12) <Label for=\\\"exampleText\\\">",
		ctx
	});

	return block;
}

// (128:8) <FormGroup>
function create_default_slot_15(ctx) {
	let t;
	let current;

	const label = new Label({
			props: {
				for: "exampleText",
				$$slots: { default: [create_default_slot_16] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const input = new Input({
			props: {
				type: "textarea",
				name: "text",
				id: "exampleText"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_15.name,
		type: "slot",
		source: "(128:8) <FormGroup>",
		ctx
	});

	return block;
}

// (133:12) <Label for="exampleFile">
function create_default_slot_14(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Файл");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Файл");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_14.name,
		type: "slot",
		source: "(133:12) <Label for=\\\"exampleFile\\\">",
		ctx
	});

	return block;
}

// (135:12) <FormText color="muted">
function create_default_slot_13(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Это какой-то блок-текст справки на уровне плейсхолдеров для вышеприведенного ввода.\r\n            Это немного легче и легко обертывается в новую линию.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Это какой-то блок-текст справки на уровне плейсхолдеров для вышеприведенного ввода.\r\n            Это немного легче и легко обертывается в новую линию.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13.name,
		type: "slot",
		source: "(135:12) <FormText color=\\\"muted\\\">",
		ctx
	});

	return block;
}

// (132:8) <FormGroup>
function create_default_slot_12(ctx) {
	let t0;
	let t1;
	let current;

	const label = new Label({
			props: {
				for: "exampleFile",
				$$slots: { default: [create_default_slot_14] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const input = new Input({
			props: {
				type: "file",
				name: "file",
				id: "exampleFile"
			},
			$$inline: true
		});

	const formtext = new FormText({
			props: {
				color: "muted",
				$$slots: { default: [create_default_slot_13] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t0 = space();
			create_component(input.$$.fragment);
			t1 = space();
			create_component(formtext.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(input.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(formtext.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(input, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(formtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
			const formtext_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				formtext_changes.$$scope = { dirty, ctx };
			}

			formtext.$set(formtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			transition_in(formtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			transition_out(formtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(input, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(formtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12.name,
		type: "slot",
		source: "(132:8) <FormGroup>",
		ctx
	});

	return block;
}

// (141:12) <Label check>
function create_default_slot_11(ctx) {
	let t;
	let current;
	const input = new Input({ props: { type: "radio" }, $$inline: true });

	const block = {
		c: function create() {
			create_component(input.$$.fragment);
			t = text("\r\n                Вариант первый - это и то, и то, и другое - обязательно включите, почему это здорово.");
		},
		l: function claim(nodes) {
			claim_component(input.$$.fragment, nodes);
			t = claim_text(nodes, "\r\n                Вариант первый - это и то, и то, и другое - обязательно включите, почему это здорово.");
		},
		m: function mount(target, anchor) {
			mount_component(input, target, anchor);
			insert_dev(target, t, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(input, detaching);
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11.name,
		type: "slot",
		source: "(141:12) <Label check>",
		ctx
	});

	return block;
}

// (140:8) <FormGroup check>
function create_default_slot_10(ctx) {
	let current;

	const label = new Label({
			props: {
				check: true,
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(140:8) <FormGroup check>",
		ctx
	});

	return block;
}

// (147:12) <Label check>
function create_default_slot_9(ctx) {
	let t;
	let current;

	const input = new Input({
			props: { type: "checkbox" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(input.$$.fragment);
			t = text("\r\n                Проверьте меня");
		},
		l: function claim(nodes) {
			claim_component(input.$$.fragment, nodes);
			t = claim_text(nodes, "\r\n                Проверьте меня");
		},
		m: function mount(target, anchor) {
			mount_component(input, target, anchor);
			insert_dev(target, t, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(input, detaching);
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(147:12) <Label check>",
		ctx
	});

	return block;
}

// (146:8) <FormGroup check>
function create_default_slot_8(ctx) {
	let current;

	const label = new Label({
			props: {
				check: true,
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(146:8) <FormGroup check>",
		ctx
	});

	return block;
}

// (31:4) <Form>
function create_default_slot_7(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;
	let t7;
	let t8;
	let t9;
	let t10;
	let t11;
	let t12;
	let t13;
	let t14;
	let current;

	const formgroup0 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_41] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const formgroup1 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_39] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const formgroup2 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_37] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const formgroup3 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_35] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const formgroup4 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_33] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const formgroup5 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_31] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const formgroup6 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_29] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const formgroup7 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_27] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const formgroup8 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_25] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const formgroup9 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_23] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const formgroup10 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_20] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const formgroup11 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_17] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const formgroup12 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_15] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const formgroup13 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_12] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const formgroup14 = new FormGroup({
			props: {
				check: true,
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const formgroup15 = new FormGroup({
			props: {
				check: true,
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(formgroup0.$$.fragment);
			t0 = space();
			create_component(formgroup1.$$.fragment);
			t1 = space();
			create_component(formgroup2.$$.fragment);
			t2 = space();
			create_component(formgroup3.$$.fragment);
			t3 = space();
			create_component(formgroup4.$$.fragment);
			t4 = space();
			create_component(formgroup5.$$.fragment);
			t5 = space();
			create_component(formgroup6.$$.fragment);
			t6 = space();
			create_component(formgroup7.$$.fragment);
			t7 = space();
			create_component(formgroup8.$$.fragment);
			t8 = space();
			create_component(formgroup9.$$.fragment);
			t9 = space();
			create_component(formgroup10.$$.fragment);
			t10 = space();
			create_component(formgroup11.$$.fragment);
			t11 = space();
			create_component(formgroup12.$$.fragment);
			t12 = space();
			create_component(formgroup13.$$.fragment);
			t13 = space();
			create_component(formgroup14.$$.fragment);
			t14 = space();
			create_component(formgroup15.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(formgroup0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(formgroup1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(formgroup2.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(formgroup3.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(formgroup4.$$.fragment, nodes);
			t4 = claim_space(nodes);
			claim_component(formgroup5.$$.fragment, nodes);
			t5 = claim_space(nodes);
			claim_component(formgroup6.$$.fragment, nodes);
			t6 = claim_space(nodes);
			claim_component(formgroup7.$$.fragment, nodes);
			t7 = claim_space(nodes);
			claim_component(formgroup8.$$.fragment, nodes);
			t8 = claim_space(nodes);
			claim_component(formgroup9.$$.fragment, nodes);
			t9 = claim_space(nodes);
			claim_component(formgroup10.$$.fragment, nodes);
			t10 = claim_space(nodes);
			claim_component(formgroup11.$$.fragment, nodes);
			t11 = claim_space(nodes);
			claim_component(formgroup12.$$.fragment, nodes);
			t12 = claim_space(nodes);
			claim_component(formgroup13.$$.fragment, nodes);
			t13 = claim_space(nodes);
			claim_component(formgroup14.$$.fragment, nodes);
			t14 = claim_space(nodes);
			claim_component(formgroup15.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(formgroup0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(formgroup1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(formgroup2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(formgroup3, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(formgroup4, target, anchor);
			insert_dev(target, t4, anchor);
			mount_component(formgroup5, target, anchor);
			insert_dev(target, t5, anchor);
			mount_component(formgroup6, target, anchor);
			insert_dev(target, t6, anchor);
			mount_component(formgroup7, target, anchor);
			insert_dev(target, t7, anchor);
			mount_component(formgroup8, target, anchor);
			insert_dev(target, t8, anchor);
			mount_component(formgroup9, target, anchor);
			insert_dev(target, t9, anchor);
			mount_component(formgroup10, target, anchor);
			insert_dev(target, t10, anchor);
			mount_component(formgroup11, target, anchor);
			insert_dev(target, t11, anchor);
			mount_component(formgroup12, target, anchor);
			insert_dev(target, t12, anchor);
			mount_component(formgroup13, target, anchor);
			insert_dev(target, t13, anchor);
			mount_component(formgroup14, target, anchor);
			insert_dev(target, t14, anchor);
			mount_component(formgroup15, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const formgroup0_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				formgroup0_changes.$$scope = { dirty, ctx };
			}

			formgroup0.$set(formgroup0_changes);
			const formgroup1_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				formgroup1_changes.$$scope = { dirty, ctx };
			}

			formgroup1.$set(formgroup1_changes);
			const formgroup2_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				formgroup2_changes.$$scope = { dirty, ctx };
			}

			formgroup2.$set(formgroup2_changes);
			const formgroup3_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				formgroup3_changes.$$scope = { dirty, ctx };
			}

			formgroup3.$set(formgroup3_changes);
			const formgroup4_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				formgroup4_changes.$$scope = { dirty, ctx };
			}

			formgroup4.$set(formgroup4_changes);
			const formgroup5_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				formgroup5_changes.$$scope = { dirty, ctx };
			}

			formgroup5.$set(formgroup5_changes);
			const formgroup6_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				formgroup6_changes.$$scope = { dirty, ctx };
			}

			formgroup6.$set(formgroup6_changes);
			const formgroup7_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				formgroup7_changes.$$scope = { dirty, ctx };
			}

			formgroup7.$set(formgroup7_changes);
			const formgroup8_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				formgroup8_changes.$$scope = { dirty, ctx };
			}

			formgroup8.$set(formgroup8_changes);
			const formgroup9_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				formgroup9_changes.$$scope = { dirty, ctx };
			}

			formgroup9.$set(formgroup9_changes);
			const formgroup10_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				formgroup10_changes.$$scope = { dirty, ctx };
			}

			formgroup10.$set(formgroup10_changes);
			const formgroup11_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				formgroup11_changes.$$scope = { dirty, ctx };
			}

			formgroup11.$set(formgroup11_changes);
			const formgroup12_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				formgroup12_changes.$$scope = { dirty, ctx };
			}

			formgroup12.$set(formgroup12_changes);
			const formgroup13_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				formgroup13_changes.$$scope = { dirty, ctx };
			}

			formgroup13.$set(formgroup13_changes);
			const formgroup14_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				formgroup14_changes.$$scope = { dirty, ctx };
			}

			formgroup14.$set(formgroup14_changes);
			const formgroup15_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				formgroup15_changes.$$scope = { dirty, ctx };
			}

			formgroup15.$set(formgroup15_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(formgroup0.$$.fragment, local);
			transition_in(formgroup1.$$.fragment, local);
			transition_in(formgroup2.$$.fragment, local);
			transition_in(formgroup3.$$.fragment, local);
			transition_in(formgroup4.$$.fragment, local);
			transition_in(formgroup5.$$.fragment, local);
			transition_in(formgroup6.$$.fragment, local);
			transition_in(formgroup7.$$.fragment, local);
			transition_in(formgroup8.$$.fragment, local);
			transition_in(formgroup9.$$.fragment, local);
			transition_in(formgroup10.$$.fragment, local);
			transition_in(formgroup11.$$.fragment, local);
			transition_in(formgroup12.$$.fragment, local);
			transition_in(formgroup13.$$.fragment, local);
			transition_in(formgroup14.$$.fragment, local);
			transition_in(formgroup15.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(formgroup0.$$.fragment, local);
			transition_out(formgroup1.$$.fragment, local);
			transition_out(formgroup2.$$.fragment, local);
			transition_out(formgroup3.$$.fragment, local);
			transition_out(formgroup4.$$.fragment, local);
			transition_out(formgroup5.$$.fragment, local);
			transition_out(formgroup6.$$.fragment, local);
			transition_out(formgroup7.$$.fragment, local);
			transition_out(formgroup8.$$.fragment, local);
			transition_out(formgroup9.$$.fragment, local);
			transition_out(formgroup10.$$.fragment, local);
			transition_out(formgroup11.$$.fragment, local);
			transition_out(formgroup12.$$.fragment, local);
			transition_out(formgroup13.$$.fragment, local);
			transition_out(formgroup14.$$.fragment, local);
			transition_out(formgroup15.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(formgroup0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(formgroup1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(formgroup2, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(formgroup3, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(formgroup4, detaching);
			if (detaching) detach_dev(t4);
			destroy_component(formgroup5, detaching);
			if (detaching) detach_dev(t5);
			destroy_component(formgroup6, detaching);
			if (detaching) detach_dev(t6);
			destroy_component(formgroup7, detaching);
			if (detaching) detach_dev(t7);
			destroy_component(formgroup8, detaching);
			if (detaching) detach_dev(t8);
			destroy_component(formgroup9, detaching);
			if (detaching) detach_dev(t9);
			destroy_component(formgroup10, detaching);
			if (detaching) detach_dev(t10);
			destroy_component(formgroup11, detaching);
			if (detaching) detach_dev(t11);
			destroy_component(formgroup12, detaching);
			if (detaching) detach_dev(t12);
			destroy_component(formgroup13, detaching);
			if (detaching) detach_dev(t13);
			destroy_component(formgroup14, detaching);
			if (detaching) detach_dev(t14);
			destroy_component(formgroup15, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(31:4) <Form>",
		ctx
	});

	return block;
}

// (27:0) <Row>
function create_default_slot_6(ctx) {
	let div;
	let h2;
	let t0;
	let t1;
	let h4;
	let t2;
	let t3;
	let current;

	const form = new Form({
			props: {
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			h2 = element("h2");
			t0 = text("Поле ввода");
			t1 = space();
			h4 = element("h4");
			t2 = text("Пример");
			t3 = space();
			create_component(form.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h2 = claim_element(div_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "Поле ввода");
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			h4 = claim_element(div_nodes, "H4", { class: true });
			var h4_nodes = children(h4);
			t2 = claim_text(h4_nodes, "Пример");
			h4_nodes.forEach(detach_dev);
			t3 = claim_space(div_nodes);
			claim_component(form.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "mt-4");
			add_location(h2, file, 28, 8, 1007);
			attr_dev(h4, "class", "mt-4");
			add_location(h4, file, 29, 8, 1049);
			attr_dev(div, "class", "col-xl-12");
			add_location(div, file, 27, 4, 974);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h2);
			append_dev(h2, t0);
			append_dev(div, t1);
			append_dev(div, h4);
			append_dev(h4, t2);
			append_dev(div, t3);
			mount_component(form, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const form_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				form_changes.$$scope = { dirty, ctx };
			}

			form.$set(form_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(form.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(form.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(form);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(27:0) <Row>",
		ctx
	});

	return block;
}

// (163:12) <Label>
function create_default_slot_5(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Начните печать тут");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Начните печать тут");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(163:12) <Label>",
		ctx
	});

	return block;
}

// (162:8) <FormGroup>
function create_default_slot_4(ctx) {
	let t;
	let updating_value;
	let current;

	const label = new Label({
			props: {
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	function input_value_binding(value) {
		/*input_value_binding*/ ctx[5].call(null, value);
	}

	let input_props = { type: "text" };

	if (/*inputValue*/ ctx[0] !== void 0) {
		input_props.value = /*inputValue*/ ctx[0];
	}

	const input = new Input({ props: input_props, $$inline: true });
	binding_callbacks.push(() => bind(input, "value", input_value_binding));

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
			const input_changes = {};

			if (!updating_value && dirty & /*inputValue*/ 1) {
				updating_value = true;
				input_changes.value = /*inputValue*/ ctx[0];
				add_flush_callback(() => updating_value = false);
			}

			input.$set(input_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(162:8) <FormGroup>",
		ctx
	});

	return block;
}

// (166:8) {#if inputValue}
function create_if_block_3(ctx) {
	let p;
	let t0;
	let t1;

	const block = {
		c: function create() {
			p = element("p");
			t0 = text("Вы напечатали: ");
			t1 = text(/*inputValue*/ ctx[0]);
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t0 = claim_text(p_nodes, "Вы напечатали: ");
			t1 = claim_text(p_nodes, /*inputValue*/ ctx[0]);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file, 166, 12, 6049);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t0);
			append_dev(p, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*inputValue*/ 1) set_data_dev(t1, /*inputValue*/ ctx[0]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(166:8) {#if inputValue}",
		ctx
	});

	return block;
}

// (157:0) <Row>
function create_default_slot_3(ctx) {
	let div;
	let h2;
	let t0;
	let t1;
	let h4;
	let t2;
	let t3;
	let p;
	let t4;
	let code;
	let t5;
	let t6;
	let t7;
	let current;

	const formgroup = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	let if_block = /*inputValue*/ ctx[0] && create_if_block_3(ctx);

	const block = {
		c: function create() {
			div = element("div");
			h2 = element("h2");
			t0 = text("Связывание: (Binding)");
			t1 = space();
			h4 = element("h4");
			t2 = text("Пример:");
			t3 = space();
			p = element("p");
			t4 = text("Рекомендуемый способ привязки значений к входам - ​​через ");
			code = element("code");
			t5 = text("bind: value = yourBind в фигурных скобках");
			t6 = space();
			create_component(formgroup.$$.fragment);
			t7 = space();
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h2 = claim_element(div_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "Связывание: (Binding)");
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			h4 = claim_element(div_nodes, "H4", { class: true });
			var h4_nodes = children(h4);
			t2 = claim_text(h4_nodes, "Пример:");
			h4_nodes.forEach(detach_dev);
			t3 = claim_space(div_nodes);
			p = claim_element(div_nodes, "P", {});
			var p_nodes = children(p);
			t4 = claim_text(p_nodes, "Рекомендуемый способ привязки значений к входам - ​​через ");
			code = claim_element(p_nodes, "CODE", {});
			var code_nodes = children(code);
			t5 = claim_text(code_nodes, "bind: value = yourBind в фигурных скобках");
			code_nodes.forEach(detach_dev);
			p_nodes.forEach(detach_dev);
			t6 = claim_space(div_nodes);
			claim_component(formgroup.$$.fragment, div_nodes);
			t7 = claim_space(div_nodes);
			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "mt-4");
			add_location(h2, file, 158, 8, 5647);
			attr_dev(h4, "class", "mt-4");
			add_location(h4, file, 159, 8, 5700);
			add_location(code, file, 160, 69, 5800);
			add_location(p, file, 160, 8, 5739);
			attr_dev(div, "class", "col-xl-12");
			add_location(div, file, 157, 4, 5614);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h2);
			append_dev(h2, t0);
			append_dev(div, t1);
			append_dev(div, h4);
			append_dev(h4, t2);
			append_dev(div, t3);
			append_dev(div, p);
			append_dev(p, t4);
			append_dev(p, code);
			append_dev(code, t5);
			append_dev(div, t6);
			mount_component(formgroup, div, null);
			append_dev(div, t7);
			if (if_block) if_block.m(div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const formgroup_changes = {};

			if (dirty & /*$$scope, inputValue*/ 1025) {
				formgroup_changes.$$scope = { dirty, ctx };
			}

			formgroup.$set(formgroup_changes);

			if (/*inputValue*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_3(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(formgroup.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(formgroup.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(formgroup);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(157:0) <Row>",
		ctx
	});

	return block;
}

// (179:12) <Label>
function create_default_slot_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Начните печать тут");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Начните печать тут");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(179:12) <Label>",
		ctx
	});

	return block;
}

// (178:8) <FormGroup>
function create_default_slot_1(ctx) {
	let t;
	let current;

	const label = new Label({
			props: {
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const input = new Input({
			props: {
				type: "text",
				value: /*inputValueEventBind*/ ctx[1]
			},
			$$inline: true
		});

	input.$on("blur", /*blur_handler*/ ctx[6]);
	input.$on("focus", /*focus_handler*/ ctx[7]);
	input.$on("change", /*change_handler*/ ctx[8]);
	input.$on("input", /*input_handler*/ ctx[9]);

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
			const input_changes = {};
			if (dirty & /*inputValueEventBind*/ 2) input_changes.value = /*inputValueEventBind*/ ctx[1];
			input.$set(input_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(178:8) <FormGroup>",
		ctx
	});

	return block;
}

// (188:8) {#if changeValue}
function create_if_block_2(ctx) {
	let p;
	let code;
	let t0;
	let t1;
	let t2;

	const block = {
		c: function create() {
			p = element("p");
			code = element("code");
			t0 = text("on:change");
			t1 = text(" говорит, что ты набрал: ");
			t2 = text(/*changeValue*/ ctx[2]);
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			code = claim_element(p_nodes, "CODE", {});
			var code_nodes = children(code);
			t0 = claim_text(code_nodes, "on:change");
			code_nodes.forEach(detach_dev);
			t1 = claim_text(p_nodes, " говорит, что ты набрал: ");
			t2 = claim_text(p_nodes, /*changeValue*/ ctx[2]);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(code, file, 188, 15, 7174);
			add_location(p, file, 188, 12, 7171);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, code);
			append_dev(code, t0);
			append_dev(p, t1);
			append_dev(p, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*changeValue*/ 4) set_data_dev(t2, /*changeValue*/ ctx[2]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(188:8) {#if changeValue}",
		ctx
	});

	return block;
}

// (191:8) {#if inputValueEventBind}
function create_if_block_1(ctx) {
	let p;
	let code;
	let t0;
	let t1;
	let t2;

	const block = {
		c: function create() {
			p = element("p");
			code = element("code");
			t0 = text("on:input");
			t1 = text(" говорит, что ты печатаешь: ");
			t2 = text(/*inputValueEventBind*/ ctx[1]);
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			code = claim_element(p_nodes, "CODE", {});
			var code_nodes = children(code);
			t0 = claim_text(code_nodes, "on:input");
			code_nodes.forEach(detach_dev);
			t1 = claim_text(p_nodes, " говорит, что ты печатаешь: ");
			t2 = claim_text(p_nodes, /*inputValueEventBind*/ ctx[1]);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(code, file, 191, 15, 7305);
			add_location(p, file, 191, 12, 7302);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, code);
			append_dev(code, t0);
			append_dev(p, t1);
			append_dev(p, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*inputValueEventBind*/ 2) set_data_dev(t2, /*inputValueEventBind*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(191:8) {#if inputValueEventBind}",
		ctx
	});

	return block;
}

// (196:8) {:else}
function create_else_block(ctx) {
	let p;
	let code;
	let t0;
	let t1;

	const block = {
		c: function create() {
			p = element("p");
			code = element("code");
			t0 = text("on:focus");
			t1 = text(" говорит, что ты навел фокус на поле ввода.");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			code = claim_element(p_nodes, "CODE", {});
			var code_nodes = children(code);
			t0 = claim_text(code_nodes, "on:focus");
			code_nodes.forEach(detach_dev);
			t1 = claim_text(p_nodes, " говорит, что ты навел фокус на поле ввода.");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(code, file, 196, 15, 7538);
			add_location(p, file, 196, 12, 7535);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, code);
			append_dev(code, t0);
			append_dev(p, t1);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(196:8) {:else}",
		ctx
	});

	return block;
}

// (194:8) {#if !focused}
function create_if_block(ctx) {
	let p;
	let code;
	let t0;
	let t1;

	const block = {
		c: function create() {
			p = element("p");
			code = element("code");
			t0 = text("on:blur");
			t1 = text(" говорит, что ты не убрал фокус с поля ввода.");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			code = claim_element(p_nodes, "CODE", {});
			var code_nodes = children(code);
			t0 = claim_text(code_nodes, "on:blur");
			code_nodes.forEach(detach_dev);
			t1 = claim_text(p_nodes, " говорит, что ты не убрал фокус с поля ввода.");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(code, file, 194, 15, 7435);
			add_location(p, file, 194, 12, 7432);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, code);
			append_dev(code, t0);
			append_dev(p, t1);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(194:8) {#if !focused}",
		ctx
	});

	return block;
}

// (171:0) <Row>
function create_default_slot(ctx) {
	let div;
	let h2;
	let t0;
	let t1;
	let h4;
	let t2;
	let t3;
	let p;
	let t4;
	let code;
	let t5;
	let t6;
	let a;
	let t7;
	let t8;
	let t9;
	let t10;
	let t11;
	let current;

	const formgroup = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	let if_block0 = /*changeValue*/ ctx[2] && create_if_block_2(ctx);
	let if_block1 = /*inputValueEventBind*/ ctx[1] && create_if_block_1(ctx);

	function select_block_type(ctx, dirty) {
		if (!/*focused*/ ctx[3]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block2 = current_block_type(ctx);

	const block = {
		c: function create() {
			div = element("div");
			h2 = element("h2");
			t0 = text("Привязка событий (Event Binding)");
			t1 = space();
			h4 = element("h4");
			t2 = text("Пример:");
			t3 = space();
			p = element("p");
			t4 = text("Вы также можете связать непосредственно с обработчиками событий: ");
			code = element("code");
			t5 = text("on:blur on:focus on:keydown on:keyup on:change on:input");
			t6 = text("\r\n            но это не рекомендуется, если вы просто привязаны к простому значению - Svelte не реагирует. :-)\r\n            Если вам нужно больше экзотических событий, пожалуйста, следуйте номер ");
			a = element("a");
			t7 = text("36.");
			t8 = space();
			create_component(formgroup.$$.fragment);
			t9 = space();
			if (if_block0) if_block0.c();
			t10 = space();
			if (if_block1) if_block1.c();
			t11 = space();
			if_block2.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h2 = claim_element(div_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "Привязка событий (Event Binding)");
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			h4 = claim_element(div_nodes, "H4", { class: true });
			var h4_nodes = children(h4);
			t2 = claim_text(h4_nodes, "Пример:");
			h4_nodes.forEach(detach_dev);
			t3 = claim_space(div_nodes);
			p = claim_element(div_nodes, "P", {});
			var p_nodes = children(p);
			t4 = claim_text(p_nodes, "Вы также можете связать непосредственно с обработчиками событий: ");
			code = claim_element(p_nodes, "CODE", {});
			var code_nodes = children(code);
			t5 = claim_text(code_nodes, "on:blur on:focus on:keydown on:keyup on:change on:input");
			code_nodes.forEach(detach_dev);
			t6 = claim_text(p_nodes, "\r\n            но это не рекомендуется, если вы просто привязаны к простому значению - Svelte не реагирует. :-)\r\n            Если вам нужно больше экзотических событий, пожалуйста, следуйте номер ");
			a = claim_element(p_nodes, "A", { href: true });
			var a_nodes = children(a);
			t7 = claim_text(a_nodes, "36.");
			a_nodes.forEach(detach_dev);
			p_nodes.forEach(detach_dev);
			t8 = claim_space(div_nodes);
			claim_component(formgroup.$$.fragment, div_nodes);
			t9 = claim_space(div_nodes);
			if (if_block0) if_block0.l(div_nodes);
			t10 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			t11 = claim_space(div_nodes);
			if_block2.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "mt-4");
			add_location(h2, file, 172, 8, 6164);
			attr_dev(h4, "class", "mt-4");
			add_location(h4, file, 173, 8, 6228);
			add_location(code, file, 174, 76, 6335);
			attr_dev(a, "href", "https://github.com/bestguy/sveltestrap/issues/36");
			add_location(a, file, 176, 83, 6598);
			add_location(p, file, 174, 8, 6267);
			attr_dev(div, "class", "col-xl-12");
			add_location(div, file, 171, 4, 6131);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h2);
			append_dev(h2, t0);
			append_dev(div, t1);
			append_dev(div, h4);
			append_dev(h4, t2);
			append_dev(div, t3);
			append_dev(div, p);
			append_dev(p, t4);
			append_dev(p, code);
			append_dev(code, t5);
			append_dev(p, t6);
			append_dev(p, a);
			append_dev(a, t7);
			append_dev(div, t8);
			mount_component(formgroup, div, null);
			append_dev(div, t9);
			if (if_block0) if_block0.m(div, null);
			append_dev(div, t10);
			if (if_block1) if_block1.m(div, null);
			append_dev(div, t11);
			if_block2.m(div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const formgroup_changes = {};

			if (dirty & /*$$scope, inputValueEventBind, focused, changeValue*/ 1038) {
				formgroup_changes.$$scope = { dirty, ctx };
			}

			formgroup.$set(formgroup_changes);

			if (/*changeValue*/ ctx[2]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					if_block0.m(div, t10);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*inputValueEventBind*/ ctx[1]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					if_block1.m(div, t11);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
				if_block2.d(1);
				if_block2 = current_block_type(ctx);

				if (if_block2) {
					if_block2.c();
					if_block2.m(div, null);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(formgroup.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(formgroup.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(formgroup);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if_block2.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(171:0) <Row>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let title_value;
	let t0;
	let h1;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let current;
	document.title = title_value = /*title*/ ctx[4];

	const breadcrumb = new Breadcrumb({
			props: {
				class: "mb-4",
				$$slots: { default: [create_default_slot_43] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row0 = new Row({
			props: {
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row1 = new Row({
			props: {
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row2 = new Row({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("Поле ввода Input");
			t2 = space();
			create_component(breadcrumb.$$.fragment);
			t3 = space();
			create_component(row0.$$.fragment);
			t4 = space();
			create_component(row1.$$.fragment);
			t5 = space();
			create_component(row2.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-46oba3\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Поле ввода Input");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			claim_component(breadcrumb.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(row0.$$.fragment, nodes);
			t4 = claim_space(nodes);
			claim_component(row1.$$.fragment, nodes);
			t5 = claim_space(nodes);
			claim_component(row2.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "mt-4");
			add_location(h1, file, 22, 0, 819);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			mount_component(breadcrumb, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(row0, target, anchor);
			insert_dev(target, t4, anchor);
			mount_component(row1, target, anchor);
			insert_dev(target, t5, anchor);
			mount_component(row2, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*title*/ 16) && title_value !== (title_value = /*title*/ ctx[4])) {
				document.title = title_value;
			}

			const breadcrumb_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				breadcrumb_changes.$$scope = { dirty, ctx };
			}

			breadcrumb.$set(breadcrumb_changes);
			const row0_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				row0_changes.$$scope = { dirty, ctx };
			}

			row0.$set(row0_changes);
			const row1_changes = {};

			if (dirty & /*$$scope, inputValue*/ 1025) {
				row1_changes.$$scope = { dirty, ctx };
			}

			row1.$set(row1_changes);
			const row2_changes = {};

			if (dirty & /*$$scope, focused, inputValueEventBind, changeValue*/ 1038) {
				row2_changes.$$scope = { dirty, ctx };
			}

			row2.$set(row2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(breadcrumb.$$.fragment, local);
			transition_in(row0.$$.fragment, local);
			transition_in(row1.$$.fragment, local);
			transition_in(row2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(breadcrumb.$$.fragment, local);
			transition_out(row0.$$.fragment, local);
			transition_out(row1.$$.fragment, local);
			transition_out(row2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			destroy_component(breadcrumb, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(row0, detaching);
			if (detaching) detach_dev(t4);
			destroy_component(row1, detaching);
			if (detaching) detach_dev(t5);
			destroy_component(row2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let title = "Инпуты и поля ввода | UI | Пользовательский Интерфейс";
	let inputValue = "";
	let inputValueEventBind = "";
	let changeValue = "";
	let focused = false;

	function input_value_binding(value) {
		inputValue = value;
		$$invalidate(0, inputValue);
	}

	const blur_handler = () => $$invalidate(3, focused = false);
	const focus_handler = () => $$invalidate(3, focused = true);
	const change_handler = e => $$invalidate(2, changeValue = e.target.value);
	const input_handler = e => $$invalidate(1, inputValueEventBind = e.target.value);

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("title" in $$props) $$invalidate(4, title = $$props.title);
		if ("inputValue" in $$props) $$invalidate(0, inputValue = $$props.inputValue);
		if ("inputValueEventBind" in $$props) $$invalidate(1, inputValueEventBind = $$props.inputValueEventBind);
		if ("changeValue" in $$props) $$invalidate(2, changeValue = $$props.changeValue);
		if ("focused" in $$props) $$invalidate(3, focused = $$props.focused);
	};

	return [
		inputValue,
		inputValueEventBind,
		changeValue,
		focused,
		title,
		input_value_binding,
		blur_handler,
		focus_handler,
		change_handler,
		input_handler
	];
}

class Input_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Input_1",
			options,
			id: create_fragment.name
		});
	}
}

export default Input_1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
