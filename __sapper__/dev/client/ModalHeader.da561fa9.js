import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, c as clean, N as onMount, a2 as onDestroy, a7 as afterUpdate, a as assign, e as exclude_internal_props, b as clsx, f as element, g as claim_element, h as children, j as detach_dev, m as set_attributes, l as add_location, n as insert_dev, r as transition_in, p as group_outros, t as transition_out, q as check_outros, u as get_spread_update, v as create_slot, J as space, K as claim_space, k as attr_dev, O as set_style, o as append_dev, C as listen_dev, w as get_slot_context, x as get_slot_changes, _ as add_render_callback, $ as create_bidirectional_transition, a0 as fade, a4 as run_all, E as empty, a8 as getOriginalBodyPadding, a9 as conditionallyUpdateScrollbar, aa as setScrollbarWidth, a1 as browserEvent, ab as binding_callbacks, y as text, z as claim_text, A as set_data_dev, B as noop$1 } from './client.4ee71700.js';

/* node_modules\sveltestrap\src\Modal.svelte generated by Svelte v3.18.1 */

const file = "node_modules\\sveltestrap\\src\\Modal.svelte";
const get_external_slot_changes = dirty => ({});
const get_external_slot_context = ctx => ({});

// (212:0) {#if _isMounted}
function create_if_block(ctx) {
	let div;
	let current;
	let if_block = /*isOpen*/ ctx[0] && create_if_block_1(ctx);

	let div_levels = [
		/*props*/ ctx[13],
		{ class: /*wrapClassName*/ ctx[4] },
		{ tabindex: "-1" },
		{
			style: "position: relative; z-index: " + /*zIndex*/ ctx[9]
		}
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, tabindex: true, style: true });
			var div_nodes = children(div);
			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(div, div_data);
			add_location(div, file, 212, 2, 4520);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if (if_block) if_block.m(div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*isOpen*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			set_attributes(div, get_spread_update(div_levels, [
				dirty[0] & /*props*/ 8192 && /*props*/ ctx[13],
				dirty[0] & /*wrapClassName*/ 16 && { class: /*wrapClassName*/ ctx[4] },
				{ tabindex: "-1" },
				dirty[0] & /*zIndex*/ 512 && {
					style: "position: relative; z-index: " + /*zIndex*/ ctx[9]
				}
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(212:0) {#if _isMounted}",
		ctx
	});

	return block;
}

// (218:4) {#if isOpen}
function create_if_block_1(ctx) {
	let div2;
	let div1;
	let div0;
	let t0;
	let div0_class_value;
	let div2_class_value;
	let div2_transition;
	let t1;
	let div3;
	let div3_class_value;
	let div3_transition;
	let current;
	let dispose;
	const external_slot_template = /*$$slots*/ ctx[45].external;
	const external_slot = create_slot(external_slot_template, ctx, /*$$scope*/ ctx[44], get_external_slot_context);
	const default_slot_template = /*$$slots*/ ctx[45].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[44], null);

	const block = {
		c: function create() {
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			if (external_slot) external_slot.c();
			t0 = space();
			if (default_slot) default_slot.c();
			t1 = space();
			div3 = element("div");
			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", {
				ariaLabelledby: true,
				class: true,
				role: true,
				style: true
			});

			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true, role: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			if (external_slot) external_slot.l(div0_nodes);
			t0 = claim_space(div0_nodes);
			if (default_slot) default_slot.l(div0_nodes);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			div3 = claim_element(nodes, "DIV", { class: true });
			children(div3).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", div0_class_value = clsx("modal-content", /*contentClassName*/ ctx[7]));
			add_location(div0, file, 229, 10, 5109);
			attr_dev(div1, "class", /*classes*/ ctx[12]);
			attr_dev(div1, "role", "document");
			add_location(div1, file, 228, 8, 5041);
			attr_dev(div2, "arialabelledby", /*labelledBy*/ ctx[3]);
			attr_dev(div2, "class", div2_class_value = clsx("modal", "show", /*modalClassName*/ ctx[5]));
			attr_dev(div2, "role", "dialog");
			set_style(div2, "display", "block");
			add_location(div2, file, 218, 6, 4658);
			attr_dev(div3, "class", div3_class_value = clsx("modal-backdrop", "show", /*backdropClassName*/ ctx[6]));
			add_location(div3, file, 235, 6, 5272);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div1);
			append_dev(div1, div0);

			if (external_slot) {
				external_slot.m(div0, null);
			}

			append_dev(div0, t0);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			/*div1_binding*/ ctx[46](div1);
			insert_dev(target, t1, anchor);
			insert_dev(target, div3, anchor);
			current = true;

			dispose = [
				listen_dev(div2, "introend", /*onModalOpened*/ ctx[15], false, false, false),
				listen_dev(div2, "outroend", /*onModalClosed*/ ctx[16], false, false, false),
				listen_dev(div2, "click", /*handleBackdropClick*/ ctx[14], false, false, false),
				listen_dev(div2, "mousedown", /*handleBackdropMouseDown*/ ctx[17], false, false, false)
			];
		},
		p: function update(ctx, dirty) {
			if (external_slot && external_slot.p && dirty[1] & /*$$scope*/ 8192) {
				external_slot.p(get_slot_context(external_slot_template, ctx, /*$$scope*/ ctx[44], get_external_slot_context), get_slot_changes(external_slot_template, /*$$scope*/ ctx[44], dirty, get_external_slot_changes));
			}

			if (default_slot && default_slot.p && dirty[1] & /*$$scope*/ 8192) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[44], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[44], dirty, null));
			}

			if (!current || dirty[0] & /*contentClassName*/ 128 && div0_class_value !== (div0_class_value = clsx("modal-content", /*contentClassName*/ ctx[7]))) {
				attr_dev(div0, "class", div0_class_value);
			}

			if (!current || dirty[0] & /*classes*/ 4096) {
				attr_dev(div1, "class", /*classes*/ ctx[12]);
			}

			if (!current || dirty[0] & /*labelledBy*/ 8) {
				attr_dev(div2, "arialabelledby", /*labelledBy*/ ctx[3]);
			}

			if (!current || dirty[0] & /*modalClassName*/ 32 && div2_class_value !== (div2_class_value = clsx("modal", "show", /*modalClassName*/ ctx[5]))) {
				attr_dev(div2, "class", div2_class_value);
			}

			if (!current || dirty[0] & /*backdropClassName*/ 64 && div3_class_value !== (div3_class_value = clsx("modal-backdrop", "show", /*backdropClassName*/ ctx[6]))) {
				attr_dev(div3, "class", div3_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(external_slot, local);
			transition_in(default_slot, local);

			add_render_callback(() => {
				if (!div2_transition) div2_transition = create_bidirectional_transition(
					div2,
					fade,
					{
						duration: /*fade*/ ctx[8] && /*duration*/ ctx[1]
					},
					true
				);

				div2_transition.run(1);
			});

			add_render_callback(() => {
				if (!div3_transition) div3_transition = create_bidirectional_transition(
					div3,
					fade,
					{
						duration: /*fade*/ ctx[8] && /*backdropDuration*/ ctx[2]
					},
					true
				);

				div3_transition.run(1);
			});

			current = true;
		},
		o: function outro(local) {
			transition_out(external_slot, local);
			transition_out(default_slot, local);

			if (!div2_transition) div2_transition = create_bidirectional_transition(
				div2,
				fade,
				{
					duration: /*fade*/ ctx[8] && /*duration*/ ctx[1]
				},
				false
			);

			div2_transition.run(0);

			if (!div3_transition) div3_transition = create_bidirectional_transition(
				div3,
				fade,
				{
					duration: /*fade*/ ctx[8] && /*backdropDuration*/ ctx[2]
				},
				false
			);

			div3_transition.run(0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			if (external_slot) external_slot.d(detaching);
			if (default_slot) default_slot.d(detaching);
			/*div1_binding*/ ctx[46](null);
			if (detaching && div2_transition) div2_transition.end();
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div3);
			if (detaching && div3_transition) div3_transition.end();
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(218:4) {#if isOpen}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*_isMounted*/ ctx[10] && create_if_block(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*_isMounted*/ ctx[10]) {
				if (if_block) {
					if_block.p(ctx, dirty);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

let openCount = 0;
const dialogBaseClass = "modal-dialog";

function noop() {
	
}

function instance($$self, $$props, $$invalidate) {
	let { class: className = "" } = $$props;
	let { isOpen } = $$props;
	let { autoFocus = true } = $$props;
	let { centered = false } = $$props;
	let { duration = 0 } = $$props;
	let { backdropDuration = duration } = $$props;
	let { scrollable = false } = $$props;
	let { size = "" } = $$props;
	let { toggle = undefined } = $$props;
	let { labelledBy = "" } = $$props;
	let { backdrop = true } = $$props;
	let { onEnter = undefined } = $$props;
	let { onExit = undefined } = $$props;
	let { onOpened = noop } = $$props;
	let { onClosed = noop } = $$props;
	let { wrapClassName = "" } = $$props;
	let { modalClassName = "" } = $$props;
	let { backdropClassName = "" } = $$props;
	let { contentClassName = "" } = $$props;
	let { fade = true } = $$props;
	let { zIndex = 1050 } = $$props;
	let { unmountOnClose = true } = $$props;
	let { returnFocusAfterClose = true } = $$props;
	const props = clean($$props);
	let hasOpened = false;
	let _isMounted = false;
	let _triggeringElement;
	let _originalBodyPadding;
	let _lastIsOpen = isOpen;
	let _lastHasOpened = hasOpened;
	let _dialog;
	let _mouseDownElement;
	let _removeEscListener;

	onMount(() => {
		if (isOpen) {
			init();
			hasOpened = true;
		}

		if (typeof onEnter === "function") {
			onEnter();
		}

		if (hasOpened && autoFocus) {
			setFocus();
		}
	});

	onDestroy(() => {
		if (typeof onExit === "function") {
			onExit();
		}

		destroy();

		if (hasOpened) {
			close();
		}
	});

	afterUpdate(() => {
		if (isOpen && !_lastIsOpen) {
			init();
			hasOpened = true;
		}

		if (autoFocus && hasOpened && !_lastHasOpened) {
			setFocus();
		}

		_lastIsOpen = isOpen;
		_lastHasOpened = hasOpened;
	});

	function setFocus() {
		if (_dialog && _dialog.parentNode && typeof _dialog.parentNode.focus === "function") {
			_dialog.parentNode.focus();
		}
	}

	function init() {
		try {
			_triggeringElement = document.activeElement;
		} catch(err) {
			_triggeringElement = null;
		}

		_originalBodyPadding = getOriginalBodyPadding();
		conditionallyUpdateScrollbar();

		if (openCount === 0) {
			document.body.className = clsx(document.body.className, "modal-open");
		}

		++openCount;
		$$invalidate(10, _isMounted = true);
	}

	function manageFocusAfterClose() {
		if (_triggeringElement) {
			if (typeof _triggeringElement.focus === "function" && returnFocusAfterClose) {
				_triggeringElement.focus();
			}

			_triggeringElement = null;
		}
	}

	function destroy() {
		manageFocusAfterClose();
	}

	function close() {
		if (openCount <= 1) {
			const modalOpenClassName = "modal-open";
			const modalOpenClassNameRegex = new RegExp(`(^| )${modalOpenClassName}( |$)`);
			document.body.className = document.body.className.replace(modalOpenClassNameRegex, " ").trim();
		}

		manageFocusAfterClose();
		openCount = Math.max(0, openCount - 1);
		setScrollbarWidth(_originalBodyPadding);
	}

	function handleBackdropClick(e) {
		if (e.target === _mouseDownElement) {
			e.stopPropagation();

			if (!isOpen || !backdrop) {
				return;
			}

			const backdropElem = _dialog ? _dialog.parentNode : null;

			if (backdropElem && e.target === backdropElem && toggle) {
				toggle(e);
			}
		}
	}

	function onModalOpened() {
		_removeEscListener = browserEvent(document, "keydown", event => {
			if (event.key && event.key === "Escape") {
				toggle(event);
			}
		});

		onOpened();
	}

	function onModalClosed() {
		onClosed();

		if (_removeEscListener) {
			_removeEscListener();
		}

		if (unmountOnClose) {
			destroy();
		}

		close();

		if (_isMounted) {
			hasOpened = false;
		}

		$$invalidate(10, _isMounted = false);
	}

	function handleBackdropMouseDown(e) {
		_mouseDownElement = e.target;
	}

	let { $$slots = {}, $$scope } = $$props;

	function div1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			$$invalidate(11, _dialog = $$value);
		});
	}

	$$self.$set = $$new_props => {
		$$invalidate(43, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(18, className = $$new_props.class);
		if ("isOpen" in $$new_props) $$invalidate(0, isOpen = $$new_props.isOpen);
		if ("autoFocus" in $$new_props) $$invalidate(19, autoFocus = $$new_props.autoFocus);
		if ("centered" in $$new_props) $$invalidate(20, centered = $$new_props.centered);
		if ("duration" in $$new_props) $$invalidate(1, duration = $$new_props.duration);
		if ("backdropDuration" in $$new_props) $$invalidate(2, backdropDuration = $$new_props.backdropDuration);
		if ("scrollable" in $$new_props) $$invalidate(21, scrollable = $$new_props.scrollable);
		if ("size" in $$new_props) $$invalidate(22, size = $$new_props.size);
		if ("toggle" in $$new_props) $$invalidate(23, toggle = $$new_props.toggle);
		if ("labelledBy" in $$new_props) $$invalidate(3, labelledBy = $$new_props.labelledBy);
		if ("backdrop" in $$new_props) $$invalidate(24, backdrop = $$new_props.backdrop);
		if ("onEnter" in $$new_props) $$invalidate(25, onEnter = $$new_props.onEnter);
		if ("onExit" in $$new_props) $$invalidate(26, onExit = $$new_props.onExit);
		if ("onOpened" in $$new_props) $$invalidate(27, onOpened = $$new_props.onOpened);
		if ("onClosed" in $$new_props) $$invalidate(28, onClosed = $$new_props.onClosed);
		if ("wrapClassName" in $$new_props) $$invalidate(4, wrapClassName = $$new_props.wrapClassName);
		if ("modalClassName" in $$new_props) $$invalidate(5, modalClassName = $$new_props.modalClassName);
		if ("backdropClassName" in $$new_props) $$invalidate(6, backdropClassName = $$new_props.backdropClassName);
		if ("contentClassName" in $$new_props) $$invalidate(7, contentClassName = $$new_props.contentClassName);
		if ("fade" in $$new_props) $$invalidate(8, fade = $$new_props.fade);
		if ("zIndex" in $$new_props) $$invalidate(9, zIndex = $$new_props.zIndex);
		if ("unmountOnClose" in $$new_props) $$invalidate(29, unmountOnClose = $$new_props.unmountOnClose);
		if ("returnFocusAfterClose" in $$new_props) $$invalidate(30, returnFocusAfterClose = $$new_props.returnFocusAfterClose);
		if ("$$scope" in $$new_props) $$invalidate(44, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => {
		return {
			openCount,
			className,
			isOpen,
			autoFocus,
			centered,
			duration,
			backdropDuration,
			scrollable,
			size,
			toggle,
			labelledBy,
			backdrop,
			onEnter,
			onExit,
			onOpened,
			onClosed,
			wrapClassName,
			modalClassName,
			backdropClassName,
			contentClassName,
			fade,
			zIndex,
			unmountOnClose,
			returnFocusAfterClose,
			hasOpened,
			_isMounted,
			_triggeringElement,
			_originalBodyPadding,
			_lastIsOpen,
			_lastHasOpened,
			_dialog,
			_mouseDownElement,
			_removeEscListener,
			classes
		};
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(43, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(18, className = $$new_props.className);
		if ("isOpen" in $$props) $$invalidate(0, isOpen = $$new_props.isOpen);
		if ("autoFocus" in $$props) $$invalidate(19, autoFocus = $$new_props.autoFocus);
		if ("centered" in $$props) $$invalidate(20, centered = $$new_props.centered);
		if ("duration" in $$props) $$invalidate(1, duration = $$new_props.duration);
		if ("backdropDuration" in $$props) $$invalidate(2, backdropDuration = $$new_props.backdropDuration);
		if ("scrollable" in $$props) $$invalidate(21, scrollable = $$new_props.scrollable);
		if ("size" in $$props) $$invalidate(22, size = $$new_props.size);
		if ("toggle" in $$props) $$invalidate(23, toggle = $$new_props.toggle);
		if ("labelledBy" in $$props) $$invalidate(3, labelledBy = $$new_props.labelledBy);
		if ("backdrop" in $$props) $$invalidate(24, backdrop = $$new_props.backdrop);
		if ("onEnter" in $$props) $$invalidate(25, onEnter = $$new_props.onEnter);
		if ("onExit" in $$props) $$invalidate(26, onExit = $$new_props.onExit);
		if ("onOpened" in $$props) $$invalidate(27, onOpened = $$new_props.onOpened);
		if ("onClosed" in $$props) $$invalidate(28, onClosed = $$new_props.onClosed);
		if ("wrapClassName" in $$props) $$invalidate(4, wrapClassName = $$new_props.wrapClassName);
		if ("modalClassName" in $$props) $$invalidate(5, modalClassName = $$new_props.modalClassName);
		if ("backdropClassName" in $$props) $$invalidate(6, backdropClassName = $$new_props.backdropClassName);
		if ("contentClassName" in $$props) $$invalidate(7, contentClassName = $$new_props.contentClassName);
		if ("fade" in $$props) $$invalidate(8, fade = $$new_props.fade);
		if ("zIndex" in $$props) $$invalidate(9, zIndex = $$new_props.zIndex);
		if ("unmountOnClose" in $$props) $$invalidate(29, unmountOnClose = $$new_props.unmountOnClose);
		if ("returnFocusAfterClose" in $$props) $$invalidate(30, returnFocusAfterClose = $$new_props.returnFocusAfterClose);
		if ("hasOpened" in $$props) hasOpened = $$new_props.hasOpened;
		if ("_isMounted" in $$props) $$invalidate(10, _isMounted = $$new_props._isMounted);
		if ("_triggeringElement" in $$props) _triggeringElement = $$new_props._triggeringElement;
		if ("_originalBodyPadding" in $$props) _originalBodyPadding = $$new_props._originalBodyPadding;
		if ("_lastIsOpen" in $$props) _lastIsOpen = $$new_props._lastIsOpen;
		if ("_lastHasOpened" in $$props) _lastHasOpened = $$new_props._lastHasOpened;
		if ("_dialog" in $$props) $$invalidate(11, _dialog = $$new_props._dialog);
		if ("_mouseDownElement" in $$props) _mouseDownElement = $$new_props._mouseDownElement;
		if ("_removeEscListener" in $$props) _removeEscListener = $$new_props._removeEscListener;
		if ("classes" in $$props) $$invalidate(12, classes = $$new_props.classes);
	};

	let classes;

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*className, size, centered, scrollable*/ 7602176) {
			 $$invalidate(12, classes = clsx(dialogBaseClass, className, {
				[`modal-${size}`]: size,
				[`${dialogBaseClass}-centered`]: centered,
				[`${dialogBaseClass}-scrollable`]: scrollable
			}));
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		isOpen,
		duration,
		backdropDuration,
		labelledBy,
		wrapClassName,
		modalClassName,
		backdropClassName,
		contentClassName,
		fade,
		zIndex,
		_isMounted,
		_dialog,
		classes,
		props,
		handleBackdropClick,
		onModalOpened,
		onModalClosed,
		handleBackdropMouseDown,
		className,
		autoFocus,
		centered,
		scrollable,
		size,
		toggle,
		backdrop,
		onEnter,
		onExit,
		onOpened,
		onClosed,
		unmountOnClose,
		returnFocusAfterClose,
		hasOpened,
		_triggeringElement,
		_originalBodyPadding,
		_lastIsOpen,
		_lastHasOpened,
		_mouseDownElement,
		_removeEscListener,
		setFocus,
		init,
		manageFocusAfterClose,
		destroy,
		close,
		$$props,
		$$scope,
		$$slots,
		div1_binding
	];
}

class Modal extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				class: 18,
				isOpen: 0,
				autoFocus: 19,
				centered: 20,
				duration: 1,
				backdropDuration: 2,
				scrollable: 21,
				size: 22,
				toggle: 23,
				labelledBy: 3,
				backdrop: 24,
				onEnter: 25,
				onExit: 26,
				onOpened: 27,
				onClosed: 28,
				wrapClassName: 4,
				modalClassName: 5,
				backdropClassName: 6,
				contentClassName: 7,
				fade: 8,
				zIndex: 9,
				unmountOnClose: 29,
				returnFocusAfterClose: 30
			},
			[-1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Modal",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*isOpen*/ ctx[0] === undefined && !("isOpen" in props)) {
			console.warn("<Modal> was created without expected prop 'isOpen'");
		}
	}

	get class() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isOpen() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isOpen(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get autoFocus() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set autoFocus(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get centered() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set centered(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get duration() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set duration(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get backdropDuration() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set backdropDuration(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get scrollable() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set scrollable(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get toggle() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set toggle(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get labelledBy() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set labelledBy(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get backdrop() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set backdrop(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get onEnter() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set onEnter(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get onExit() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set onExit(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get onOpened() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set onOpened(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get onClosed() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set onClosed(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get wrapClassName() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set wrapClassName(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get modalClassName() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set modalClassName(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get backdropClassName() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set backdropClassName(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get contentClassName() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set contentClassName(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get fade() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set fade(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get zIndex() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set zIndex(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get unmountOnClose() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set unmountOnClose(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get returnFocusAfterClose() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set returnFocusAfterClose(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\sveltestrap\src\ModalBody.svelte generated by Svelte v3.18.1 */
const file$1 = "node_modules\\sveltestrap\\src\\ModalBody.svelte";

function create_fragment$1(ctx) {
	let div;
	let current;
	const default_slot_template = /*$$slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
	let div_levels = [/*props*/ ctx[1], { class: /*classes*/ ctx[0] }];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (default_slot) default_slot.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(div, div_data);
			add_location(div, file$1, 12, 0, 218);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot && default_slot.p && dirty & /*$$scope*/ 16) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[4], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null));
			}

			set_attributes(div, get_spread_update(div_levels, [
				dirty & /*props*/ 2 && /*props*/ ctx[1],
				dirty & /*classes*/ 1 && { class: /*classes*/ ctx[0] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { class: className = "" } = $$props;
	const props = clean($$props);
	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$new_props => {
		$$invalidate(3, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(2, className = $$new_props.class);
		if ("$$scope" in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => {
		return { className, classes };
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(3, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(2, className = $$new_props.className);
		if ("classes" in $$props) $$invalidate(0, classes = $$new_props.classes);
	};

	let classes;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className*/ 4) {
			 $$invalidate(0, classes = clsx(className, "modal-body"));
		}
	};

	$$props = exclude_internal_props($$props);
	return [classes, props, className, $$props, $$scope, $$slots];
}

class ModalBody extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { class: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ModalBody",
			options,
			id: create_fragment$1.name
		});
	}

	get class() {
		throw new Error("<ModalBody>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<ModalBody>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\sveltestrap\src\ModalFooter.svelte generated by Svelte v3.18.1 */
const file$2 = "node_modules\\sveltestrap\\src\\ModalFooter.svelte";

function create_fragment$2(ctx) {
	let div;
	let current;
	const default_slot_template = /*$$slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
	let div_levels = [/*props*/ ctx[1], { class: /*classes*/ ctx[0] }];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (default_slot) default_slot.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(div, div_data);
			add_location(div, file$2, 12, 0, 220);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot && default_slot.p && dirty & /*$$scope*/ 16) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[4], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null));
			}

			set_attributes(div, get_spread_update(div_levels, [
				dirty & /*props*/ 2 && /*props*/ ctx[1],
				dirty & /*classes*/ 1 && { class: /*classes*/ ctx[0] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { class: className = "" } = $$props;
	const props = clean($$props);
	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$new_props => {
		$$invalidate(3, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(2, className = $$new_props.class);
		if ("$$scope" in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => {
		return { className, classes };
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(3, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(2, className = $$new_props.className);
		if ("classes" in $$props) $$invalidate(0, classes = $$new_props.classes);
	};

	let classes;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className*/ 4) {
			 $$invalidate(0, classes = clsx(className, "modal-footer"));
		}
	};

	$$props = exclude_internal_props($$props);
	return [classes, props, className, $$props, $$scope, $$slots];
}

class ModalFooter extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { class: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ModalFooter",
			options,
			id: create_fragment$2.name
		});
	}

	get class() {
		throw new Error("<ModalFooter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<ModalFooter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\sveltestrap\src\ModalHeader.svelte generated by Svelte v3.18.1 */
const file$3 = "node_modules\\sveltestrap\\src\\ModalHeader.svelte";
const get_close_slot_changes = dirty => ({});
const get_close_slot_context = ctx => ({});

// (24:4) {:else}
function create_else_block(ctx) {
	let current;
	const default_slot_template = /*$$slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		l: function claim(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot && default_slot.p && dirty & /*$$scope*/ 512) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[9], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null));
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(24:4) {:else}",
		ctx
	});

	return block;
}

// (22:4) {#if children}
function create_if_block_1$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*children*/ ctx[2]);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, /*children*/ ctx[2]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*children*/ 4) set_data_dev(t, /*children*/ ctx[2]);
		},
		i: noop$1,
		o: noop$1,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(22:4) {#if children}",
		ctx
	});

	return block;
}

// (29:4) {#if typeof toggle === 'function'}
function create_if_block$1(ctx) {
	let button;
	let span;
	let t;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			span = element("span");
			t = text(/*closeIcon*/ ctx[3]);
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", {
				type: true,
				class: true,
				"aria-label": true
			});

			var button_nodes = children(button);
			span = claim_element(button_nodes, "SPAN", { "aria-hidden": true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, /*closeIcon*/ ctx[3]);
			span_nodes.forEach(detach_dev);
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "aria-hidden", "true");
			add_location(span, file$3, 34, 8, 782);
			attr_dev(button, "type", "button");
			attr_dev(button, "class", "close");
			attr_dev(button, "aria-label", /*closeAriaLabel*/ ctx[1]);
			add_location(button, file$3, 29, 6, 659);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, span);
			append_dev(span, t);
			dispose = listen_dev(button, "click", /*toggle*/ ctx[0], false, false, false);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*closeIcon*/ 8) set_data_dev(t, /*closeIcon*/ ctx[3]);

			if (dirty & /*closeAriaLabel*/ 2) {
				attr_dev(button, "aria-label", /*closeAriaLabel*/ ctx[1]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(29:4) {#if typeof toggle === 'function'}",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let div;
	let h5;
	let current_block_type_index;
	let if_block0;
	let t;
	let current;
	const if_block_creators = [create_if_block_1$1, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*children*/ ctx[2]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const close_slot_template = /*$$slots*/ ctx[10].close;
	const close_slot = create_slot(close_slot_template, ctx, /*$$scope*/ ctx[9], get_close_slot_context);
	let if_block1 = typeof /*toggle*/ ctx[0] === "function" && create_if_block$1(ctx);
	let div_levels = [/*props*/ ctx[5], { class: /*classes*/ ctx[4] }];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			h5 = element("h5");
			if_block0.c();
			t = space();

			if (!close_slot) {
				if (if_block1) if_block1.c();
			}

			if (close_slot) close_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h5 = claim_element(div_nodes, "H5", { class: true });
			var h5_nodes = children(h5);
			if_block0.l(h5_nodes);
			h5_nodes.forEach(detach_dev);
			t = claim_space(div_nodes);

			if (!close_slot) {
				if (if_block1) if_block1.l(div_nodes);
			}

			if (close_slot) close_slot.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h5, "class", "modal-title");
			add_location(h5, file$3, 20, 2, 486);
			set_attributes(div, div_data);
			add_location(div, file$3, 19, 0, 451);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h5);
			if_blocks[current_block_type_index].m(h5, null);
			append_dev(div, t);

			if (!close_slot) {
				if (if_block1) if_block1.m(div, null);
			}

			if (close_slot) {
				close_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				}

				transition_in(if_block0, 1);
				if_block0.m(h5, null);
			}

			if (!close_slot) {
				if (typeof /*toggle*/ ctx[0] === "function") {
					if (if_block1) {
						if_block1.p(ctx, dirty);
					} else {
						if_block1 = create_if_block$1(ctx);
						if_block1.c();
						if_block1.m(div, null);
					}
				} else if (if_block1) {
					if_block1.d(1);
					if_block1 = null;
				}
			}

			if (close_slot && close_slot.p && dirty & /*$$scope*/ 512) {
				close_slot.p(get_slot_context(close_slot_template, ctx, /*$$scope*/ ctx[9], get_close_slot_context), get_slot_changes(close_slot_template, /*$$scope*/ ctx[9], dirty, get_close_slot_changes));
			}

			set_attributes(div, get_spread_update(div_levels, [
				dirty & /*props*/ 32 && /*props*/ ctx[5],
				dirty & /*classes*/ 16 && { class: /*classes*/ ctx[4] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(close_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(close_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if_blocks[current_block_type_index].d();

			if (!close_slot) {
				if (if_block1) if_block1.d();
			}

			if (close_slot) close_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let { class: className = "" } = $$props;
	let { toggle = undefined } = $$props;
	let { closeAriaLabel = "Close" } = $$props;
	let { charCode = 215 } = $$props;
	let { children = undefined } = $$props;
	const props = clean($$props);
	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$new_props => {
		$$invalidate(8, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(6, className = $$new_props.class);
		if ("toggle" in $$new_props) $$invalidate(0, toggle = $$new_props.toggle);
		if ("closeAriaLabel" in $$new_props) $$invalidate(1, closeAriaLabel = $$new_props.closeAriaLabel);
		if ("charCode" in $$new_props) $$invalidate(7, charCode = $$new_props.charCode);
		if ("children" in $$new_props) $$invalidate(2, children = $$new_props.children);
		if ("$$scope" in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => {
		return {
			className,
			toggle,
			closeAriaLabel,
			charCode,
			children,
			closeIcon,
			classes
		};
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(8, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(6, className = $$new_props.className);
		if ("toggle" in $$props) $$invalidate(0, toggle = $$new_props.toggle);
		if ("closeAriaLabel" in $$props) $$invalidate(1, closeAriaLabel = $$new_props.closeAriaLabel);
		if ("charCode" in $$props) $$invalidate(7, charCode = $$new_props.charCode);
		if ("children" in $$props) $$invalidate(2, children = $$new_props.children);
		if ("closeIcon" in $$props) $$invalidate(3, closeIcon = $$new_props.closeIcon);
		if ("classes" in $$props) $$invalidate(4, classes = $$new_props.classes);
	};

	let closeIcon;
	let classes;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*charCode*/ 128) {
			 $$invalidate(3, closeIcon = typeof charCode === "number"
			? String.fromCharCode(charCode)
			: charCode);
		}

		if ($$self.$$.dirty & /*className*/ 64) {
			 $$invalidate(4, classes = clsx(className, "modal-header"));
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		toggle,
		closeAriaLabel,
		children,
		closeIcon,
		classes,
		props,
		className,
		charCode,
		$$props,
		$$scope,
		$$slots
	];
}

class ModalHeader extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
			class: 6,
			toggle: 0,
			closeAriaLabel: 1,
			charCode: 7,
			children: 2
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ModalHeader",
			options,
			id: create_fragment$3.name
		});
	}

	get class() {
		throw new Error("<ModalHeader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<ModalHeader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get toggle() {
		throw new Error("<ModalHeader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set toggle(value) {
		throw new Error("<ModalHeader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get closeAriaLabel() {
		throw new Error("<ModalHeader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set closeAriaLabel(value) {
		throw new Error("<ModalHeader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get charCode() {
		throw new Error("<ModalHeader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set charCode(value) {
		throw new Error("<ModalHeader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get children() {
		throw new Error("<ModalHeader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set children(value) {
		throw new Error("<ModalHeader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Modal as M, ModalHeader as a, ModalBody as b, ModalFooter as c };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
