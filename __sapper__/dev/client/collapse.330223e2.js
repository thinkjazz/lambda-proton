import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, U as Button, ad as Collapse, J as space, f as element, y as text, F as create_component, L as query_selector_all, j as detach_dev, K as claim_space, g as claim_element, h as children, z as claim_text, G as claim_component, k as attr_dev, l as add_location, n as insert_dev, o as append_dev, H as mount_component, r as transition_in, t as transition_out, I as destroy_component, A as set_data_dev } from './client.8a6fa27b.js';
import { B as Breadcrumb, a as BreadcrumbItem } from './BreadcrumbItem.e70c4630.js';
import { C as Card } from './CardBody.a65b2e17.js';
import { R as Row } from './Row.44054390.js';
import { U as UncontrolledCollapse } from './UncontrolledCollapse.5097d8be.js';

/* src\routes\ui\collapse.svelte generated by Svelte v3.18.1 */
const file = "src\\routes\\ui\\collapse.svelte";

// (38:4) <BreadcrumbItem active>
function create_default_slot_13(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Коллапсер");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Коллапсер");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13.name,
		type: "slot",
		source: "(38:4) <BreadcrumbItem active>",
		ctx
	});

	return block;
}

// (37:0) <Breadcrumb class="mb-4">
function create_default_slot_12(ctx) {
	let current;

	const breadcrumbitem = new BreadcrumbItem({
			props: {
				active: true,
				$$slots: { default: [create_default_slot_13] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(breadcrumbitem.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(breadcrumbitem.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(breadcrumbitem, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const breadcrumbitem_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				breadcrumbitem_changes.$$scope = { dirty, ctx };
			}

			breadcrumbitem.$set(breadcrumbitem_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(breadcrumbitem.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(breadcrumbitem.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(breadcrumbitem, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12.name,
		type: "slot",
		source: "(37:0) <Breadcrumb class=\\\"mb-4\\\">",
		ctx
	});

	return block;
}

// (59:8) <Button color="primary" on:click={() => (isOpen = !isOpen)} class="mb-3">
function create_default_slot_11(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Переключатель");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Переключатель");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11.name,
		type: "slot",
		source: "(59:8) <Button color=\\\"primary\\\" on:click={() => (isOpen = !isOpen)} class=\\\"mb-3\\\">",
		ctx
	});

	return block;
}

// (63:12) <Card body>
function create_default_slot_10(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry\r\n                richardson ad squid. Nihil anim keffiyeh helvetica,\r\n                craft beer labore wes\r\n                anderson cred nesciunt sapiente ea proident.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry\r\n                richardson ad squid. Nihil anim keffiyeh helvetica,\r\n                craft beer labore wes\r\n                anderson cred nesciunt sapiente ea proident.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(63:12) <Card body>",
		ctx
	});

	return block;
}

// (62:8) <Collapse {isOpen}>
function create_default_slot_9(ctx) {
	let current;

	const card = new Card({
			props: {
				body: true,
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(card.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(card.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(card, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const card_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				card_changes.$$scope = { dirty, ctx };
			}

			card.$set(card_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(card, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(62:8) <Collapse {isOpen}>",
		ctx
	});

	return block;
}

// (40:0) <Row>
function create_default_slot_8(ctx) {
	let div0;
	let h2;
	let t0;
	let t1;
	let p0;
	let t2;
	let t3;
	let h30;
	let t4;
	let t5;
	let p1;
	let t6;
	let t7;
	let div1;
	let h31;
	let small;
	let t8;
	let t9;
	let t10;
	let current;

	const button = new Button({
			props: {
				color: "primary",
				class: "mb-3",
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*click_handler*/ ctx[8]);

	const collapse = new Collapse({
			props: {
				isOpen: /*isOpen*/ ctx[0],
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div0 = element("div");
			h2 = element("h2");
			t0 = text("Коллапсер");
			t1 = space();
			p0 = element("p");
			t2 = text("Переключайте видимость контента в вашем проекте\r\n    с помощью нескольких классов и наших плагинов JavaScript.");
			t3 = space();
			h30 = element("h3");
			t4 = text("Как это работает");
			t5 = space();
			p1 = element("p");
			t6 = text("Плагин JavaScript используется для отображения и скрытия\r\n            содержимого.\r\n            Кнопки или якоря используются в качестве триггеров,\r\n            которые привязываются к определенным элементам,\r\n            которые вы переключите. Свертывание элемента анимирует высоту от текущего значения до 0. Учитывая, как CSS обрабатывает анимацию, вы не можете использовать подкладку на .свертывающемся элементе. Вместо этого используйте класс в качестве независимого оберточного элемента.\r\n            Эффект анимации этого элемента зависит от медиа-запроса\r\n            \"Предпочтение - уменьшение движения\".");
			t7 = space();
			div1 = element("div");
			h31 = element("h3");
			small = element("small");
			t8 = text("Пример");
			t9 = space();
			create_component(button.$$.fragment);
			t10 = space();
			create_component(collapse.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h2 = claim_element(div0_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "Коллапсер");
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(div0_nodes);
			p0 = claim_element(div0_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t2 = claim_text(p0_nodes, "Переключайте видимость контента в вашем проекте\r\n    с помощью нескольких классов и наших плагинов JavaScript.");
			p0_nodes.forEach(detach_dev);
			t3 = claim_space(div0_nodes);
			h30 = claim_element(div0_nodes, "H3", { class: true });
			var h30_nodes = children(h30);
			t4 = claim_text(h30_nodes, "Как это работает");
			h30_nodes.forEach(detach_dev);
			t5 = claim_space(div0_nodes);
			p1 = claim_element(div0_nodes, "P", {});
			var p1_nodes = children(p1);
			t6 = claim_text(p1_nodes, "Плагин JavaScript используется для отображения и скрытия\r\n            содержимого.\r\n            Кнопки или якоря используются в качестве триггеров,\r\n            которые привязываются к определенным элементам,\r\n            которые вы переключите. Свертывание элемента анимирует высоту от текущего значения до 0. Учитывая, как CSS обрабатывает анимацию, вы не можете использовать подкладку на .свертывающемся элементе. Вместо этого используйте класс в качестве независимого оберточного элемента.\r\n            Эффект анимации этого элемента зависит от медиа-запроса\r\n            \"Предпочтение - уменьшение движения\".");
			p1_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t7 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h31 = claim_element(div1_nodes, "H3", { class: true });
			var h31_nodes = children(h31);
			small = claim_element(h31_nodes, "SMALL", {});
			var small_nodes = children(small);
			t8 = claim_text(small_nodes, "Пример");
			small_nodes.forEach(detach_dev);
			h31_nodes.forEach(detach_dev);
			t9 = claim_space(div1_nodes);
			claim_component(button.$$.fragment, div1_nodes);
			t10 = claim_space(div1_nodes);
			claim_component(collapse.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "mt-4");
			add_location(h2, file, 41, 8, 1298);
			attr_dev(p0, "class", "lead");
			add_location(p0, file, 42, 8, 1339);
			attr_dev(h30, "class", "mt-4");
			add_location(h30, file, 46, 8, 1495);
			add_location(p1, file, 47, 8, 1544);
			attr_dev(div0, "class", "col-xl-6");
			add_location(div0, file, 40, 4, 1266);
			add_location(small, file, 57, 25, 2245);
			attr_dev(h31, "class", "mt-4");
			add_location(h31, file, 57, 8, 2228);
			attr_dev(div1, "class", "col-xl-6");
			add_location(div1, file, 56, 4, 2196);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			append_dev(div0, h2);
			append_dev(h2, t0);
			append_dev(div0, t1);
			append_dev(div0, p0);
			append_dev(p0, t2);
			append_dev(div0, t3);
			append_dev(div0, h30);
			append_dev(h30, t4);
			append_dev(div0, t5);
			append_dev(div0, p1);
			append_dev(p1, t6);
			insert_dev(target, t7, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, h31);
			append_dev(h31, small);
			append_dev(small, t8);
			append_dev(div1, t9);
			mount_component(button, div1, null);
			append_dev(div1, t10);
			mount_component(collapse, div1, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
			const collapse_changes = {};
			if (dirty & /*isOpen*/ 1) collapse_changes.isOpen = /*isOpen*/ ctx[0];

			if (dirty & /*$$scope*/ 1024) {
				collapse_changes.$$scope = { dirty, ctx };
			}

			collapse.$set(collapse_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			transition_in(collapse.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			transition_out(collapse.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(div1);
			destroy_component(button);
			destroy_component(collapse);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(40:0) <Row>",
		ctx
	});

	return block;
}

// (85:8) <Button color="primary" on:click={() => (isOpen = !isOpen)} class="mb-3">
function create_default_slot_7(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Переключатель");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Переключатель");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(85:8) <Button color=\\\"primary\\\" on:click={() => (isOpen = !isOpen)} class=\\\"mb-3\\\">",
		ctx
	});

	return block;
}

// (90:12) <Card body>
function create_default_slot_6(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry\r\n                richardson ad squid. Nihil anim keffiyeh helvetica, craft beer labore wes\r\n                anderson cred nesciunt sapiente ea proident.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry\r\n                richardson ad squid. Nihil anim keffiyeh helvetica, craft beer labore wes\r\n                anderson cred nesciunt sapiente ea proident.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(90:12) <Card body>",
		ctx
	});

	return block;
}

// (89:8) <Collapse {isOpen} {onEntering} {onEntered} {onExiting} {onExited}>
function create_default_slot_5(ctx) {
	let current;

	const card = new Card({
			props: {
				body: true,
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(card.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(card.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(card, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const card_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				card_changes.$$scope = { dirty, ctx };
			}

			card.$set(card_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(card, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(89:8) <Collapse {isOpen} {onEntering} {onEntered} {onExiting} {onExited}>",
		ctx
	});

	return block;
}

// (72:0) <Row>
function create_default_slot_4(ctx) {
	let div0;
	let h2;
	let t0;
	let t1;
	let p;
	let t2;
	let code;
	let t3;
	let t4;
	let t5;
	let div1;
	let h3;
	let small;
	let t6;
	let t7;
	let t8;
	let h5;
	let t9;
	let t10;
	let t11;
	let current;

	const button = new Button({
			props: {
				color: "primary",
				class: "mb-3",
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*click_handler_1*/ ctx[9]);

	const collapse = new Collapse({
			props: {
				isOpen: /*isOpen*/ ctx[0],
				onEntering: /*onEntering*/ ctx[3],
				onEntered: /*onEntered*/ ctx[4],
				onExiting: /*onExiting*/ ctx[5],
				onExited: /*onExited*/ ctx[6],
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div0 = element("div");
			h2 = element("h2");
			t0 = text("События");
			t1 = space();
			p = element("p");
			t2 = text("Используйте props ");
			code = element("code");
			t3 = text("on:onEntering, onEntering, onExiting и onExited");
			t4 = text("\r\n            для обратных вызовов после того,\r\n            как Collapse завершит открытие (entering) или закрытие (exiting).");
			t5 = space();
			div1 = element("div");
			h3 = element("h3");
			small = element("small");
			t6 = text("Пример");
			t7 = space();
			create_component(button.$$.fragment);
			t8 = space();
			h5 = element("h5");
			t9 = text("Текущее состояние: ");
			t10 = text(/*status*/ ctx[1]);
			t11 = space();
			create_component(collapse.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h2 = claim_element(div0_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "События");
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(div0_nodes);
			p = claim_element(div0_nodes, "P", {});
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, "Используйте props ");
			code = claim_element(p_nodes, "CODE", {});
			var code_nodes = children(code);
			t3 = claim_text(code_nodes, "on:onEntering, onEntering, onExiting и onExited");
			code_nodes.forEach(detach_dev);
			t4 = claim_text(p_nodes, "\r\n            для обратных вызовов после того,\r\n            как Collapse завершит открытие (entering) или закрытие (exiting).");
			p_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t5 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h3 = claim_element(div1_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			small = claim_element(h3_nodes, "SMALL", {});
			var small_nodes = children(small);
			t6 = claim_text(small_nodes, "Пример");
			small_nodes.forEach(detach_dev);
			h3_nodes.forEach(detach_dev);
			t7 = claim_space(div1_nodes);
			claim_component(button.$$.fragment, div1_nodes);
			t8 = claim_space(div1_nodes);
			h5 = claim_element(div1_nodes, "H5", {});
			var h5_nodes = children(h5);
			t9 = claim_text(h5_nodes, "Текущее состояние: ");
			t10 = claim_text(h5_nodes, /*status*/ ctx[1]);
			h5_nodes.forEach(detach_dev);
			t11 = claim_space(div1_nodes);
			claim_component(collapse.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "mt-4");
			add_location(h2, file, 73, 8, 2823);
			add_location(code, file, 75, 30, 2897);
			add_location(p, file, 74, 8, 2862);
			attr_dev(div0, "class", "col-xl-6");
			add_location(div0, file, 72, 4, 2791);
			add_location(small, file, 83, 25, 3187);
			attr_dev(h3, "class", "mt-4");
			add_location(h3, file, 83, 8, 3170);
			add_location(h5, file, 87, 8, 3352);
			attr_dev(div1, "class", "col-xl-6");
			add_location(div1, file, 82, 4, 3138);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			append_dev(div0, h2);
			append_dev(h2, t0);
			append_dev(div0, t1);
			append_dev(div0, p);
			append_dev(p, t2);
			append_dev(p, code);
			append_dev(code, t3);
			append_dev(p, t4);
			insert_dev(target, t5, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, h3);
			append_dev(h3, small);
			append_dev(small, t6);
			append_dev(div1, t7);
			mount_component(button, div1, null);
			append_dev(div1, t8);
			append_dev(div1, h5);
			append_dev(h5, t9);
			append_dev(h5, t10);
			append_dev(div1, t11);
			mount_component(collapse, div1, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
			if (!current || dirty & /*status*/ 2) set_data_dev(t10, /*status*/ ctx[1]);
			const collapse_changes = {};
			if (dirty & /*isOpen*/ 1) collapse_changes.isOpen = /*isOpen*/ ctx[0];

			if (dirty & /*$$scope*/ 1024) {
				collapse_changes.$$scope = { dirty, ctx };
			}

			collapse.$set(collapse_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			transition_in(collapse.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			transition_out(collapse.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(div1);
			destroy_component(button);
			destroy_component(collapse);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(72:0) <Row>",
		ctx
	});

	return block;
}

// (113:8) <Button color="primary" id="toggler" class="mb-3">
function create_default_slot_3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Переключатель");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Переключатель");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(113:8) <Button color=\\\"primary\\\" id=\\\"toggler\\\" class=\\\"mb-3\\\">",
		ctx
	});

	return block;
}

// (115:12) <Card body>
function create_default_slot_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Lorem ipsum dolor sit amet consectetur adipisicing elit. Nesciunt magni,\r\n                voluptas debitis similique porro a molestias consequuntur earum odio\r\n                officiis natus, amet hic, iste sed dignissimos esse fuga! Minus, alias.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Lorem ipsum dolor sit amet consectetur adipisicing elit. Nesciunt magni,\r\n                voluptas debitis similique porro a molestias consequuntur earum odio\r\n                officiis natus, amet hic, iste sed dignissimos esse fuga! Minus, alias.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(115:12) <Card body>",
		ctx
	});

	return block;
}

// (114:8) <UncontrolledCollapse toggler="#toggler">
function create_default_slot_1(ctx) {
	let current;

	const card = new Card({
			props: {
				body: true,
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(card.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(card.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(card, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const card_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				card_changes.$$scope = { dirty, ctx };
			}

			card.$set(card_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(card, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(114:8) <UncontrolledCollapse toggler=\\\"#toggler\\\">",
		ctx
	});

	return block;
}

// (98:0) <Row>
function create_default_slot(ctx) {
	let div0;
	let h2;
	let t0;
	let t1;
	let p;
	let t2;
	let code0;
	let t3;
	let t4;
	let code1;
	let t5;
	let t6;
	let code2;
	let t7;
	let t8;
	let t9;
	let div1;
	let h3;
	let small;
	let t10;
	let t11;
	let t12;
	let current;

	const button = new Button({
			props: {
				color: "primary",
				id: "toggler",
				class: "mb-3",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const uncontrolledcollapse = new UncontrolledCollapse({
			props: {
				toggler: "#toggler",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div0 = element("div");
			h2 = element("h2");
			t0 = text("Неконтролируемый коллапсер без isOpen");
			t1 = space();
			p = element("p");
			t2 = text("Для самых простых случаев использования неконтролируемый\r\n            компонент может обеспечить требуемую функциональность без\r\n            необходимости управлять/управлять состоянием компонента.\r\n            ");
			code0 = element("code");
			t3 = text("UncontrolledCollapse");
			t4 = text(" не требует  ");
			code1 = element("code");
			t5 = text("isOpen");
			t6 = text(" prop.\r\n            Вместо этого передайте переключающий props.\r\n            Переключатель - это строка, которая запустит  ");
			code2 = element("code");
			t7 = text("querySelectorAll");
			t8 = text("\r\n            для поиска dom-элементов, которые инициируют переключение.");
			t9 = space();
			div1 = element("div");
			h3 = element("h3");
			small = element("small");
			t10 = text("Пример");
			t11 = space();
			create_component(button.$$.fragment);
			t12 = space();
			create_component(uncontrolledcollapse.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h2 = claim_element(div0_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "Неконтролируемый коллапсер без isOpen");
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(div0_nodes);
			p = claim_element(div0_nodes, "P", {});
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, "Для самых простых случаев использования неконтролируемый\r\n            компонент может обеспечить требуемую функциональность без\r\n            необходимости управлять/управлять состоянием компонента.\r\n            ");
			code0 = claim_element(p_nodes, "CODE", {});
			var code0_nodes = children(code0);
			t3 = claim_text(code0_nodes, "UncontrolledCollapse");
			code0_nodes.forEach(detach_dev);
			t4 = claim_text(p_nodes, " не требует  ");
			code1 = claim_element(p_nodes, "CODE", {});
			var code1_nodes = children(code1);
			t5 = claim_text(code1_nodes, "isOpen");
			code1_nodes.forEach(detach_dev);
			t6 = claim_text(p_nodes, " prop.\r\n            Вместо этого передайте переключающий props.\r\n            Переключатель - это строка, которая запустит  ");
			code2 = claim_element(p_nodes, "CODE", {});
			var code2_nodes = children(code2);
			t7 = claim_text(code2_nodes, "querySelectorAll");
			code2_nodes.forEach(detach_dev);
			t8 = claim_text(p_nodes, "\r\n            для поиска dom-элементов, которые инициируют переключение.");
			p_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t9 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h3 = claim_element(div1_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			small = claim_element(h3_nodes, "SMALL", {});
			var small_nodes = children(small);
			t10 = claim_text(small_nodes, "Пример");
			small_nodes.forEach(detach_dev);
			h3_nodes.forEach(detach_dev);
			t11 = claim_space(div1_nodes);
			claim_component(button.$$.fragment, div1_nodes);
			t12 = claim_space(div1_nodes);
			claim_component(uncontrolledcollapse.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "mt-4");
			add_location(h2, file, 99, 8, 3842);
			add_location(code0, file, 104, 12, 4139);
			add_location(code1, file, 104, 58, 4185);
			add_location(code2, file, 106, 58, 4327);
			add_location(p, file, 100, 8, 3911);
			attr_dev(div0, "class", "col-xl-6");
			add_location(div0, file, 98, 4, 3810);
			add_location(small, file, 111, 25, 4509);
			attr_dev(h3, "class", "mt-4");
			add_location(h3, file, 111, 8, 4492);
			attr_dev(div1, "class", "col-xl-6");
			add_location(div1, file, 110, 4, 4460);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			append_dev(div0, h2);
			append_dev(h2, t0);
			append_dev(div0, t1);
			append_dev(div0, p);
			append_dev(p, t2);
			append_dev(p, code0);
			append_dev(code0, t3);
			append_dev(p, t4);
			append_dev(p, code1);
			append_dev(code1, t5);
			append_dev(p, t6);
			append_dev(p, code2);
			append_dev(code2, t7);
			append_dev(p, t8);
			insert_dev(target, t9, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, h3);
			append_dev(h3, small);
			append_dev(small, t10);
			append_dev(div1, t11);
			mount_component(button, div1, null);
			append_dev(div1, t12);
			mount_component(uncontrolledcollapse, div1, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
			const uncontrolledcollapse_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				uncontrolledcollapse_changes.$$scope = { dirty, ctx };
			}

			uncontrolledcollapse.$set(uncontrolledcollapse_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			transition_in(uncontrolledcollapse.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			transition_out(uncontrolledcollapse.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			if (detaching) detach_dev(t9);
			if (detaching) detach_dev(div1);
			destroy_component(button);
			destroy_component(uncontrolledcollapse);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(98:0) <Row>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let title_value;
	let t0;
	let h1;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let current;
	document.title = title_value = /*title*/ ctx[2];

	const breadcrumb = new Breadcrumb({
			props: {
				class: "mb-4",
				$$slots: { default: [create_default_slot_12] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row0 = new Row({
			props: {
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row1 = new Row({
			props: {
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row2 = new Row({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("Коллапсер");
			t2 = space();
			create_component(breadcrumb.$$.fragment);
			t3 = space();
			create_component(row0.$$.fragment);
			t4 = space();
			create_component(row1.$$.fragment);
			t5 = space();
			create_component(row2.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-46oba3\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Коллапсер");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			claim_component(breadcrumb.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(row0.$$.fragment, nodes);
			t4 = claim_space(nodes);
			claim_component(row1.$$.fragment, nodes);
			t5 = claim_space(nodes);
			claim_component(row2.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "mt-4");
			add_location(h1, file, 35, 0, 1124);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			mount_component(breadcrumb, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(row0, target, anchor);
			insert_dev(target, t4, anchor);
			mount_component(row1, target, anchor);
			insert_dev(target, t5, anchor);
			mount_component(row2, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*title*/ 4) && title_value !== (title_value = /*title*/ ctx[2])) {
				document.title = title_value;
			}

			const breadcrumb_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				breadcrumb_changes.$$scope = { dirty, ctx };
			}

			breadcrumb.$set(breadcrumb_changes);
			const row0_changes = {};

			if (dirty & /*$$scope, isOpen*/ 1025) {
				row0_changes.$$scope = { dirty, ctx };
			}

			row0.$set(row0_changes);
			const row1_changes = {};

			if (dirty & /*$$scope, isOpen, status*/ 1027) {
				row1_changes.$$scope = { dirty, ctx };
			}

			row1.$set(row1_changes);
			const row2_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				row2_changes.$$scope = { dirty, ctx };
			}

			row2.$set(row2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(breadcrumb.$$.fragment, local);
			transition_in(row0.$$.fragment, local);
			transition_in(row1.$$.fragment, local);
			transition_in(row2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(breadcrumb.$$.fragment, local);
			transition_out(row0.$$.fragment, local);
			transition_out(row1.$$.fragment, local);
			transition_out(row2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			destroy_component(breadcrumb, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(row0, detaching);
			if (detaching) detach_dev(t4);
			destroy_component(row1, detaching);
			if (detaching) detach_dev(t5);
			destroy_component(row2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let title = "Коллапсер | UI | Пользовательский Интерфейс";

	const colors = [
		"primary",
		"secondary",
		"success",
		"danger",
		"warning",
		"info",
		"light",
		"dark"
	];

	let isOpen = false;
	let status = "Закрыто";
	const onEntering = () => $$invalidate(1, status = "Открывается...");
	const onEntered = () => $$invalidate(1, status = "Открыто");
	const onExiting = () => $$invalidate(1, status = "Закрывается...");
	const onExited = () => $$invalidate(1, status = "Закрыто");
	const click_handler = () => $$invalidate(0, isOpen = !isOpen);
	const click_handler_1 = () => $$invalidate(0, isOpen = !isOpen);

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("title" in $$props) $$invalidate(2, title = $$props.title);
		if ("isOpen" in $$props) $$invalidate(0, isOpen = $$props.isOpen);
		if ("status" in $$props) $$invalidate(1, status = $$props.status);
	};

	return [
		isOpen,
		status,
		title,
		onEntering,
		onEntered,
		onExiting,
		onExited,
		colors,
		click_handler,
		click_handler_1
	];
}

class Collapse_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Collapse_1",
			options,
			id: create_fragment.name
		});
	}
}

export default Collapse_1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
