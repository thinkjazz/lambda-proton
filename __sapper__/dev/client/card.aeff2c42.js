import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, J as space, f as element, y as text, F as create_component, L as query_selector_all, j as detach_dev, K as claim_space, g as claim_element, h as children, z as claim_text, G as claim_component, k as attr_dev, l as add_location, n as insert_dev, o as append_dev, H as mount_component, r as transition_in, t as transition_out, I as destroy_component, U as Button } from './client.2b0e25c5.js';
import { B as Breadcrumb, a as BreadcrumbItem } from './BreadcrumbItem.d29e13b2.js';
import { C as Card, a as CardBody } from './CardBody.7f7f5c83.js';
import { C as CardText } from './CardText.1e2ea679.js';
import { C as CardSubtitle } from './CardSubtitle.ca8893be.js';
import { R as Row } from './Row.d357ab9c.js';
import { C as CardFooter } from './CardFooter.cf975bf1.js';
import { C as CardTitle } from './CardTitle.35d61b87.js';

/* src\routes\ui\card.svelte generated by Svelte v3.18.1 */
const file = "src\\routes\\ui\\card.svelte";

// (23:4) <BreadcrumbItem active>
function create_default_slot_22(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Карточки");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Карточки");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_22.name,
		type: "slot",
		source: "(23:4) <BreadcrumbItem active>",
		ctx
	});

	return block;
}

// (22:0) <Breadcrumb class="mb-4">
function create_default_slot_21(ctx) {
	let current;

	const breadcrumbitem = new BreadcrumbItem({
			props: {
				active: true,
				$$slots: { default: [create_default_slot_22] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(breadcrumbitem.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(breadcrumbitem.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(breadcrumbitem, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const breadcrumbitem_changes = {};

			if (dirty & /*$$scope*/ 2) {
				breadcrumbitem_changes.$$scope = { dirty, ctx };
			}

			breadcrumbitem.$set(breadcrumbitem_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(breadcrumbitem.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(breadcrumbitem.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(breadcrumbitem, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_21.name,
		type: "slot",
		source: "(22:0) <Breadcrumb class=\\\"mb-4\\\">",
		ctx
	});

	return block;
}

// (30:12) <CardBody>
function create_default_slot_20(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Привет, Мир!");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Привет, Мир!");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_20.name,
		type: "slot",
		source: "(30:12) <CardBody>",
		ctx
	});

	return block;
}

// (29:8) <Card>
function create_default_slot_19(ctx) {
	let current;

	const cardbody = new CardBody({
			props: {
				$$slots: { default: [create_default_slot_20] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(cardbody.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(cardbody.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardbody, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const cardbody_changes = {};

			if (dirty & /*$$scope*/ 2) {
				cardbody_changes.$$scope = { dirty, ctx };
			}

			cardbody.$set(cardbody_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardbody.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardbody.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardbody, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_19.name,
		type: "slot",
		source: "(29:8) <Card>",
		ctx
	});

	return block;
}

// (36:8) <Card body>
function create_default_slot_18(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Прощай жестокий мир");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Прощай жестокий мир");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_18.name,
		type: "slot",
		source: "(36:8) <Card body>",
		ctx
	});

	return block;
}

// (25:0) <Row>
function create_default_slot_17(ctx) {
	let div0;
	let h20;
	let t0;
	let t1;
	let h40;
	let t2;
	let t3;
	let t4;
	let div1;
	let h21;
	let t5;
	let t6;
	let h41;
	let t7;
	let t8;
	let current;

	const card0 = new Card({
			props: {
				$$slots: { default: [create_default_slot_19] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const card1 = new Card({
			props: {
				body: true,
				$$slots: { default: [create_default_slot_18] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div0 = element("div");
			h20 = element("h2");
			t0 = text("Карточки");
			t1 = space();
			h40 = element("h4");
			t2 = text("Пример");
			t3 = space();
			create_component(card0.$$.fragment);
			t4 = space();
			div1 = element("div");
			h21 = element("h2");
			t5 = text("Сокращенная запись");
			t6 = space();
			h41 = element("h4");
			t7 = text("Пример");
			t8 = space();
			create_component(card1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h20 = claim_element(div0_nodes, "H2", { class: true });
			var h20_nodes = children(h20);
			t0 = claim_text(h20_nodes, "Карточки");
			h20_nodes.forEach(detach_dev);
			t1 = claim_space(div0_nodes);
			h40 = claim_element(div0_nodes, "H4", { class: true });
			var h40_nodes = children(h40);
			t2 = claim_text(h40_nodes, "Пример");
			h40_nodes.forEach(detach_dev);
			t3 = claim_space(div0_nodes);
			claim_component(card0.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h21 = claim_element(div1_nodes, "H2", { class: true });
			var h21_nodes = children(h21);
			t5 = claim_text(h21_nodes, "Сокращенная запись");
			h21_nodes.forEach(detach_dev);
			t6 = claim_space(div1_nodes);
			h41 = claim_element(div1_nodes, "H4", { class: true });
			var h41_nodes = children(h41);
			t7 = claim_text(h41_nodes, "Пример");
			h41_nodes.forEach(detach_dev);
			t8 = claim_space(div1_nodes);
			claim_component(card1.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h20, "class", "mt-4");
			add_location(h20, file, 26, 8, 1074);
			attr_dev(h40, "class", "mt-4");
			add_location(h40, file, 27, 8, 1114);
			attr_dev(div0, "class", "col-xl-6");
			add_location(div0, file, 25, 4, 1042);
			attr_dev(h21, "class", "mt-4");
			add_location(h21, file, 33, 8, 1272);
			attr_dev(h41, "class", "mt-4");
			add_location(h41, file, 34, 8, 1322);
			attr_dev(div1, "class", "col-xl-6");
			add_location(div1, file, 32, 4, 1240);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			append_dev(div0, h20);
			append_dev(h20, t0);
			append_dev(div0, t1);
			append_dev(div0, h40);
			append_dev(h40, t2);
			append_dev(div0, t3);
			mount_component(card0, div0, null);
			insert_dev(target, t4, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, h21);
			append_dev(h21, t5);
			append_dev(div1, t6);
			append_dev(div1, h41);
			append_dev(h41, t7);
			append_dev(div1, t8);
			mount_component(card1, div1, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const card0_changes = {};

			if (dirty & /*$$scope*/ 2) {
				card0_changes.$$scope = { dirty, ctx };
			}

			card0.$set(card0_changes);
			const card1_changes = {};

			if (dirty & /*$$scope*/ 2) {
				card1_changes.$$scope = { dirty, ctx };
			}

			card1.$set(card1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card0.$$.fragment, local);
			transition_in(card1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card0.$$.fragment, local);
			transition_out(card1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			destroy_component(card0);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(div1);
			destroy_component(card1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_17.name,
		type: "slot",
		source: "(25:0) <Row>",
		ctx
	});

	return block;
}

// (45:16) <CardTitle>
function create_default_slot_16(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Заголовок");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Заголовок");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_16.name,
		type: "slot",
		source: "(45:16) <CardTitle>",
		ctx
	});

	return block;
}

// (44:12) <CardHeader>
function create_default_slot_15(ctx) {
	let current;

	const cardtitle = new CardTitle({
			props: {
				$$slots: { default: [create_default_slot_16] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(cardtitle.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(cardtitle.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardtitle, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const cardtitle_changes = {};

			if (dirty & /*$$scope*/ 2) {
				cardtitle_changes.$$scope = { dirty, ctx };
			}

			cardtitle.$set(cardtitle_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardtitle.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardtitle.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardtitle, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_15.name,
		type: "slot",
		source: "(44:12) <CardHeader>",
		ctx
	});

	return block;
}

// (48:16) <CardSubtitle>
function create_default_slot_14(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Подзаголовок карточки");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Подзаголовок карточки");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_14.name,
		type: "slot",
		source: "(48:16) <CardSubtitle>",
		ctx
	});

	return block;
}

// (49:16) <CardText>
function create_default_slot_13(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Быстрый пример текста для построения на заголовке карточки\r\n                    и составляют большую часть содержимого карточки.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Быстрый пример текста для построения на заголовке карточки\r\n                    и составляют большую часть содержимого карточки.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13.name,
		type: "slot",
		source: "(49:16) <CardText>",
		ctx
	});

	return block;
}

// (53:16) <Button>
function create_default_slot_12(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Кнопка");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Кнопка");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12.name,
		type: "slot",
		source: "(53:16) <Button>",
		ctx
	});

	return block;
}

// (47:12) <CardBody>
function create_default_slot_11(ctx) {
	let t0;
	let t1;
	let current;

	const cardsubtitle = new CardSubtitle({
			props: {
				$$slots: { default: [create_default_slot_14] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const cardtext = new CardText({
			props: {
				$$slots: { default: [create_default_slot_13] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const button = new Button({
			props: {
				$$slots: { default: [create_default_slot_12] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(cardsubtitle.$$.fragment);
			t0 = space();
			create_component(cardtext.$$.fragment);
			t1 = space();
			create_component(button.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(cardsubtitle.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(cardtext.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(button.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardsubtitle, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(cardtext, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(button, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const cardsubtitle_changes = {};

			if (dirty & /*$$scope*/ 2) {
				cardsubtitle_changes.$$scope = { dirty, ctx };
			}

			cardsubtitle.$set(cardsubtitle_changes);
			const cardtext_changes = {};

			if (dirty & /*$$scope*/ 2) {
				cardtext_changes.$$scope = { dirty, ctx };
			}

			cardtext.$set(cardtext_changes);
			const button_changes = {};

			if (dirty & /*$$scope*/ 2) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardsubtitle.$$.fragment, local);
			transition_in(cardtext.$$.fragment, local);
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardsubtitle.$$.fragment, local);
			transition_out(cardtext.$$.fragment, local);
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardsubtitle, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(cardtext, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(button, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11.name,
		type: "slot",
		source: "(47:12) <CardBody>",
		ctx
	});

	return block;
}

// (55:12) <CardFooter>
function create_default_slot_10(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Футер");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Футер");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(55:12) <CardFooter>",
		ctx
	});

	return block;
}

// (43:8) <Card class="mb-3">
function create_default_slot_9(ctx) {
	let t0;
	let t1;
	let current;

	const cardheader = new CardFooter({
			props: {
				$$slots: { default: [create_default_slot_15] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const cardbody = new CardBody({
			props: {
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const cardfooter = new CardFooter({
			props: {
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(cardheader.$$.fragment);
			t0 = space();
			create_component(cardbody.$$.fragment);
			t1 = space();
			create_component(cardfooter.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(cardheader.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(cardbody.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(cardfooter.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardheader, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(cardbody, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(cardfooter, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const cardheader_changes = {};

			if (dirty & /*$$scope*/ 2) {
				cardheader_changes.$$scope = { dirty, ctx };
			}

			cardheader.$set(cardheader_changes);
			const cardbody_changes = {};

			if (dirty & /*$$scope*/ 2) {
				cardbody_changes.$$scope = { dirty, ctx };
			}

			cardbody.$set(cardbody_changes);
			const cardfooter_changes = {};

			if (dirty & /*$$scope*/ 2) {
				cardfooter_changes.$$scope = { dirty, ctx };
			}

			cardfooter.$set(cardfooter_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardheader.$$.fragment, local);
			transition_in(cardbody.$$.fragment, local);
			transition_in(cardfooter.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardheader.$$.fragment, local);
			transition_out(cardbody.$$.fragment, local);
			transition_out(cardfooter.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardheader, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(cardbody, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(cardfooter, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(43:8) <Card class=\\\"mb-3\\\">",
		ctx
	});

	return block;
}

// (61:8) <Card body color="primary" inverse class="mb-3">
function create_default_slot_8(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Основной");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Основной");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(61:8) <Card body color=\\\"primary\\\" inverse class=\\\"mb-3\\\">",
		ctx
	});

	return block;
}

// (62:8) <Card body color="secondary" class="mb-3 text-white">
function create_default_slot_7(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Вторичный");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Вторичный");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(62:8) <Card body color=\\\"secondary\\\" class=\\\"mb-3 text-white\\\">",
		ctx
	});

	return block;
}

// (63:8) <Card body color="success" class="mb-3">
function create_default_slot_6(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Успешный");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Успешный");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(63:8) <Card body color=\\\"success\\\" class=\\\"mb-3\\\">",
		ctx
	});

	return block;
}

// (64:8) <Card body color="danger" class="mb-3 text-white">
function create_default_slot_5(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Опасность");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Опасность");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(64:8) <Card body color=\\\"danger\\\" class=\\\"mb-3 text-white\\\">",
		ctx
	});

	return block;
}

// (65:8) <Card body color="warning" class="mb-3">
function create_default_slot_4(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Предупреждение");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Предупреждение");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(65:8) <Card body color=\\\"warning\\\" class=\\\"mb-3\\\">",
		ctx
	});

	return block;
}

// (66:8) <Card body color="info" class="mb-3 text-white">
function create_default_slot_3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Инфо");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Инфо");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(66:8) <Card body color=\\\"info\\\" class=\\\"mb-3 text-white\\\">",
		ctx
	});

	return block;
}

// (67:8) <Card body color="dark" inverse class="mb-3">
function create_default_slot_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Тёмный");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Тёмный");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(67:8) <Card body color=\\\"dark\\\" inverse class=\\\"mb-3\\\">",
		ctx
	});

	return block;
}

// (68:8) <Card body color="light" class="mb-3">
function create_default_slot_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Светлый");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Светлый");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(68:8) <Card body color=\\\"light\\\" class=\\\"mb-3\\\">",
		ctx
	});

	return block;
}

// (39:0) <Row>
function create_default_slot(ctx) {
	let div0;
	let h20;
	let t0;
	let t1;
	let h40;
	let t2;
	let t3;
	let t4;
	let div1;
	let h21;
	let t5;
	let t6;
	let h41;
	let t7;
	let t8;
	let t9;
	let t10;
	let t11;
	let t12;
	let t13;
	let t14;
	let t15;
	let current;

	const card0 = new Card({
			props: {
				class: "mb-3",
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const card1 = new Card({
			props: {
				body: true,
				color: "primary",
				inverse: true,
				class: "mb-3",
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const card2 = new Card({
			props: {
				body: true,
				color: "secondary",
				class: "mb-3 text-white",
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const card3 = new Card({
			props: {
				body: true,
				color: "success",
				class: "mb-3",
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const card4 = new Card({
			props: {
				body: true,
				color: "danger",
				class: "mb-3 text-white",
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const card5 = new Card({
			props: {
				body: true,
				color: "warning",
				class: "mb-3",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const card6 = new Card({
			props: {
				body: true,
				color: "info",
				class: "mb-3 text-white",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const card7 = new Card({
			props: {
				body: true,
				color: "dark",
				inverse: true,
				class: "mb-3",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const card8 = new Card({
			props: {
				body: true,
				color: "light",
				class: "mb-3",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div0 = element("div");
			h20 = element("h2");
			t0 = text("Хедер и Футер");
			t1 = space();
			h40 = element("h4");
			t2 = text("Пример");
			t3 = space();
			create_component(card0.$$.fragment);
			t4 = space();
			div1 = element("div");
			h21 = element("h2");
			t5 = text("Цвета в карточках");
			t6 = space();
			h41 = element("h4");
			t7 = text("Пример");
			t8 = space();
			create_component(card1.$$.fragment);
			t9 = space();
			create_component(card2.$$.fragment);
			t10 = space();
			create_component(card3.$$.fragment);
			t11 = space();
			create_component(card4.$$.fragment);
			t12 = space();
			create_component(card5.$$.fragment);
			t13 = space();
			create_component(card6.$$.fragment);
			t14 = space();
			create_component(card7.$$.fragment);
			t15 = space();
			create_component(card8.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h20 = claim_element(div0_nodes, "H2", { class: true });
			var h20_nodes = children(h20);
			t0 = claim_text(h20_nodes, "Хедер и Футер");
			h20_nodes.forEach(detach_dev);
			t1 = claim_space(div0_nodes);
			h40 = claim_element(div0_nodes, "H4", { class: true });
			var h40_nodes = children(h40);
			t2 = claim_text(h40_nodes, "Пример");
			h40_nodes.forEach(detach_dev);
			t3 = claim_space(div0_nodes);
			claim_component(card0.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h21 = claim_element(div1_nodes, "H2", { class: true });
			var h21_nodes = children(h21);
			t5 = claim_text(h21_nodes, "Цвета в карточках");
			h21_nodes.forEach(detach_dev);
			t6 = claim_space(div1_nodes);
			h41 = claim_element(div1_nodes, "H4", { class: true });
			var h41_nodes = children(h41);
			t7 = claim_text(h41_nodes, "Пример");
			h41_nodes.forEach(detach_dev);
			t8 = claim_space(div1_nodes);
			claim_component(card1.$$.fragment, div1_nodes);
			t9 = claim_space(div1_nodes);
			claim_component(card2.$$.fragment, div1_nodes);
			t10 = claim_space(div1_nodes);
			claim_component(card3.$$.fragment, div1_nodes);
			t11 = claim_space(div1_nodes);
			claim_component(card4.$$.fragment, div1_nodes);
			t12 = claim_space(div1_nodes);
			claim_component(card5.$$.fragment, div1_nodes);
			t13 = claim_space(div1_nodes);
			claim_component(card6.$$.fragment, div1_nodes);
			t14 = claim_space(div1_nodes);
			claim_component(card7.$$.fragment, div1_nodes);
			t15 = claim_space(div1_nodes);
			claim_component(card8.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h20, "class", "mt-4");
			add_location(h20, file, 40, 8, 1463);
			attr_dev(h40, "class", "mt-4");
			add_location(h40, file, 41, 8, 1508);
			attr_dev(div0, "class", "col-xl-6");
			add_location(div0, file, 39, 4, 1431);
			attr_dev(h21, "class", "mt-4");
			add_location(h21, file, 58, 8, 2144);
			attr_dev(h41, "class", "mt-4");
			add_location(h41, file, 59, 8, 2193);
			attr_dev(div1, "class", "col-xl-6");
			add_location(div1, file, 57, 4, 2112);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			append_dev(div0, h20);
			append_dev(h20, t0);
			append_dev(div0, t1);
			append_dev(div0, h40);
			append_dev(h40, t2);
			append_dev(div0, t3);
			mount_component(card0, div0, null);
			insert_dev(target, t4, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, h21);
			append_dev(h21, t5);
			append_dev(div1, t6);
			append_dev(div1, h41);
			append_dev(h41, t7);
			append_dev(div1, t8);
			mount_component(card1, div1, null);
			append_dev(div1, t9);
			mount_component(card2, div1, null);
			append_dev(div1, t10);
			mount_component(card3, div1, null);
			append_dev(div1, t11);
			mount_component(card4, div1, null);
			append_dev(div1, t12);
			mount_component(card5, div1, null);
			append_dev(div1, t13);
			mount_component(card6, div1, null);
			append_dev(div1, t14);
			mount_component(card7, div1, null);
			append_dev(div1, t15);
			mount_component(card8, div1, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const card0_changes = {};

			if (dirty & /*$$scope*/ 2) {
				card0_changes.$$scope = { dirty, ctx };
			}

			card0.$set(card0_changes);
			const card1_changes = {};

			if (dirty & /*$$scope*/ 2) {
				card1_changes.$$scope = { dirty, ctx };
			}

			card1.$set(card1_changes);
			const card2_changes = {};

			if (dirty & /*$$scope*/ 2) {
				card2_changes.$$scope = { dirty, ctx };
			}

			card2.$set(card2_changes);
			const card3_changes = {};

			if (dirty & /*$$scope*/ 2) {
				card3_changes.$$scope = { dirty, ctx };
			}

			card3.$set(card3_changes);
			const card4_changes = {};

			if (dirty & /*$$scope*/ 2) {
				card4_changes.$$scope = { dirty, ctx };
			}

			card4.$set(card4_changes);
			const card5_changes = {};

			if (dirty & /*$$scope*/ 2) {
				card5_changes.$$scope = { dirty, ctx };
			}

			card5.$set(card5_changes);
			const card6_changes = {};

			if (dirty & /*$$scope*/ 2) {
				card6_changes.$$scope = { dirty, ctx };
			}

			card6.$set(card6_changes);
			const card7_changes = {};

			if (dirty & /*$$scope*/ 2) {
				card7_changes.$$scope = { dirty, ctx };
			}

			card7.$set(card7_changes);
			const card8_changes = {};

			if (dirty & /*$$scope*/ 2) {
				card8_changes.$$scope = { dirty, ctx };
			}

			card8.$set(card8_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card0.$$.fragment, local);
			transition_in(card1.$$.fragment, local);
			transition_in(card2.$$.fragment, local);
			transition_in(card3.$$.fragment, local);
			transition_in(card4.$$.fragment, local);
			transition_in(card5.$$.fragment, local);
			transition_in(card6.$$.fragment, local);
			transition_in(card7.$$.fragment, local);
			transition_in(card8.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card0.$$.fragment, local);
			transition_out(card1.$$.fragment, local);
			transition_out(card2.$$.fragment, local);
			transition_out(card3.$$.fragment, local);
			transition_out(card4.$$.fragment, local);
			transition_out(card5.$$.fragment, local);
			transition_out(card6.$$.fragment, local);
			transition_out(card7.$$.fragment, local);
			transition_out(card8.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			destroy_component(card0);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(div1);
			destroy_component(card1);
			destroy_component(card2);
			destroy_component(card3);
			destroy_component(card4);
			destroy_component(card5);
			destroy_component(card6);
			destroy_component(card7);
			destroy_component(card8);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(39:0) <Row>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let title_value;
	let t0;
	let h1;
	let t1;
	let t2;
	let t3;
	let t4;
	let current;
	document.title = title_value = /*title*/ ctx[0];

	const breadcrumb = new Breadcrumb({
			props: {
				class: "mb-4",
				$$slots: { default: [create_default_slot_21] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row0 = new Row({
			props: {
				$$slots: { default: [create_default_slot_17] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row1 = new Row({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("Карточки");
			t2 = space();
			create_component(breadcrumb.$$.fragment);
			t3 = space();
			create_component(row0.$$.fragment);
			t4 = space();
			create_component(row1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-46oba3\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Карточки");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			claim_component(breadcrumb.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(row0.$$.fragment, nodes);
			t4 = claim_space(nodes);
			claim_component(row1.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "mt-4");
			add_location(h1, file, 20, 0, 903);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			mount_component(breadcrumb, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(row0, target, anchor);
			insert_dev(target, t4, anchor);
			mount_component(row1, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*title*/ 1) && title_value !== (title_value = /*title*/ ctx[0])) {
				document.title = title_value;
			}

			const breadcrumb_changes = {};

			if (dirty & /*$$scope*/ 2) {
				breadcrumb_changes.$$scope = { dirty, ctx };
			}

			breadcrumb.$set(breadcrumb_changes);
			const row0_changes = {};

			if (dirty & /*$$scope*/ 2) {
				row0_changes.$$scope = { dirty, ctx };
			}

			row0.$set(row0_changes);
			const row1_changes = {};

			if (dirty & /*$$scope*/ 2) {
				row1_changes.$$scope = { dirty, ctx };
			}

			row1.$set(row1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(breadcrumb.$$.fragment, local);
			transition_in(row0.$$.fragment, local);
			transition_in(row1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(breadcrumb.$$.fragment, local);
			transition_out(row0.$$.fragment, local);
			transition_out(row1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			destroy_component(breadcrumb, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(row0, detaching);
			if (detaching) detach_dev(t4);
			destroy_component(row1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self) {
	let title = "Карточки | UI | Пользовательский Интерфейс";

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
	};

	return [title];
}

class Card_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Card_1",
			options,
			id: create_fragment.name
		});
	}
}

export default Card_1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC5hZWZmMmM0Mi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3JvdXRlcy91aS9jYXJkLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxyXG4gICAgaW1wb3J0ICBCcmVhZGNydW1iICBmcm9tIFwic3ZlbHRlc3RyYXAvc3JjL0JyZWFkY3J1bWIuc3ZlbHRlXCI7XHJcbiAgICBpbXBvcnQgIEJyZWFkY3J1bWJJdGVtICBmcm9tIFwic3ZlbHRlc3RyYXAvc3JjL0JyZWFkY3J1bWJJdGVtLnN2ZWx0ZVwiO1xyXG4gICAgaW1wb3J0ICBSb3cgIGZyb20gXCJzdmVsdGVzdHJhcC9zcmMvUm93LnN2ZWx0ZVwiO1xyXG4gICAgaW1wb3J0ICBDYXJkIGZyb20gXCJzdmVsdGVzdHJhcC9zcmMvQ2FyZC5zdmVsdGVcIjtcclxuICAgIGltcG9ydCAgQ2FyZEJvZHkgZnJvbSBcInN2ZWx0ZXN0cmFwL3NyYy9DYXJkQm9keS5zdmVsdGVcIjtcclxuICAgIGltcG9ydCAgQnV0dG9uIGZyb20gXCJzdmVsdGVzdHJhcC9zcmMvQnV0dG9uLnN2ZWx0ZVwiO1xyXG4gICAgaW1wb3J0ICBDYXJkRm9vdGVyIGZyb20gXCJzdmVsdGVzdHJhcC9zcmMvQ2FyZEZvb3Rlci5zdmVsdGVcIjtcclxuICAgIGltcG9ydCAgQ2FyZEhlYWRlciBmcm9tIFwic3ZlbHRlc3RyYXAvc3JjL0NhcmRGb290ZXIuc3ZlbHRlXCI7XHJcbiAgICBpbXBvcnQgIENhcmRJbWcgZnJvbSBcInN2ZWx0ZXN0cmFwL3NyYy9DYXJkSW1nLnN2ZWx0ZVwiO1xyXG4gICAgaW1wb3J0ICBDYXJkVGl0bGUgZnJvbSBcInN2ZWx0ZXN0cmFwL3NyYy9DYXJkVGl0bGUuc3ZlbHRlXCI7XHJcbiAgICBpbXBvcnQgIENhcmRUZXh0IGZyb20gXCJzdmVsdGVzdHJhcC9zcmMvQ2FyZFRleHQuc3ZlbHRlXCJcclxuICAgIGltcG9ydCAgQ2FyZFN1YnRpdGxlIGZyb20gXCJzdmVsdGVzdHJhcC9zcmMvQ2FyZFN1YnRpdGxlLnN2ZWx0ZVwiO1xyXG5cclxuICAgIGxldCB0aXRsZSA9IFwi0JrQsNGA0YLQvtGH0LrQuCB8IFVJIHwg0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GM0YHQutC40Lkg0JjQvdGC0LXRgNGE0LXQudGBXCI7XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN2ZWx0ZTpoZWFkPlxyXG4gICAgPHRpdGxlPnt0aXRsZX08L3RpdGxlPlxyXG48L3N2ZWx0ZTpoZWFkPlxyXG48aDEgY2xhc3M9XCJtdC00XCI+0JrQsNGA0YLQvtGH0LrQuDwvaDE+XHJcbjxCcmVhZGNydW1iIGNsYXNzPVwibWItNFwiPlxyXG4gICAgPEJyZWFkY3J1bWJJdGVtIGFjdGl2ZT7QmtCw0YDRgtC+0YfQutC4PC9CcmVhZGNydW1iSXRlbT5cclxuPC9CcmVhZGNydW1iPlxyXG48Um93PlxyXG4gICAgPGRpdiBjbGFzcz1cImNvbC14bC02XCI+XHJcbiAgICAgICAgPGgyIGNsYXNzPVwibXQtNFwiPtCa0LDRgNGC0L7Rh9C60Lg8L2gyPlxyXG4gICAgICAgIDxoNCBjbGFzcz1cIm10LTRcIj7Qn9GA0LjQvNC10YA8L2g0PlxyXG4gICAgICAgIDxDYXJkPlxyXG4gICAgICAgICAgICA8Q2FyZEJvZHk+0J/RgNC40LLQtdGCLCDQnNC40YAhPC9DYXJkQm9keT5cclxuICAgICAgICA8L0NhcmQ+XHJcbiAgICA8L2Rpdj5cclxuICAgIDxkaXYgY2xhc3M9XCJjb2wteGwtNlwiPlxyXG4gICAgICAgIDxoMiBjbGFzcz1cIm10LTRcIj7QodC+0LrRgNCw0YnQtdC90L3QsNGPINC30LDQv9C40YHRjDwvaDI+XHJcbiAgICAgICAgPGg0IGNsYXNzPVwibXQtNFwiPtCf0YDQuNC80LXRgDwvaDQ+XHJcbiAgICAgICAgPENhcmQgYm9keT7Qn9GA0L7RidCw0Lkg0LbQtdGB0YLQvtC60LjQuSDQvNC40YA8L0NhcmQ+XHJcbiAgICA8L2Rpdj5cclxuIDwvUm93PlxyXG48Um93PlxyXG4gICAgPGRpdiBjbGFzcz1cImNvbC14bC02XCI+XHJcbiAgICAgICAgPGgyIGNsYXNzPVwibXQtNFwiPtCl0LXQtNC10YAg0Lgg0KTRg9GC0LXRgDwvaDI+XHJcbiAgICAgICAgPGg0IGNsYXNzPVwibXQtNFwiPtCf0YDQuNC80LXRgDwvaDQ+XHJcbiAgICAgICAgPENhcmQgY2xhc3M9XCJtYi0zXCI+XHJcbiAgICAgICAgICAgIDxDYXJkSGVhZGVyPlxyXG4gICAgICAgICAgICAgICAgPENhcmRUaXRsZT7Ql9Cw0LPQvtC70L7QstC+0Lo8L0NhcmRUaXRsZT5cclxuICAgICAgICAgICAgPC9DYXJkSGVhZGVyPlxyXG4gICAgICAgICAgICA8Q2FyZEJvZHk+XHJcbiAgICAgICAgICAgICAgICA8Q2FyZFN1YnRpdGxlPtCf0L7QtNC30LDQs9C+0LvQvtCy0L7QuiDQutCw0YDRgtC+0YfQutC4PC9DYXJkU3VidGl0bGU+XHJcbiAgICAgICAgICAgICAgICA8Q2FyZFRleHQ+XHJcbiAgICAgICAgICAgICAgICAgICAg0JHRi9GB0YLRgNGL0Lkg0L/RgNC40LzQtdGAINGC0LXQutGB0YLQsCDQtNC70Y8g0L/QvtGB0YLRgNC+0LXQvdC40Y8g0L3QsCDQt9Cw0LPQvtC70L7QstC60LUg0LrQsNGA0YLQvtGH0LrQuFxyXG4gICAgICAgICAgICAgICAgICAgINC4INGB0L7RgdGC0LDQstC70Y/RjtGCINCx0L7Qu9GM0YjRg9GOINGH0LDRgdGC0Ywg0YHQvtC00LXRgNC20LjQvNC+0LPQviDQutCw0YDRgtC+0YfQutC4LlxyXG4gICAgICAgICAgICAgICAgPC9DYXJkVGV4dD5cclxuICAgICAgICAgICAgICAgIDxCdXR0b24+0JrQvdC+0L/QutCwPC9CdXR0b24+XHJcbiAgICAgICAgICAgIDwvQ2FyZEJvZHk+XHJcbiAgICAgICAgICAgIDxDYXJkRm9vdGVyPtCk0YPRgtC10YA8L0NhcmRGb290ZXI+XHJcbiAgICAgICAgPC9DYXJkPlxyXG4gICAgPC9kaXY+XHJcbiAgICA8ZGl2IGNsYXNzPVwiY29sLXhsLTZcIj5cclxuICAgICAgICA8aDIgY2xhc3M9XCJtdC00XCI+0KbQstC10YLQsCDQsiDQutCw0YDRgtC+0YfQutCw0YU8L2gyPlxyXG4gICAgICAgIDxoNCBjbGFzcz1cIm10LTRcIj7Qn9GA0LjQvNC10YA8L2g0PlxyXG4gICAgICAgIDxDYXJkIGJvZHkgY29sb3I9XCJwcmltYXJ5XCIgaW52ZXJzZSBjbGFzcz1cIm1iLTNcIj7QntGB0L3QvtCy0L3QvtC5PC9DYXJkPlxyXG4gICAgICAgIDxDYXJkIGJvZHkgY29sb3I9XCJzZWNvbmRhcnlcIiBjbGFzcz1cIm1iLTMgdGV4dC13aGl0ZVwiPtCS0YLQvtGA0LjRh9C90YvQuTwvQ2FyZD5cclxuICAgICAgICA8Q2FyZCBib2R5IGNvbG9yPVwic3VjY2Vzc1wiIGNsYXNzPVwibWItM1wiPtCj0YHQv9C10YjQvdGL0Lk8L0NhcmQ+XHJcbiAgICAgICAgPENhcmQgYm9keSBjb2xvcj1cImRhbmdlclwiIGNsYXNzPVwibWItMyB0ZXh0LXdoaXRlXCI+0J7Qv9Cw0YHQvdC+0YHRgtGMPC9DYXJkPlxyXG4gICAgICAgIDxDYXJkIGJvZHkgY29sb3I9XCJ3YXJuaW5nXCIgY2xhc3M9XCJtYi0zXCI+0J/RgNC10LTRg9C/0YDQtdC20LTQtdC90LjQtTwvQ2FyZD5cclxuICAgICAgICA8Q2FyZCBib2R5IGNvbG9yPVwiaW5mb1wiIGNsYXNzPVwibWItMyB0ZXh0LXdoaXRlXCI+0JjQvdGE0L48L0NhcmQ+XHJcbiAgICAgICAgPENhcmQgYm9keSBjb2xvcj1cImRhcmtcIiBpbnZlcnNlIGNsYXNzPVwibWItM1wiPtCi0ZHQvNC90YvQuTwvQ2FyZD5cclxuICAgICAgICA8Q2FyZCBib2R5IGNvbG9yPVwibGlnaHRcIiBjbGFzcz1cIm1iLTNcIj7QodCy0LXRgtC70YvQuTwvQ2FyZD5cclxuICAgIDwvZGl2PlxyXG48L1Jvdz5cclxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBY1EsS0FBSyxHQUFHLDRDQUE0Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
