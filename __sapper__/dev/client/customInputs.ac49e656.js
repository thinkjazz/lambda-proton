import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, P as Form, J as space, f as element, y as text, F as create_component, L as query_selector_all, j as detach_dev, K as claim_space, g as claim_element, h as children, z as claim_text, G as claim_component, k as attr_dev, l as add_location, n as insert_dev, o as append_dev, H as mount_component, r as transition_in, t as transition_out, I as destroy_component, Q as Label, T as CustomInput } from './client.943a825b.js';
import { B as Breadcrumb, a as BreadcrumbItem } from './BreadcrumbItem.995d9cf0.js';
import { R as Row } from './Row.e46bdd42.js';
import { F as FormGroup } from './FormGroup.9b9097f6.js';
import './FormText.fef16d1f.js';

/* src\routes\ui\customInputs.svelte generated by Svelte v3.18.1 */
const file = "src\\routes\\ui\\customInputs.svelte";

// (20:4) <BreadcrumbItem active>
function create_default_slot_29(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Настраиваемые вводы");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Настраиваемые вводы");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_29.name,
		type: "slot",
		source: "(20:4) <BreadcrumbItem active>",
		ctx
	});

	return block;
}

// (19:0) <Breadcrumb class="mb-4">
function create_default_slot_28(ctx) {
	let current;

	const breadcrumbitem = new BreadcrumbItem({
			props: {
				active: true,
				$$slots: { default: [create_default_slot_29] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(breadcrumbitem.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(breadcrumbitem.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(breadcrumbitem, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const breadcrumbitem_changes = {};

			if (dirty & /*$$scope*/ 2) {
				breadcrumbitem_changes.$$scope = { dirty, ctx };
			}

			breadcrumbitem.$set(breadcrumbitem_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(breadcrumbitem.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(breadcrumbitem.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(breadcrumbitem, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_28.name,
		type: "slot",
		source: "(19:0) <Breadcrumb class=\\\"mb-4\\\">",
		ctx
	});

	return block;
}

// (27:8) <Label for="exampleCheckbox">
function create_default_slot_27(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Чекбоксы");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Чекбоксы");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_27.name,
		type: "slot",
		source: "(27:8) <Label for=\\\"exampleCheckbox\\\">",
		ctx
	});

	return block;
}

// (26:4) <FormGroup>
function create_default_slot_26(ctx) {
	let t0;
	let div;
	let t1;
	let t2;
	let t3;
	let current;

	const label = new Label({
			props: {
				for: "exampleCheckbox",
				$$slots: { default: [create_default_slot_27] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const custominput0 = new CustomInput({
			props: {
				type: "checkbox",
				id: "exampleCustomCheckbox",
				label: "Отметьте этот пользовательский флажок"
			},
			$$inline: true
		});

	const custominput1 = new CustomInput({
			props: {
				type: "checkbox",
				id: "exampleCustomCheckbox2",
				label: "Или этот"
			},
			$$inline: true
		});

	const custominput2 = new CustomInput({
			props: {
				type: "checkbox",
				id: "exampleCustomCheckbox3",
				label: "Но не этот, он неактивный.",
				disabled: true
			},
			$$inline: true
		});

	const custominput3 = new CustomInput({
			props: {
				type: "checkbox",
				id: "exampleCustomCheckbox4",
				label: "Не могу нажать на эту этикетку, чтобы проверить!",
				htmlFor: "exampleCustomCheckbox4_X",
				disabled: true
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t0 = space();
			div = element("div");
			create_component(custominput0.$$.fragment);
			t1 = space();
			create_component(custominput1.$$.fragment);
			t2 = space();
			create_component(custominput2.$$.fragment);
			t3 = space();
			create_component(custominput3.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t0 = claim_space(nodes);
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			claim_component(custominput0.$$.fragment, div_nodes);
			t1 = claim_space(div_nodes);
			claim_component(custominput1.$$.fragment, div_nodes);
			t2 = claim_space(div_nodes);
			claim_component(custominput2.$$.fragment, div_nodes);
			t3 = claim_space(div_nodes);
			claim_component(custominput3.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(div, file, 27, 8, 1093);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, div, anchor);
			mount_component(custominput0, div, null);
			append_dev(div, t1);
			mount_component(custominput1, div, null);
			append_dev(div, t2);
			mount_component(custominput2, div, null);
			append_dev(div, t3);
			mount_component(custominput3, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 2) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(custominput0.$$.fragment, local);
			transition_in(custominput1.$$.fragment, local);
			transition_in(custominput2.$$.fragment, local);
			transition_in(custominput3.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(custominput0.$$.fragment, local);
			transition_out(custominput1.$$.fragment, local);
			transition_out(custominput2.$$.fragment, local);
			transition_out(custominput3.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div);
			destroy_component(custominput0);
			destroy_component(custominput1);
			destroy_component(custominput2);
			destroy_component(custominput3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_26.name,
		type: "slot",
		source: "(26:4) <FormGroup>",
		ctx
	});

	return block;
}

// (51:8) <Label for="exampleCheckbox">
function create_default_slot_25(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Радио-кнопки");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Радио-кнопки");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_25.name,
		type: "slot",
		source: "(51:8) <Label for=\\\"exampleCheckbox\\\">",
		ctx
	});

	return block;
}

// (50:4) <FormGroup>
function create_default_slot_24(ctx) {
	let t0;
	let div;
	let t1;
	let t2;
	let t3;
	let current;

	const label = new Label({
			props: {
				for: "exampleCheckbox",
				$$slots: { default: [create_default_slot_25] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const custominput0 = new CustomInput({
			props: {
				type: "radio",
				id: "exampleCustomRadio",
				name: "customRadio",
				label: "Выберите эту кастомную радио-кнопку"
			},
			$$inline: true
		});

	const custominput1 = new CustomInput({
			props: {
				type: "radio",
				id: "exampleCustomRadio2",
				name: "customRadio",
				label: "Или эту"
			},
			$$inline: true
		});

	const custominput2 = new CustomInput({
			props: {
				type: "radio",
				id: "exampleCustomRadio3",
				label: "Но не эту, она неактивна",
				disabled: true
			},
			$$inline: true
		});

	const custominput3 = new CustomInput({
			props: {
				type: "radio",
				id: "exampleCustomRadio4",
				label: "Нельзя нажать на эту метку, чтобы выбрать!",
				htmlFor: "exampleCustomRadio4_X",
				disabled: true
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t0 = space();
			div = element("div");
			create_component(custominput0.$$.fragment);
			t1 = space();
			create_component(custominput1.$$.fragment);
			t2 = space();
			create_component(custominput2.$$.fragment);
			t3 = space();
			create_component(custominput3.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t0 = claim_space(nodes);
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			claim_component(custominput0.$$.fragment, div_nodes);
			t1 = claim_space(div_nodes);
			claim_component(custominput1.$$.fragment, div_nodes);
			t2 = claim_space(div_nodes);
			claim_component(custominput2.$$.fragment, div_nodes);
			t3 = claim_space(div_nodes);
			claim_component(custominput3.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(div, file, 51, 8, 2040);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, div, anchor);
			mount_component(custominput0, div, null);
			append_dev(div, t1);
			mount_component(custominput1, div, null);
			append_dev(div, t2);
			mount_component(custominput2, div, null);
			append_dev(div, t3);
			mount_component(custominput3, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 2) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(custominput0.$$.fragment, local);
			transition_in(custominput1.$$.fragment, local);
			transition_in(custominput2.$$.fragment, local);
			transition_in(custominput3.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(custominput0.$$.fragment, local);
			transition_out(custominput1.$$.fragment, local);
			transition_out(custominput2.$$.fragment, local);
			transition_out(custominput3.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div);
			destroy_component(custominput0);
			destroy_component(custominput1);
			destroy_component(custominput2);
			destroy_component(custominput3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_24.name,
		type: "slot",
		source: "(50:4) <FormGroup>",
		ctx
	});

	return block;
}

// (77:8) <Label for="exampleCheckbox">
function create_default_slot_23(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Переключатели");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Переключатели");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_23.name,
		type: "slot",
		source: "(77:8) <Label for=\\\"exampleCheckbox\\\">",
		ctx
	});

	return block;
}

// (76:4) <FormGroup>
function create_default_slot_22(ctx) {
	let t0;
	let div;
	let t1;
	let t2;
	let t3;
	let current;

	const label = new Label({
			props: {
				for: "exampleCheckbox",
				$$slots: { default: [create_default_slot_23] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const custominput0 = new CustomInput({
			props: {
				type: "switch",
				id: "exampleCustomSwitch",
				name: "customSwitch",
				label: "Включите этот настраиваемый переключатель"
			},
			$$inline: true
		});

	const custominput1 = new CustomInput({
			props: {
				type: "switch",
				id: "exampleCustomSwitch2",
				name: "customSwitch",
				label: "Или этот"
			},
			$$inline: true
		});

	const custominput2 = new CustomInput({
			props: {
				type: "switch",
				id: "exampleCustomSwitch3",
				label: "Но только не этот, он того",
				disabled: true
			},
			$$inline: true
		});

	const custominput3 = new CustomInput({
			props: {
				type: "switch",
				id: "exampleCustomSwitch4",
				label: "Нельзя нажать на эту метку, чтобы включить!",
				htmlFor: "exampleCustomSwitch4_X",
				disabled: true
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t0 = space();
			div = element("div");
			create_component(custominput0.$$.fragment);
			t1 = space();
			create_component(custominput1.$$.fragment);
			t2 = space();
			create_component(custominput2.$$.fragment);
			t3 = space();
			create_component(custominput3.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t0 = claim_space(nodes);
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			claim_component(custominput0.$$.fragment, div_nodes);
			t1 = claim_space(div_nodes);
			claim_component(custominput1.$$.fragment, div_nodes);
			t2 = claim_space(div_nodes);
			claim_component(custominput2.$$.fragment, div_nodes);
			t3 = claim_space(div_nodes);
			claim_component(custominput3.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(div, file, 77, 8, 3022);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, div, anchor);
			mount_component(custominput0, div, null);
			append_dev(div, t1);
			mount_component(custominput1, div, null);
			append_dev(div, t2);
			mount_component(custominput2, div, null);
			append_dev(div, t3);
			mount_component(custominput3, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 2) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(custominput0.$$.fragment, local);
			transition_in(custominput1.$$.fragment, local);
			transition_in(custominput2.$$.fragment, local);
			transition_in(custominput3.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(custominput0.$$.fragment, local);
			transition_out(custominput1.$$.fragment, local);
			transition_out(custominput2.$$.fragment, local);
			transition_out(custominput3.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div);
			destroy_component(custominput0);
			destroy_component(custominput1);
			destroy_component(custominput2);
			destroy_component(custominput3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_22.name,
		type: "slot",
		source: "(76:4) <FormGroup>",
		ctx
	});

	return block;
}

// (103:8) <Label for="exampleCheckbox">
function create_default_slot_21(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Инлайновые чекбоксы");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Инлайновые чекбоксы");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_21.name,
		type: "slot",
		source: "(103:8) <Label for=\\\"exampleCheckbox\\\">",
		ctx
	});

	return block;
}

// (102:4) <FormGroup>
function create_default_slot_20(ctx) {
	let t0;
	let div;
	let t1;
	let current;

	const label = new Label({
			props: {
				for: "exampleCheckbox",
				$$slots: { default: [create_default_slot_21] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const custominput0 = new CustomInput({
			props: {
				type: "checkbox",
				id: "exampleCustomInline",
				label: "Встроенный специальный ввод",
				inline: true
			},
			$$inline: true
		});

	const custominput1 = new CustomInput({
			props: {
				type: "checkbox",
				id: "exampleCustomInline2",
				label: "и ещё один",
				inline: true
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t0 = space();
			div = element("div");
			create_component(custominput0.$$.fragment);
			t1 = space();
			create_component(custominput1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t0 = claim_space(nodes);
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			claim_component(custominput0.$$.fragment, div_nodes);
			t1 = claim_space(div_nodes);
			claim_component(custominput1.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(div, file, 103, 8, 4031);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, div, anchor);
			mount_component(custominput0, div, null);
			append_dev(div, t1);
			mount_component(custominput1, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 2) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(custominput0.$$.fragment, local);
			transition_in(custominput1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(custominput0.$$.fragment, local);
			transition_out(custominput1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div);
			destroy_component(custominput0);
			destroy_component(custominput1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_20.name,
		type: "slot",
		source: "(102:4) <FormGroup>",
		ctx
	});

	return block;
}

// (118:8) <Label for="exampleCustomSelect">
function create_default_slot_19(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Пользовательский выбор");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Пользовательский выбор");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_19.name,
		type: "slot",
		source: "(118:8) <Label for=\\\"exampleCustomSelect\\\">",
		ctx
	});

	return block;
}

// (119:8) <CustomInput type="select" id="exampleCustomSelect" name="customSelect">
function create_default_slot_18(ctx) {
	let option0;
	let t0;
	let t1;
	let option1;
	let t2;
	let t3;
	let option2;
	let t4;
	let t5;
	let option3;
	let t6;
	let t7;
	let option4;
	let t8;
	let t9;
	let option5;
	let t10;

	const block = {
		c: function create() {
			option0 = element("option");
			t0 = text("Выбери себе");
			t1 = space();
			option1 = element("option");
			t2 = text("Кошачий шампунь от блох");
			t3 = space();
			option2 = element("option");
			t4 = text("Глобус Тайваня");
			t5 = space();
			option3 = element("option");
			t6 = text("Северокорейский паспорт");
			t7 = space();
			option4 = element("option");
			t8 = text("Коробка люминесцентных презервативов (секондхенд)");
			t9 = space();
			option5 = element("option");
			t10 = text("Вставная челюсть");
			this.h();
		},
		l: function claim(nodes) {
			option0 = claim_element(nodes, "OPTION", { value: true });
			var option0_nodes = children(option0);
			t0 = claim_text(option0_nodes, "Выбери себе");
			option0_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			option1 = claim_element(nodes, "OPTION", { value: true });
			var option1_nodes = children(option1);
			t2 = claim_text(option1_nodes, "Кошачий шампунь от блох");
			option1_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			option2 = claim_element(nodes, "OPTION", { value: true });
			var option2_nodes = children(option2);
			t4 = claim_text(option2_nodes, "Глобус Тайваня");
			option2_nodes.forEach(detach_dev);
			t5 = claim_space(nodes);
			option3 = claim_element(nodes, "OPTION", { value: true });
			var option3_nodes = children(option3);
			t6 = claim_text(option3_nodes, "Северокорейский паспорт");
			option3_nodes.forEach(detach_dev);
			t7 = claim_space(nodes);
			option4 = claim_element(nodes, "OPTION", { value: true });
			var option4_nodes = children(option4);
			t8 = claim_text(option4_nodes, "Коробка люминесцентных презервативов (секондхенд)");
			option4_nodes.forEach(detach_dev);
			t9 = claim_space(nodes);
			option5 = claim_element(nodes, "OPTION", { value: true });
			var option5_nodes = children(option5);
			t10 = claim_text(option5_nodes, "Вставная челюсть");
			option5_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			option0.__value = "";
			option0.value = option0.__value;
			add_location(option0, file, 119, 12, 4634);
			option1.__value = "Кошачий шампунь от блох";
			option1.value = option1.__value;
			add_location(option1, file, 120, 12, 4685);
			option2.__value = "Глобус Тайваня";
			option2.value = option2.__value;
			add_location(option2, file, 121, 12, 4739);
			option3.__value = "Северокорейский паспорт";
			option3.value = option3.__value;
			add_location(option3, file, 122, 12, 4784);
			option4.__value = "Коробка люминесцентных презервативов (секондхенд)";
			option4.value = option4.__value;
			add_location(option4, file, 123, 12, 4838);
			option5.__value = "Вставная челюсть";
			option5.value = option5.__value;
			add_location(option5, file, 124, 12, 4918);
		},
		m: function mount(target, anchor) {
			insert_dev(target, option0, anchor);
			append_dev(option0, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, option1, anchor);
			append_dev(option1, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, option2, anchor);
			append_dev(option2, t4);
			insert_dev(target, t5, anchor);
			insert_dev(target, option3, anchor);
			append_dev(option3, t6);
			insert_dev(target, t7, anchor);
			insert_dev(target, option4, anchor);
			append_dev(option4, t8);
			insert_dev(target, t9, anchor);
			insert_dev(target, option5, anchor);
			append_dev(option5, t10);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(option0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(option1);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(option2);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(option3);
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(option4);
			if (detaching) detach_dev(t9);
			if (detaching) detach_dev(option5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_18.name,
		type: "slot",
		source: "(119:8) <CustomInput type=\\\"select\\\" id=\\\"exampleCustomSelect\\\" name=\\\"customSelect\\\">",
		ctx
	});

	return block;
}

// (117:4) <FormGroup>
function create_default_slot_17(ctx) {
	let t;
	let current;

	const label = new Label({
			props: {
				for: "exampleCustomSelect",
				$$slots: { default: [create_default_slot_19] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const custominput = new CustomInput({
			props: {
				type: "select",
				id: "exampleCustomSelect",
				name: "customSelect",
				$$slots: { default: [create_default_slot_18] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(custominput.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(custominput.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(custominput, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 2) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
			const custominput_changes = {};

			if (dirty & /*$$scope*/ 2) {
				custominput_changes.$$scope = { dirty, ctx };
			}

			custominput.$set(custominput_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(custominput.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(custominput.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(custominput, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_17.name,
		type: "slot",
		source: "(117:4) <FormGroup>",
		ctx
	});

	return block;
}

// (129:16) <Label for="exampleCustomMutlipleSelect">
function create_default_slot_16(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Пользовательский множественный выбор");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Пользовательский множественный выбор");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_16.name,
		type: "slot",
		source: "(129:16) <Label for=\\\"exampleCustomMutlipleSelect\\\">",
		ctx
	});

	return block;
}

// (130:16) <CustomInput                          type="select"                          id="exampleCustomMutlipleSelect"                          name="customSelect"                          multiple>
function create_default_slot_15(ctx) {
	let option0;
	let t0;
	let t1;
	let option1;
	let t2;
	let t3;
	let option2;
	let t4;
	let t5;
	let option3;
	let t6;
	let t7;
	let option4;
	let t8;
	let t9;
	let option5;
	let t10;

	const block = {
		c: function create() {
			option0 = element("option");
			t0 = text("Выбери себе");
			t1 = space();
			option1 = element("option");
			t2 = text("Кошачий шампунь от блох");
			t3 = space();
			option2 = element("option");
			t4 = text("Глобус Тайваня");
			t5 = space();
			option3 = element("option");
			t6 = text("Северокорейский паспорт");
			t7 = space();
			option4 = element("option");
			t8 = text("Коробка люминесцентных презервативов (секондхенд)");
			t9 = space();
			option5 = element("option");
			t10 = text("Вставная челюсть");
			this.h();
		},
		l: function claim(nodes) {
			option0 = claim_element(nodes, "OPTION", { value: true });
			var option0_nodes = children(option0);
			t0 = claim_text(option0_nodes, "Выбери себе");
			option0_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			option1 = claim_element(nodes, "OPTION", { value: true });
			var option1_nodes = children(option1);
			t2 = claim_text(option1_nodes, "Кошачий шампунь от блох");
			option1_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			option2 = claim_element(nodes, "OPTION", { value: true });
			var option2_nodes = children(option2);
			t4 = claim_text(option2_nodes, "Глобус Тайваня");
			option2_nodes.forEach(detach_dev);
			t5 = claim_space(nodes);
			option3 = claim_element(nodes, "OPTION", { value: true });
			var option3_nodes = children(option3);
			t6 = claim_text(option3_nodes, "Северокорейский паспорт");
			option3_nodes.forEach(detach_dev);
			t7 = claim_space(nodes);
			option4 = claim_element(nodes, "OPTION", { value: true });
			var option4_nodes = children(option4);
			t8 = claim_text(option4_nodes, "Коробка люминесцентных презервативов (секондхенд)");
			option4_nodes.forEach(detach_dev);
			t9 = claim_space(nodes);
			option5 = claim_element(nodes, "OPTION", { value: true });
			var option5_nodes = children(option5);
			t10 = claim_text(option5_nodes, "Вставная челюсть");
			option5_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			option0.__value = "";
			option0.value = option0.__value;
			add_location(option0, file, 134, 20, 5350);
			option1.__value = "Кошачий шампунь от блох";
			option1.value = option1.__value;
			add_location(option1, file, 135, 20, 5409);
			option2.__value = "Глобус Тайваня";
			option2.value = option2.__value;
			add_location(option2, file, 136, 20, 5471);
			option3.__value = "Северокорейский паспорт";
			option3.value = option3.__value;
			add_location(option3, file, 137, 20, 5524);
			option4.__value = "Коробка люминесцентных презервативов (секондхенд)";
			option4.value = option4.__value;
			add_location(option4, file, 138, 20, 5586);
			option5.__value = "Вставная челюсть";
			option5.value = option5.__value;
			add_location(option5, file, 139, 20, 5674);
		},
		m: function mount(target, anchor) {
			insert_dev(target, option0, anchor);
			append_dev(option0, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, option1, anchor);
			append_dev(option1, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, option2, anchor);
			append_dev(option2, t4);
			insert_dev(target, t5, anchor);
			insert_dev(target, option3, anchor);
			append_dev(option3, t6);
			insert_dev(target, t7, anchor);
			insert_dev(target, option4, anchor);
			append_dev(option4, t8);
			insert_dev(target, t9, anchor);
			insert_dev(target, option5, anchor);
			append_dev(option5, t10);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(option0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(option1);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(option2);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(option3);
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(option4);
			if (detaching) detach_dev(t9);
			if (detaching) detach_dev(option5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_15.name,
		type: "slot",
		source: "(130:16) <CustomInput                          type=\\\"select\\\"                          id=\\\"exampleCustomMutlipleSelect\\\"                          name=\\\"customSelect\\\"                          multiple>",
		ctx
	});

	return block;
}

// (128:12) <FormGroup>
function create_default_slot_14(ctx) {
	let t;
	let current;

	const label = new Label({
			props: {
				for: "exampleCustomMutlipleSelect",
				$$slots: { default: [create_default_slot_16] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const custominput = new CustomInput({
			props: {
				type: "select",
				id: "exampleCustomMutlipleSelect",
				name: "customSelect",
				multiple: true,
				$$slots: { default: [create_default_slot_15] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(custominput.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(custominput.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(custominput, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 2) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
			const custominput_changes = {};

			if (dirty & /*$$scope*/ 2) {
				custominput_changes.$$scope = { dirty, ctx };
			}

			custominput.$set(custominput_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(custominput.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(custominput.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(custominput, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_14.name,
		type: "slot",
		source: "(128:12) <FormGroup>",
		ctx
	});

	return block;
}

// (144:16) <Label for="exampleCustomSelectDisabled">
function create_default_slot_13(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Пользовательский Выбор Отключено");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Пользовательский Выбор Отключено");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13.name,
		type: "slot",
		source: "(144:16) <Label for=\\\"exampleCustomSelectDisabled\\\">",
		ctx
	});

	return block;
}

// (145:16) <CustomInput                          type="select"                          id="exampleCustomSelectDisabled"                          name="customSelect"                          disabled>
function create_default_slot_12(ctx) {
	let option0;
	let t0;
	let t1;
	let option1;
	let t2;
	let t3;
	let option2;
	let t4;
	let t5;
	let option3;
	let t6;
	let t7;
	let option4;
	let t8;
	let t9;
	let option5;
	let t10;

	const block = {
		c: function create() {
			option0 = element("option");
			t0 = text("Выбери себе");
			t1 = space();
			option1 = element("option");
			t2 = text("Кошачий шампунь от блох");
			t3 = space();
			option2 = element("option");
			t4 = text("Глобус Тайваня");
			t5 = space();
			option3 = element("option");
			t6 = text("Северокорейский паспорт");
			t7 = space();
			option4 = element("option");
			t8 = text("Коробка люминесцентных презервативов (секондхенд)");
			t9 = space();
			option5 = element("option");
			t10 = text("Вставная челюсть");
			this.h();
		},
		l: function claim(nodes) {
			option0 = claim_element(nodes, "OPTION", { value: true });
			var option0_nodes = children(option0);
			t0 = claim_text(option0_nodes, "Выбери себе");
			option0_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			option1 = claim_element(nodes, "OPTION", { value: true });
			var option1_nodes = children(option1);
			t2 = claim_text(option1_nodes, "Кошачий шампунь от блох");
			option1_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			option2 = claim_element(nodes, "OPTION", { value: true });
			var option2_nodes = children(option2);
			t4 = claim_text(option2_nodes, "Глобус Тайваня");
			option2_nodes.forEach(detach_dev);
			t5 = claim_space(nodes);
			option3 = claim_element(nodes, "OPTION", { value: true });
			var option3_nodes = children(option3);
			t6 = claim_text(option3_nodes, "Северокорейский паспорт");
			option3_nodes.forEach(detach_dev);
			t7 = claim_space(nodes);
			option4 = claim_element(nodes, "OPTION", { value: true });
			var option4_nodes = children(option4);
			t8 = claim_text(option4_nodes, "Коробка люминесцентных презервативов (секондхенд)");
			option4_nodes.forEach(detach_dev);
			t9 = claim_space(nodes);
			option5 = claim_element(nodes, "OPTION", { value: true });
			var option5_nodes = children(option5);
			t10 = claim_text(option5_nodes, "Вставная челюсть");
			option5_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			option0.__value = "";
			option0.value = option0.__value;
			add_location(option0, file, 149, 20, 6118);
			option1.__value = "Кошачий шампунь от блох";
			option1.value = option1.__value;
			add_location(option1, file, 150, 20, 6177);
			option2.__value = "Глобус Тайваня";
			option2.value = option2.__value;
			add_location(option2, file, 151, 20, 6239);
			option3.__value = "Северокорейский паспорт";
			option3.value = option3.__value;
			add_location(option3, file, 152, 20, 6292);
			option4.__value = "Коробка люминесцентных презервативов (секондхенд)";
			option4.value = option4.__value;
			add_location(option4, file, 153, 20, 6354);
			option5.__value = "Вставная челюсть";
			option5.value = option5.__value;
			add_location(option5, file, 154, 20, 6442);
		},
		m: function mount(target, anchor) {
			insert_dev(target, option0, anchor);
			append_dev(option0, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, option1, anchor);
			append_dev(option1, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, option2, anchor);
			append_dev(option2, t4);
			insert_dev(target, t5, anchor);
			insert_dev(target, option3, anchor);
			append_dev(option3, t6);
			insert_dev(target, t7, anchor);
			insert_dev(target, option4, anchor);
			append_dev(option4, t8);
			insert_dev(target, t9, anchor);
			insert_dev(target, option5, anchor);
			append_dev(option5, t10);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(option0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(option1);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(option2);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(option3);
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(option4);
			if (detaching) detach_dev(t9);
			if (detaching) detach_dev(option5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12.name,
		type: "slot",
		source: "(145:16) <CustomInput                          type=\\\"select\\\"                          id=\\\"exampleCustomSelectDisabled\\\"                          name=\\\"customSelect\\\"                          disabled>",
		ctx
	});

	return block;
}

// (143:12) <FormGroup>
function create_default_slot_11(ctx) {
	let t;
	let current;

	const label = new Label({
			props: {
				for: "exampleCustomSelectDisabled",
				$$slots: { default: [create_default_slot_13] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const custominput = new CustomInput({
			props: {
				type: "select",
				id: "exampleCustomSelectDisabled",
				name: "customSelect",
				disabled: true,
				$$slots: { default: [create_default_slot_12] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(custominput.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(custominput.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(custominput, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 2) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
			const custominput_changes = {};

			if (dirty & /*$$scope*/ 2) {
				custominput_changes.$$scope = { dirty, ctx };
			}

			custominput.$set(custominput_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(custominput.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(custominput.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(custominput, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11.name,
		type: "slot",
		source: "(143:12) <FormGroup>",
		ctx
	});

	return block;
}

// (159:16) <Label for="exampleCustomMutlipleSelectDisabled">
function create_default_slot_10(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Пользовательский Выбор множества Отключено");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Пользовательский Выбор множества Отключено");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(159:16) <Label for=\\\"exampleCustomMutlipleSelectDisabled\\\">",
		ctx
	});

	return block;
}

// (162:16) <CustomInput                          type="select"                          id="exampleCustomMutlipleSelectDisabled"                          name="customSelect"                          multiple                          disabled>
function create_default_slot_9(ctx) {
	let option0;
	let t0;
	let t1;
	let option1;
	let t2;
	let t3;
	let option2;
	let t4;
	let t5;
	let option3;
	let t6;
	let t7;
	let option4;
	let t8;
	let t9;
	let option5;
	let t10;

	const block = {
		c: function create() {
			option0 = element("option");
			t0 = text("Выбери себе");
			t1 = space();
			option1 = element("option");
			t2 = text("Кошачий шампунь от блох");
			t3 = space();
			option2 = element("option");
			t4 = text("Глобус Тайваня");
			t5 = space();
			option3 = element("option");
			t6 = text("Северокорейский паспорт");
			t7 = space();
			option4 = element("option");
			t8 = text("Коробка люминесцентных презервативов (секондхенд)");
			t9 = space();
			option5 = element("option");
			t10 = text("Вставная челюсть");
			this.h();
		},
		l: function claim(nodes) {
			option0 = claim_element(nodes, "OPTION", { value: true });
			var option0_nodes = children(option0);
			t0 = claim_text(option0_nodes, "Выбери себе");
			option0_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			option1 = claim_element(nodes, "OPTION", { value: true });
			var option1_nodes = children(option1);
			t2 = claim_text(option1_nodes, "Кошачий шампунь от блох");
			option1_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			option2 = claim_element(nodes, "OPTION", { value: true });
			var option2_nodes = children(option2);
			t4 = claim_text(option2_nodes, "Глобус Тайваня");
			option2_nodes.forEach(detach_dev);
			t5 = claim_space(nodes);
			option3 = claim_element(nodes, "OPTION", { value: true });
			var option3_nodes = children(option3);
			t6 = claim_text(option3_nodes, "Северокорейский паспорт");
			option3_nodes.forEach(detach_dev);
			t7 = claim_space(nodes);
			option4 = claim_element(nodes, "OPTION", { value: true });
			var option4_nodes = children(option4);
			t8 = claim_text(option4_nodes, "Коробка люминесцентных презервативов (секондхенд)");
			option4_nodes.forEach(detach_dev);
			t9 = claim_space(nodes);
			option5 = claim_element(nodes, "OPTION", { value: true });
			var option5_nodes = children(option5);
			t10 = claim_text(option5_nodes, "Вставная челюсть");
			option5_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			option0.__value = "";
			option0.value = option0.__value;
			add_location(option0, file, 167, 20, 6986);
			option1.__value = "Кошачий шампунь от блох";
			option1.value = option1.__value;
			add_location(option1, file, 168, 20, 7045);
			option2.__value = "Глобус Тайваня";
			option2.value = option2.__value;
			add_location(option2, file, 169, 20, 7107);
			option3.__value = "Северокорейский паспорт";
			option3.value = option3.__value;
			add_location(option3, file, 170, 20, 7160);
			option4.__value = "Коробка люминесцентных презервативов (секондхенд)";
			option4.value = option4.__value;
			add_location(option4, file, 171, 20, 7222);
			option5.__value = "Вставная челюсть";
			option5.value = option5.__value;
			add_location(option5, file, 172, 20, 7310);
		},
		m: function mount(target, anchor) {
			insert_dev(target, option0, anchor);
			append_dev(option0, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, option1, anchor);
			append_dev(option1, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, option2, anchor);
			append_dev(option2, t4);
			insert_dev(target, t5, anchor);
			insert_dev(target, option3, anchor);
			append_dev(option3, t6);
			insert_dev(target, t7, anchor);
			insert_dev(target, option4, anchor);
			append_dev(option4, t8);
			insert_dev(target, t9, anchor);
			insert_dev(target, option5, anchor);
			append_dev(option5, t10);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(option0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(option1);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(option2);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(option3);
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(option4);
			if (detaching) detach_dev(t9);
			if (detaching) detach_dev(option5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(162:16) <CustomInput                          type=\\\"select\\\"                          id=\\\"exampleCustomMutlipleSelectDisabled\\\"                          name=\\\"customSelect\\\"                          multiple                          disabled>",
		ctx
	});

	return block;
}

// (158:12) <FormGroup>
function create_default_slot_8(ctx) {
	let t;
	let current;

	const label = new Label({
			props: {
				for: "exampleCustomMutlipleSelectDisabled",
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const custominput = new CustomInput({
			props: {
				type: "select",
				id: "exampleCustomMutlipleSelectDisabled",
				name: "customSelect",
				multiple: true,
				disabled: true,
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(custominput.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(custominput.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(custominput, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 2) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
			const custominput_changes = {};

			if (dirty & /*$$scope*/ 2) {
				custominput_changes.$$scope = { dirty, ctx };
			}

			custominput.$set(custominput_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(custominput.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(custominput.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(custominput, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(158:12) <FormGroup>",
		ctx
	});

	return block;
}

// (177:16) <Label for="exampleCustomFileBrowser">
function create_default_slot_7(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Файловый браузер");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Файловый браузер");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(177:16) <Label for=\\\"exampleCustomFileBrowser\\\">",
		ctx
	});

	return block;
}

// (176:12) <FormGroup>
function create_default_slot_6(ctx) {
	let t;
	let current;

	const label = new Label({
			props: {
				for: "exampleCustomFileBrowser",
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const custominput = new CustomInput({
			props: {
				type: "file",
				id: "exampleCustomFileBrowser",
				name: "customFile"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(custominput.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(custominput.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(custominput, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 2) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(custominput.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(custominput.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(custominput, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(176:12) <FormGroup>",
		ctx
	});

	return block;
}

// (181:16) <Label for="exampleCustomFileBrowser">
function create_default_slot_5(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Файловый браузер с пользовательской меткой");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Файловый браузер с пользовательской меткой");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(181:16) <Label for=\\\"exampleCustomFileBrowser\\\">",
		ctx
	});

	return block;
}

// (180:12) <FormGroup>
function create_default_slot_4(ctx) {
	let t;
	let current;

	const label = new Label({
			props: {
				for: "exampleCustomFileBrowser",
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const custominput = new CustomInput({
			props: {
				type: "file",
				id: "exampleCustomFileBrowser",
				name: "customFile",
				label: "Эй, выбери файл!"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(custominput.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(custominput.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(custominput, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 2) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(custominput.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(custominput.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(custominput, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(180:12) <FormGroup>",
		ctx
	});

	return block;
}

// (189:16) <Label for="exampleCustomFileBrowser">
function create_default_slot_3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Браузер файлов Отключен");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Браузер файлов Отключен");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(189:16) <Label for=\\\"exampleCustomFileBrowser\\\">",
		ctx
	});

	return block;
}

// (188:12) <FormGroup>
function create_default_slot_2(ctx) {
	let t;
	let current;

	const label = new Label({
			props: {
				for: "exampleCustomFileBrowser",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const custominput = new CustomInput({
			props: {
				type: "file",
				id: "exampleCustomFileBrowser",
				name: "customFile",
				disabled: true
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(custominput.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(custominput.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(custominput, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 2) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(custominput.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(custominput.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(custominput, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(188:12) <FormGroup>",
		ctx
	});

	return block;
}

// (25:0) <Form>
function create_default_slot_1(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;
	let t7;
	let t8;
	let t9;
	let current;

	const formgroup0 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_26] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const formgroup1 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_24] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const formgroup2 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_22] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const formgroup3 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_20] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const formgroup4 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_17] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const formgroup5 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_14] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const formgroup6 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const formgroup7 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const formgroup8 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const formgroup9 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const formgroup10 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(formgroup0.$$.fragment);
			t0 = space();
			create_component(formgroup1.$$.fragment);
			t1 = space();
			create_component(formgroup2.$$.fragment);
			t2 = space();
			create_component(formgroup3.$$.fragment);
			t3 = space();
			create_component(formgroup4.$$.fragment);
			t4 = space();
			create_component(formgroup5.$$.fragment);
			t5 = space();
			create_component(formgroup6.$$.fragment);
			t6 = space();
			create_component(formgroup7.$$.fragment);
			t7 = space();
			create_component(formgroup8.$$.fragment);
			t8 = space();
			create_component(formgroup9.$$.fragment);
			t9 = space();
			create_component(formgroup10.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(formgroup0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(formgroup1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(formgroup2.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(formgroup3.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(formgroup4.$$.fragment, nodes);
			t4 = claim_space(nodes);
			claim_component(formgroup5.$$.fragment, nodes);
			t5 = claim_space(nodes);
			claim_component(formgroup6.$$.fragment, nodes);
			t6 = claim_space(nodes);
			claim_component(formgroup7.$$.fragment, nodes);
			t7 = claim_space(nodes);
			claim_component(formgroup8.$$.fragment, nodes);
			t8 = claim_space(nodes);
			claim_component(formgroup9.$$.fragment, nodes);
			t9 = claim_space(nodes);
			claim_component(formgroup10.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(formgroup0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(formgroup1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(formgroup2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(formgroup3, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(formgroup4, target, anchor);
			insert_dev(target, t4, anchor);
			mount_component(formgroup5, target, anchor);
			insert_dev(target, t5, anchor);
			mount_component(formgroup6, target, anchor);
			insert_dev(target, t6, anchor);
			mount_component(formgroup7, target, anchor);
			insert_dev(target, t7, anchor);
			mount_component(formgroup8, target, anchor);
			insert_dev(target, t8, anchor);
			mount_component(formgroup9, target, anchor);
			insert_dev(target, t9, anchor);
			mount_component(formgroup10, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const formgroup0_changes = {};

			if (dirty & /*$$scope*/ 2) {
				formgroup0_changes.$$scope = { dirty, ctx };
			}

			formgroup0.$set(formgroup0_changes);
			const formgroup1_changes = {};

			if (dirty & /*$$scope*/ 2) {
				formgroup1_changes.$$scope = { dirty, ctx };
			}

			formgroup1.$set(formgroup1_changes);
			const formgroup2_changes = {};

			if (dirty & /*$$scope*/ 2) {
				formgroup2_changes.$$scope = { dirty, ctx };
			}

			formgroup2.$set(formgroup2_changes);
			const formgroup3_changes = {};

			if (dirty & /*$$scope*/ 2) {
				formgroup3_changes.$$scope = { dirty, ctx };
			}

			formgroup3.$set(formgroup3_changes);
			const formgroup4_changes = {};

			if (dirty & /*$$scope*/ 2) {
				formgroup4_changes.$$scope = { dirty, ctx };
			}

			formgroup4.$set(formgroup4_changes);
			const formgroup5_changes = {};

			if (dirty & /*$$scope*/ 2) {
				formgroup5_changes.$$scope = { dirty, ctx };
			}

			formgroup5.$set(formgroup5_changes);
			const formgroup6_changes = {};

			if (dirty & /*$$scope*/ 2) {
				formgroup6_changes.$$scope = { dirty, ctx };
			}

			formgroup6.$set(formgroup6_changes);
			const formgroup7_changes = {};

			if (dirty & /*$$scope*/ 2) {
				formgroup7_changes.$$scope = { dirty, ctx };
			}

			formgroup7.$set(formgroup7_changes);
			const formgroup8_changes = {};

			if (dirty & /*$$scope*/ 2) {
				formgroup8_changes.$$scope = { dirty, ctx };
			}

			formgroup8.$set(formgroup8_changes);
			const formgroup9_changes = {};

			if (dirty & /*$$scope*/ 2) {
				formgroup9_changes.$$scope = { dirty, ctx };
			}

			formgroup9.$set(formgroup9_changes);
			const formgroup10_changes = {};

			if (dirty & /*$$scope*/ 2) {
				formgroup10_changes.$$scope = { dirty, ctx };
			}

			formgroup10.$set(formgroup10_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(formgroup0.$$.fragment, local);
			transition_in(formgroup1.$$.fragment, local);
			transition_in(formgroup2.$$.fragment, local);
			transition_in(formgroup3.$$.fragment, local);
			transition_in(formgroup4.$$.fragment, local);
			transition_in(formgroup5.$$.fragment, local);
			transition_in(formgroup6.$$.fragment, local);
			transition_in(formgroup7.$$.fragment, local);
			transition_in(formgroup8.$$.fragment, local);
			transition_in(formgroup9.$$.fragment, local);
			transition_in(formgroup10.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(formgroup0.$$.fragment, local);
			transition_out(formgroup1.$$.fragment, local);
			transition_out(formgroup2.$$.fragment, local);
			transition_out(formgroup3.$$.fragment, local);
			transition_out(formgroup4.$$.fragment, local);
			transition_out(formgroup5.$$.fragment, local);
			transition_out(formgroup6.$$.fragment, local);
			transition_out(formgroup7.$$.fragment, local);
			transition_out(formgroup8.$$.fragment, local);
			transition_out(formgroup9.$$.fragment, local);
			transition_out(formgroup10.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(formgroup0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(formgroup1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(formgroup2, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(formgroup3, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(formgroup4, detaching);
			if (detaching) detach_dev(t4);
			destroy_component(formgroup5, detaching);
			if (detaching) detach_dev(t5);
			destroy_component(formgroup6, detaching);
			if (detaching) detach_dev(t6);
			destroy_component(formgroup7, detaching);
			if (detaching) detach_dev(t7);
			destroy_component(formgroup8, detaching);
			if (detaching) detach_dev(t8);
			destroy_component(formgroup9, detaching);
			if (detaching) detach_dev(t9);
			destroy_component(formgroup10, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(25:0) <Form>",
		ctx
	});

	return block;
}

// (22:0) <Row>
function create_default_slot(ctx) {
	let div;
	let h2;
	let t0;
	let t1;
	let current;

	const form = new Form({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			h2 = element("h2");
			t0 = text("Настраиваемые вводы");
			t1 = space();
			create_component(form.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h2 = claim_element(div_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "Настраиваемые вводы");
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			claim_component(form.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "mt-4");
			add_location(h2, file, 23, 8, 962);
			attr_dev(div, "class", "col-xl-6");
			add_location(div, file, 22, 4, 930);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h2);
			append_dev(h2, t0);
			append_dev(div, t1);
			mount_component(form, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const form_changes = {};

			if (dirty & /*$$scope*/ 2) {
				form_changes.$$scope = { dirty, ctx };
			}

			form.$set(form_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(form.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(form.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(form);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(22:0) <Row>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let title_value;
	let t0;
	let h1;
	let t1;
	let t2;
	let t3;
	let current;
	document.title = title_value = /*title*/ ctx[0];

	const breadcrumb = new Breadcrumb({
			props: {
				class: "mb-4",
				$$slots: { default: [create_default_slot_28] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row = new Row({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("Настраиваемые вводы");
			t2 = space();
			create_component(breadcrumb.$$.fragment);
			t3 = space();
			create_component(row.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-46oba3\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Настраиваемые вводы");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			claim_component(breadcrumb.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(row.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "mt-4");
			add_location(h1, file, 17, 0, 769);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			mount_component(breadcrumb, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(row, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*title*/ 1) && title_value !== (title_value = /*title*/ ctx[0])) {
				document.title = title_value;
			}

			const breadcrumb_changes = {};

			if (dirty & /*$$scope*/ 2) {
				breadcrumb_changes.$$scope = { dirty, ctx };
			}

			breadcrumb.$set(breadcrumb_changes);
			const row_changes = {};

			if (dirty & /*$$scope*/ 2) {
				row_changes.$$scope = { dirty, ctx };
			}

			row.$set(row_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(breadcrumb.$$.fragment, local);
			transition_in(row.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(breadcrumb.$$.fragment, local);
			transition_out(row.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			destroy_component(breadcrumb, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(row, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self) {
	let title = "Настраиваемые вводы | UI | Пользовательский Интерфейс";

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
	};

	return [title];
}

class CustomInputs extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CustomInputs",
			options,
			id: create_fragment.name
		});
	}
}

export default CustomInputs;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
