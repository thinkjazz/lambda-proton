import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, J as space, f as element, y as text, F as create_component, L as query_selector_all, j as detach_dev, K as claim_space, g as claim_element, h as children, z as claim_text, G as claim_component, k as attr_dev, l as add_location, n as insert_dev, o as append_dev, H as mount_component, r as transition_in, t as transition_out, I as destroy_component, B as noop } from './client.03602956.js';
import { B as Breadcrumb, a as BreadcrumbItem } from './BreadcrumbItem.bf5aac0f.js';
import { R as Row } from './Row.a1a719fc.js';
import { P as Progress } from './Progress.bdfd4983.js';

/* src\routes\ui\progress.svelte generated by Svelte v3.18.1 */
const file = "src\\routes\\ui\\progress.svelte";

// (27:4) <BreadcrumbItem active>
function create_default_slot_37(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Прогресс бар");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Прогресс бар");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_37.name,
		type: "slot",
		source: "(27:4) <BreadcrumbItem active>",
		ctx
	});

	return block;
}

// (26:0) <Breadcrumb class="mb-4">
function create_default_slot_36(ctx) {
	let current;

	const breadcrumbitem = new BreadcrumbItem({
			props: {
				active: true,
				$$slots: { default: [create_default_slot_37] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(breadcrumbitem.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(breadcrumbitem.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(breadcrumbitem, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const breadcrumbitem_changes = {};

			if (dirty & /*$$scope*/ 4) {
				breadcrumbitem_changes.$$scope = { dirty, ctx };
			}

			breadcrumbitem.$set(breadcrumbitem_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(breadcrumbitem.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(breadcrumbitem.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(breadcrumbitem, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_36.name,
		type: "slot",
		source: "(26:0) <Breadcrumb class=\\\"mb-4\\\">",
		ctx
	});

	return block;
}

// (44:8) <Progress multi>
function create_default_slot_35(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let current;

	const progress0 = new Progress({
			props: { bar: true, value: "15" },
			$$inline: true
		});

	const progress1 = new Progress({
			props: { bar: true, color: "success", value: "30" },
			$$inline: true
		});

	const progress2 = new Progress({
			props: { bar: true, color: "info", value: "25" },
			$$inline: true
		});

	const progress3 = new Progress({
			props: { bar: true, color: "warning", value: "20" },
			$$inline: true
		});

	const progress4 = new Progress({
			props: { bar: true, color: "danger", value: "5" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(progress0.$$.fragment);
			t0 = space();
			create_component(progress1.$$.fragment);
			t1 = space();
			create_component(progress2.$$.fragment);
			t2 = space();
			create_component(progress3.$$.fragment);
			t3 = space();
			create_component(progress4.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(progress0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(progress1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(progress2.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(progress3.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(progress4.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(progress0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(progress1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(progress2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(progress3, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(progress4, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(progress0.$$.fragment, local);
			transition_in(progress1.$$.fragment, local);
			transition_in(progress2.$$.fragment, local);
			transition_in(progress3.$$.fragment, local);
			transition_in(progress4.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(progress0.$$.fragment, local);
			transition_out(progress1.$$.fragment, local);
			transition_out(progress2.$$.fragment, local);
			transition_out(progress3.$$.fragment, local);
			transition_out(progress4.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(progress0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(progress1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(progress2, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(progress3, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(progress4, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_35.name,
		type: "slot",
		source: "(44:8) <Progress multi>",
		ctx
	});

	return block;
}

// (29:0) <Row>
function create_default_slot_34(ctx) {
	let div6;
	let h2;
	let t0;
	let t1;
	let h3;
	let t2;
	let t3;
	let div0;
	let t4;
	let t5;
	let t6;
	let div1;
	let t7;
	let t8;
	let t9;
	let div2;
	let t10;
	let t11;
	let t12;
	let div3;
	let t13;
	let t14;
	let t15;
	let div4;
	let t16;
	let t17;
	let t18;
	let div5;
	let t19;
	let t20;
	let current;
	const progress0 = new Progress({ $$inline: true });
	const progress1 = new Progress({ props: { value: "25" }, $$inline: true });
	const progress2 = new Progress({ props: { value: 50 }, $$inline: true });
	const progress3 = new Progress({ props: { value: 75 }, $$inline: true });
	const progress4 = new Progress({ props: { value: "100" }, $$inline: true });

	const progress5 = new Progress({
			props: {
				multi: true,
				$$slots: { default: [create_default_slot_35] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div6 = element("div");
			h2 = element("h2");
			t0 = text("Прогресс бар");
			t1 = space();
			h3 = element("h3");
			t2 = text("Пример");
			t3 = space();
			div0 = element("div");
			t4 = text("0%");
			t5 = space();
			create_component(progress0.$$.fragment);
			t6 = space();
			div1 = element("div");
			t7 = text("25%");
			t8 = space();
			create_component(progress1.$$.fragment);
			t9 = space();
			div2 = element("div");
			t10 = text("50%");
			t11 = space();
			create_component(progress2.$$.fragment);
			t12 = space();
			div3 = element("div");
			t13 = text("75%");
			t14 = space();
			create_component(progress3.$$.fragment);
			t15 = space();
			div4 = element("div");
			t16 = text("100%");
			t17 = space();
			create_component(progress4.$$.fragment);
			t18 = space();
			div5 = element("div");
			t19 = text("Множество шкал");
			t20 = space();
			create_component(progress5.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div6 = claim_element(nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			h2 = claim_element(div6_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "Прогресс бар");
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(div6_nodes);
			h3 = claim_element(div6_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t2 = claim_text(h3_nodes, "Пример");
			h3_nodes.forEach(detach_dev);
			t3 = claim_space(div6_nodes);
			div0 = claim_element(div6_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t4 = claim_text(div0_nodes, "0%");
			div0_nodes.forEach(detach_dev);
			t5 = claim_space(div6_nodes);
			claim_component(progress0.$$.fragment, div6_nodes);
			t6 = claim_space(div6_nodes);
			div1 = claim_element(div6_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t7 = claim_text(div1_nodes, "25%");
			div1_nodes.forEach(detach_dev);
			t8 = claim_space(div6_nodes);
			claim_component(progress1.$$.fragment, div6_nodes);
			t9 = claim_space(div6_nodes);
			div2 = claim_element(div6_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			t10 = claim_text(div2_nodes, "50%");
			div2_nodes.forEach(detach_dev);
			t11 = claim_space(div6_nodes);
			claim_component(progress2.$$.fragment, div6_nodes);
			t12 = claim_space(div6_nodes);
			div3 = claim_element(div6_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			t13 = claim_text(div3_nodes, "75%");
			div3_nodes.forEach(detach_dev);
			t14 = claim_space(div6_nodes);
			claim_component(progress3.$$.fragment, div6_nodes);
			t15 = claim_space(div6_nodes);
			div4 = claim_element(div6_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			t16 = claim_text(div4_nodes, "100%");
			div4_nodes.forEach(detach_dev);
			t17 = claim_space(div6_nodes);
			claim_component(progress4.$$.fragment, div6_nodes);
			t18 = claim_space(div6_nodes);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			t19 = claim_text(div5_nodes, "Множество шкал");
			div5_nodes.forEach(detach_dev);
			t20 = claim_space(div6_nodes);
			claim_component(progress5.$$.fragment, div6_nodes);
			div6_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "mt-4");
			add_location(h2, file, 30, 8, 793);
			attr_dev(h3, "class", "mt-4");
			add_location(h3, file, 31, 8, 837);
			attr_dev(div0, "class", "text-center");
			add_location(div0, file, 32, 8, 875);
			attr_dev(div1, "class", "text-center");
			add_location(div1, file, 34, 8, 940);
			attr_dev(div2, "class", "text-center");
			add_location(div2, file, 36, 8, 1017);
			attr_dev(div3, "class", "text-center");
			add_location(div3, file, 38, 8, 1094);
			attr_dev(div4, "class", "text-center");
			add_location(div4, file, 40, 8, 1171);
			attr_dev(div5, "class", "text-center");
			add_location(div5, file, 42, 8, 1250);
			attr_dev(div6, "class", "col-xl-6");
			add_location(div6, file, 29, 4, 761);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div6, anchor);
			append_dev(div6, h2);
			append_dev(h2, t0);
			append_dev(div6, t1);
			append_dev(div6, h3);
			append_dev(h3, t2);
			append_dev(div6, t3);
			append_dev(div6, div0);
			append_dev(div0, t4);
			append_dev(div6, t5);
			mount_component(progress0, div6, null);
			append_dev(div6, t6);
			append_dev(div6, div1);
			append_dev(div1, t7);
			append_dev(div6, t8);
			mount_component(progress1, div6, null);
			append_dev(div6, t9);
			append_dev(div6, div2);
			append_dev(div2, t10);
			append_dev(div6, t11);
			mount_component(progress2, div6, null);
			append_dev(div6, t12);
			append_dev(div6, div3);
			append_dev(div3, t13);
			append_dev(div6, t14);
			mount_component(progress3, div6, null);
			append_dev(div6, t15);
			append_dev(div6, div4);
			append_dev(div4, t16);
			append_dev(div6, t17);
			mount_component(progress4, div6, null);
			append_dev(div6, t18);
			append_dev(div6, div5);
			append_dev(div5, t19);
			append_dev(div6, t20);
			mount_component(progress5, div6, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const progress5_changes = {};

			if (dirty & /*$$scope*/ 4) {
				progress5_changes.$$scope = { dirty, ctx };
			}

			progress5.$set(progress5_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(progress0.$$.fragment, local);
			transition_in(progress1.$$.fragment, local);
			transition_in(progress2.$$.fragment, local);
			transition_in(progress3.$$.fragment, local);
			transition_in(progress4.$$.fragment, local);
			transition_in(progress5.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(progress0.$$.fragment, local);
			transition_out(progress1.$$.fragment, local);
			transition_out(progress2.$$.fragment, local);
			transition_out(progress3.$$.fragment, local);
			transition_out(progress4.$$.fragment, local);
			transition_out(progress5.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div6);
			destroy_component(progress0);
			destroy_component(progress1);
			destroy_component(progress2);
			destroy_component(progress3);
			destroy_component(progress4);
			destroy_component(progress5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_34.name,
		type: "slot",
		source: "(29:0) <Row>",
		ctx
	});

	return block;
}

// (53:0) <Row>
function create_default_slot_33(ctx) {
	let div;
	let h2;
	let t0;
	let t1;
	let h3;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;
	let t7;
	let current;
	const progress0 = new Progress({ props: { value: 2 * 5 }, $$inline: true });

	const progress1 = new Progress({
			props: { color: "success", value: "25" },
			$$inline: true
		});

	const progress2 = new Progress({
			props: { color: "info", value: 50 },
			$$inline: true
		});

	const progress3 = new Progress({
			props: { color: "warning", value: 75 },
			$$inline: true
		});

	const progress4 = new Progress({
			props: { color: "danger", value: "100" },
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			h2 = element("h2");
			t0 = text("Цвета");
			t1 = space();
			h3 = element("h3");
			t2 = text("Пример");
			t3 = space();
			create_component(progress0.$$.fragment);
			t4 = space();
			create_component(progress1.$$.fragment);
			t5 = space();
			create_component(progress2.$$.fragment);
			t6 = space();
			create_component(progress3.$$.fragment);
			t7 = space();
			create_component(progress4.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h2 = claim_element(div_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "Цвета");
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			h3 = claim_element(div_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t2 = claim_text(h3_nodes, "Пример");
			h3_nodes.forEach(detach_dev);
			t3 = claim_space(div_nodes);
			claim_component(progress0.$$.fragment, div_nodes);
			t4 = claim_space(div_nodes);
			claim_component(progress1.$$.fragment, div_nodes);
			t5 = claim_space(div_nodes);
			claim_component(progress2.$$.fragment, div_nodes);
			t6 = claim_space(div_nodes);
			claim_component(progress3.$$.fragment, div_nodes);
			t7 = claim_space(div_nodes);
			claim_component(progress4.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "mt-4");
			add_location(h2, file, 54, 8, 1671);
			attr_dev(h3, "class", "mt-4");
			add_location(h3, file, 55, 8, 1708);
			attr_dev(div, "class", "col-xl-6");
			add_location(div, file, 53, 4, 1639);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h2);
			append_dev(h2, t0);
			append_dev(div, t1);
			append_dev(div, h3);
			append_dev(h3, t2);
			append_dev(div, t3);
			mount_component(progress0, div, null);
			append_dev(div, t4);
			mount_component(progress1, div, null);
			append_dev(div, t5);
			mount_component(progress2, div, null);
			append_dev(div, t6);
			mount_component(progress3, div, null);
			append_dev(div, t7);
			mount_component(progress4, div, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(progress0.$$.fragment, local);
			transition_in(progress1.$$.fragment, local);
			transition_in(progress2.$$.fragment, local);
			transition_in(progress3.$$.fragment, local);
			transition_in(progress4.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(progress0.$$.fragment, local);
			transition_out(progress1.$$.fragment, local);
			transition_out(progress2.$$.fragment, local);
			transition_out(progress3.$$.fragment, local);
			transition_out(progress4.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(progress0);
			destroy_component(progress1);
			destroy_component(progress2);
			destroy_component(progress3);
			destroy_component(progress4);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_33.name,
		type: "slot",
		source: "(53:0) <Row>",
		ctx
	});

	return block;
}

// (68:8) <Progress value="25">
function create_default_slot_32(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("25%");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "25%");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_32.name,
		type: "slot",
		source: "(68:8) <Progress value=\\\"25\\\">",
		ctx
	});

	return block;
}

// (69:8) <Progress value={50}>
function create_default_slot_31(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("1/2");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "1/2");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_31.name,
		type: "slot",
		source: "(69:8) <Progress value={50}>",
		ctx
	});

	return block;
}

// (70:8) <Progress value={75}>
function create_default_slot_30(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Ты почти тут");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Ты почти тут");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_30.name,
		type: "slot",
		source: "(70:8) <Progress value={75}>",
		ctx
	});

	return block;
}

// (71:8) <Progress color="success" value="100">
function create_default_slot_29(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Ты сделал это");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Ты сделал это");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_29.name,
		type: "slot",
		source: "(71:8) <Progress color=\\\"success\\\" value=\\\"100\\\">",
		ctx
	});

	return block;
}

// (73:12) <Progress bar value="15">
function create_default_slot_28(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Кек");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Кек");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_28.name,
		type: "slot",
		source: "(73:12) <Progress bar value=\\\"15\\\">",
		ctx
	});

	return block;
}

// (74:12) <Progress bar color="success" value="30">
function create_default_slot_27(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Азазаз!");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Азазаз!");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_27.name,
		type: "slot",
		source: "(74:12) <Progress bar color=\\\"success\\\" value=\\\"30\\\">",
		ctx
	});

	return block;
}

// (75:12) <Progress bar color="info" value="25">
function create_default_slot_26(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Ахах");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Ахах");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_26.name,
		type: "slot",
		source: "(75:12) <Progress bar color=\\\"info\\\" value=\\\"25\\\">",
		ctx
	});

	return block;
}

// (76:12) <Progress bar color="warning" value="20">
function create_default_slot_25(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("20%");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "20%");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_25.name,
		type: "slot",
		source: "(76:12) <Progress bar color=\\\"warning\\\" value=\\\"20\\\">",
		ctx
	});

	return block;
}

// (77:12) <Progress bar color="danger" value="5">
function create_default_slot_24(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("!!");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "!!");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_24.name,
		type: "slot",
		source: "(77:12) <Progress bar color=\\\"danger\\\" value=\\\"5\\\">",
		ctx
	});

	return block;
}

// (72:8) <Progress multi>
function create_default_slot_23(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let current;

	const progress0 = new Progress({
			props: {
				bar: true,
				value: "15",
				$$slots: { default: [create_default_slot_28] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const progress1 = new Progress({
			props: {
				bar: true,
				color: "success",
				value: "30",
				$$slots: { default: [create_default_slot_27] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const progress2 = new Progress({
			props: {
				bar: true,
				color: "info",
				value: "25",
				$$slots: { default: [create_default_slot_26] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const progress3 = new Progress({
			props: {
				bar: true,
				color: "warning",
				value: "20",
				$$slots: { default: [create_default_slot_25] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const progress4 = new Progress({
			props: {
				bar: true,
				color: "danger",
				value: "5",
				$$slots: { default: [create_default_slot_24] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(progress0.$$.fragment);
			t0 = space();
			create_component(progress1.$$.fragment);
			t1 = space();
			create_component(progress2.$$.fragment);
			t2 = space();
			create_component(progress3.$$.fragment);
			t3 = space();
			create_component(progress4.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(progress0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(progress1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(progress2.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(progress3.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(progress4.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(progress0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(progress1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(progress2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(progress3, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(progress4, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const progress0_changes = {};

			if (dirty & /*$$scope*/ 4) {
				progress0_changes.$$scope = { dirty, ctx };
			}

			progress0.$set(progress0_changes);
			const progress1_changes = {};

			if (dirty & /*$$scope*/ 4) {
				progress1_changes.$$scope = { dirty, ctx };
			}

			progress1.$set(progress1_changes);
			const progress2_changes = {};

			if (dirty & /*$$scope*/ 4) {
				progress2_changes.$$scope = { dirty, ctx };
			}

			progress2.$set(progress2_changes);
			const progress3_changes = {};

			if (dirty & /*$$scope*/ 4) {
				progress3_changes.$$scope = { dirty, ctx };
			}

			progress3.$set(progress3_changes);
			const progress4_changes = {};

			if (dirty & /*$$scope*/ 4) {
				progress4_changes.$$scope = { dirty, ctx };
			}

			progress4.$set(progress4_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(progress0.$$.fragment, local);
			transition_in(progress1.$$.fragment, local);
			transition_in(progress2.$$.fragment, local);
			transition_in(progress3.$$.fragment, local);
			transition_in(progress4.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(progress0.$$.fragment, local);
			transition_out(progress1.$$.fragment, local);
			transition_out(progress2.$$.fragment, local);
			transition_out(progress3.$$.fragment, local);
			transition_out(progress4.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(progress0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(progress1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(progress2, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(progress3, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(progress4, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_23.name,
		type: "slot",
		source: "(72:8) <Progress multi>",
		ctx
	});

	return block;
}

// (64:0) <Row>
function create_default_slot_22(ctx) {
	let div;
	let h2;
	let t0;
	let t1;
	let h3;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;
	let t7;
	let current;

	const progress0 = new Progress({
			props: {
				value: "25",
				$$slots: { default: [create_default_slot_32] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const progress1 = new Progress({
			props: {
				value: 50,
				$$slots: { default: [create_default_slot_31] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const progress2 = new Progress({
			props: {
				value: 75,
				$$slots: { default: [create_default_slot_30] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const progress3 = new Progress({
			props: {
				color: "success",
				value: "100",
				$$slots: { default: [create_default_slot_29] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const progress4 = new Progress({
			props: {
				multi: true,
				$$slots: { default: [create_default_slot_23] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			h2 = element("h2");
			t0 = text("С метками");
			t1 = space();
			h3 = element("h3");
			t2 = text("Пример");
			t3 = space();
			create_component(progress0.$$.fragment);
			t4 = space();
			create_component(progress1.$$.fragment);
			t5 = space();
			create_component(progress2.$$.fragment);
			t6 = space();
			create_component(progress3.$$.fragment);
			t7 = space();
			create_component(progress4.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h2 = claim_element(div_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "С метками");
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			h3 = claim_element(div_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t2 = claim_text(h3_nodes, "Пример");
			h3_nodes.forEach(detach_dev);
			t3 = claim_space(div_nodes);
			claim_component(progress0.$$.fragment, div_nodes);
			t4 = claim_space(div_nodes);
			claim_component(progress1.$$.fragment, div_nodes);
			t5 = claim_space(div_nodes);
			claim_component(progress2.$$.fragment, div_nodes);
			t6 = claim_space(div_nodes);
			claim_component(progress3.$$.fragment, div_nodes);
			t7 = claim_space(div_nodes);
			claim_component(progress4.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "mt-4");
			add_location(h2, file, 65, 8, 2030);
			attr_dev(h3, "class", "mt-4");
			add_location(h3, file, 66, 8, 2071);
			attr_dev(div, "class", "col-xl-6");
			add_location(div, file, 64, 4, 1998);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h2);
			append_dev(h2, t0);
			append_dev(div, t1);
			append_dev(div, h3);
			append_dev(h3, t2);
			append_dev(div, t3);
			mount_component(progress0, div, null);
			append_dev(div, t4);
			mount_component(progress1, div, null);
			append_dev(div, t5);
			mount_component(progress2, div, null);
			append_dev(div, t6);
			mount_component(progress3, div, null);
			append_dev(div, t7);
			mount_component(progress4, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const progress0_changes = {};

			if (dirty & /*$$scope*/ 4) {
				progress0_changes.$$scope = { dirty, ctx };
			}

			progress0.$set(progress0_changes);
			const progress1_changes = {};

			if (dirty & /*$$scope*/ 4) {
				progress1_changes.$$scope = { dirty, ctx };
			}

			progress1.$set(progress1_changes);
			const progress2_changes = {};

			if (dirty & /*$$scope*/ 4) {
				progress2_changes.$$scope = { dirty, ctx };
			}

			progress2.$set(progress2_changes);
			const progress3_changes = {};

			if (dirty & /*$$scope*/ 4) {
				progress3_changes.$$scope = { dirty, ctx };
			}

			progress3.$set(progress3_changes);
			const progress4_changes = {};

			if (dirty & /*$$scope*/ 4) {
				progress4_changes.$$scope = { dirty, ctx };
			}

			progress4.$set(progress4_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(progress0.$$.fragment, local);
			transition_in(progress1.$$.fragment, local);
			transition_in(progress2.$$.fragment, local);
			transition_in(progress3.$$.fragment, local);
			transition_in(progress4.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(progress0.$$.fragment, local);
			transition_out(progress1.$$.fragment, local);
			transition_out(progress2.$$.fragment, local);
			transition_out(progress3.$$.fragment, local);
			transition_out(progress4.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(progress0);
			destroy_component(progress1);
			destroy_component(progress2);
			destroy_component(progress3);
			destroy_component(progress4);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_22.name,
		type: "slot",
		source: "(64:0) <Row>",
		ctx
	});

	return block;
}

// (90:8) <Progress multi>
function create_default_slot_21(ctx) {
	let t0;
	let t1;
	let t2;
	let current;

	const progress0 = new Progress({
			props: { striped: true, bar: true, value: "10" },
			$$inline: true
		});

	const progress1 = new Progress({
			props: {
				striped: true,
				bar: true,
				color: "success",
				value: "30"
			},
			$$inline: true
		});

	const progress2 = new Progress({
			props: {
				striped: true,
				bar: true,
				color: "warning",
				value: "20"
			},
			$$inline: true
		});

	const progress3 = new Progress({
			props: {
				striped: true,
				bar: true,
				color: "danger",
				value: "20"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(progress0.$$.fragment);
			t0 = space();
			create_component(progress1.$$.fragment);
			t1 = space();
			create_component(progress2.$$.fragment);
			t2 = space();
			create_component(progress3.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(progress0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(progress1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(progress2.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(progress3.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(progress0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(progress1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(progress2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(progress3, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(progress0.$$.fragment, local);
			transition_in(progress1.$$.fragment, local);
			transition_in(progress2.$$.fragment, local);
			transition_in(progress3.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(progress0.$$.fragment, local);
			transition_out(progress1.$$.fragment, local);
			transition_out(progress2.$$.fragment, local);
			transition_out(progress3.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(progress0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(progress1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(progress2, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(progress3, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_21.name,
		type: "slot",
		source: "(90:8) <Progress multi>",
		ctx
	});

	return block;
}

// (81:0) <Row>
function create_default_slot_20(ctx) {
	let div;
	let h2;
	let t0;
	let t1;
	let h3;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;
	let t7;
	let t8;
	let current;

	const progress0 = new Progress({
			props: { striped: true, value: 2 * 5 },
			$$inline: true
		});

	const progress1 = new Progress({
			props: {
				striped: true,
				color: "success",
				value: "25"
			},
			$$inline: true
		});

	const progress2 = new Progress({
			props: { striped: true, color: "info", value: 50 },
			$$inline: true
		});

	const progress3 = new Progress({
			props: {
				striped: true,
				color: "warning",
				value: 75
			},
			$$inline: true
		});

	const progress4 = new Progress({
			props: {
				striped: true,
				color: "danger",
				value: "100"
			},
			$$inline: true
		});

	const progress5 = new Progress({
			props: {
				multi: true,
				$$slots: { default: [create_default_slot_21] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			h2 = element("h2");
			t0 = text("С полосками");
			t1 = space();
			h3 = element("h3");
			t2 = text("Пример");
			t3 = space();
			create_component(progress0.$$.fragment);
			t4 = space();
			create_component(progress1.$$.fragment);
			t5 = space();
			create_component(progress2.$$.fragment);
			t6 = space();
			create_component(progress3.$$.fragment);
			t7 = space();
			create_component(progress4.$$.fragment);
			t8 = space();
			create_component(progress5.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h2 = claim_element(div_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "С полосками");
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			h3 = claim_element(div_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t2 = claim_text(h3_nodes, "Пример");
			h3_nodes.forEach(detach_dev);
			t3 = claim_space(div_nodes);
			claim_component(progress0.$$.fragment, div_nodes);
			t4 = claim_space(div_nodes);
			claim_component(progress1.$$.fragment, div_nodes);
			t5 = claim_space(div_nodes);
			claim_component(progress2.$$.fragment, div_nodes);
			t6 = claim_space(div_nodes);
			claim_component(progress3.$$.fragment, div_nodes);
			t7 = claim_space(div_nodes);
			claim_component(progress4.$$.fragment, div_nodes);
			t8 = claim_space(div_nodes);
			claim_component(progress5.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "mt-4");
			add_location(h2, file, 82, 8, 2755);
			attr_dev(h3, "class", "mt-4");
			add_location(h3, file, 83, 8, 2798);
			attr_dev(div, "class", "col-xl-6");
			add_location(div, file, 81, 4, 2723);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h2);
			append_dev(h2, t0);
			append_dev(div, t1);
			append_dev(div, h3);
			append_dev(h3, t2);
			append_dev(div, t3);
			mount_component(progress0, div, null);
			append_dev(div, t4);
			mount_component(progress1, div, null);
			append_dev(div, t5);
			mount_component(progress2, div, null);
			append_dev(div, t6);
			mount_component(progress3, div, null);
			append_dev(div, t7);
			mount_component(progress4, div, null);
			append_dev(div, t8);
			mount_component(progress5, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const progress5_changes = {};

			if (dirty & /*$$scope*/ 4) {
				progress5_changes.$$scope = { dirty, ctx };
			}

			progress5.$set(progress5_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(progress0.$$.fragment, local);
			transition_in(progress1.$$.fragment, local);
			transition_in(progress2.$$.fragment, local);
			transition_in(progress3.$$.fragment, local);
			transition_in(progress4.$$.fragment, local);
			transition_in(progress5.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(progress0.$$.fragment, local);
			transition_out(progress1.$$.fragment, local);
			transition_out(progress2.$$.fragment, local);
			transition_out(progress3.$$.fragment, local);
			transition_out(progress4.$$.fragment, local);
			transition_out(progress5.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(progress0);
			destroy_component(progress1);
			destroy_component(progress2);
			destroy_component(progress3);
			destroy_component(progress4);
			destroy_component(progress5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_20.name,
		type: "slot",
		source: "(81:0) <Row>",
		ctx
	});

	return block;
}

// (107:8) <Progress multi>
function create_default_slot_19(ctx) {
	let t0;
	let t1;
	let t2;
	let current;

	const progress0 = new Progress({
			props: { animated: true, bar: true, value: "10" },
			$$inline: true
		});

	const progress1 = new Progress({
			props: {
				animated: true,
				bar: true,
				color: "success",
				value: "30"
			},
			$$inline: true
		});

	const progress2 = new Progress({
			props: {
				animated: true,
				bar: true,
				color: "warning",
				value: "20"
			},
			$$inline: true
		});

	const progress3 = new Progress({
			props: {
				animated: true,
				bar: true,
				color: "danger",
				value: "20"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(progress0.$$.fragment);
			t0 = space();
			create_component(progress1.$$.fragment);
			t1 = space();
			create_component(progress2.$$.fragment);
			t2 = space();
			create_component(progress3.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(progress0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(progress1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(progress2.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(progress3.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(progress0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(progress1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(progress2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(progress3, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(progress0.$$.fragment, local);
			transition_in(progress1.$$.fragment, local);
			transition_in(progress2.$$.fragment, local);
			transition_in(progress3.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(progress0.$$.fragment, local);
			transition_out(progress1.$$.fragment, local);
			transition_out(progress2.$$.fragment, local);
			transition_out(progress3.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(progress0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(progress1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(progress2, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(progress3, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_19.name,
		type: "slot",
		source: "(107:8) <Progress multi>",
		ctx
	});

	return block;
}

// (98:0) <Row>
function create_default_slot_18(ctx) {
	let div;
	let h2;
	let t0;
	let t1;
	let h3;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;
	let t7;
	let t8;
	let current;

	const progress0 = new Progress({
			props: { animated: true, value: 2 * 5 },
			$$inline: true
		});

	const progress1 = new Progress({
			props: {
				animated: true,
				color: "success",
				value: "25"
			},
			$$inline: true
		});

	const progress2 = new Progress({
			props: { animated: true, color: "info", value: 50 },
			$$inline: true
		});

	const progress3 = new Progress({
			props: {
				animated: true,
				color: "warning",
				value: 75
			},
			$$inline: true
		});

	const progress4 = new Progress({
			props: {
				animated: true,
				color: "danger",
				value: "100"
			},
			$$inline: true
		});

	const progress5 = new Progress({
			props: {
				multi: true,
				$$slots: { default: [create_default_slot_19] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			h2 = element("h2");
			t0 = text("Анимированные");
			t1 = space();
			h3 = element("h3");
			t2 = text("Пример");
			t3 = space();
			create_component(progress0.$$.fragment);
			t4 = space();
			create_component(progress1.$$.fragment);
			t5 = space();
			create_component(progress2.$$.fragment);
			t6 = space();
			create_component(progress3.$$.fragment);
			t7 = space();
			create_component(progress4.$$.fragment);
			t8 = space();
			create_component(progress5.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h2 = claim_element(div_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "Анимированные");
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			h3 = claim_element(div_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t2 = claim_text(h3_nodes, "Пример");
			h3_nodes.forEach(detach_dev);
			t3 = claim_space(div_nodes);
			claim_component(progress0.$$.fragment, div_nodes);
			t4 = claim_space(div_nodes);
			claim_component(progress1.$$.fragment, div_nodes);
			t5 = claim_space(div_nodes);
			claim_component(progress2.$$.fragment, div_nodes);
			t6 = claim_space(div_nodes);
			claim_component(progress3.$$.fragment, div_nodes);
			t7 = claim_space(div_nodes);
			claim_component(progress4.$$.fragment, div_nodes);
			t8 = claim_space(div_nodes);
			claim_component(progress5.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "mt-4");
			add_location(h2, file, 99, 8, 3450);
			attr_dev(h3, "class", "mt-4");
			add_location(h3, file, 100, 8, 3495);
			attr_dev(div, "class", "col-xl-6");
			add_location(div, file, 98, 4, 3418);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h2);
			append_dev(h2, t0);
			append_dev(div, t1);
			append_dev(div, h3);
			append_dev(h3, t2);
			append_dev(div, t3);
			mount_component(progress0, div, null);
			append_dev(div, t4);
			mount_component(progress1, div, null);
			append_dev(div, t5);
			mount_component(progress2, div, null);
			append_dev(div, t6);
			mount_component(progress3, div, null);
			append_dev(div, t7);
			mount_component(progress4, div, null);
			append_dev(div, t8);
			mount_component(progress5, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const progress5_changes = {};

			if (dirty & /*$$scope*/ 4) {
				progress5_changes.$$scope = { dirty, ctx };
			}

			progress5.$set(progress5_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(progress0.$$.fragment, local);
			transition_in(progress1.$$.fragment, local);
			transition_in(progress2.$$.fragment, local);
			transition_in(progress3.$$.fragment, local);
			transition_in(progress4.$$.fragment, local);
			transition_in(progress5.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(progress0.$$.fragment, local);
			transition_out(progress1.$$.fragment, local);
			transition_out(progress2.$$.fragment, local);
			transition_out(progress3.$$.fragment, local);
			transition_out(progress4.$$.fragment, local);
			transition_out(progress5.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(progress0);
			destroy_component(progress1);
			destroy_component(progress2);
			destroy_component(progress3);
			destroy_component(progress4);
			destroy_component(progress5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_18.name,
		type: "slot",
		source: "(98:0) <Row>",
		ctx
	});

	return block;
}

// (120:8) <Progress multi>
function create_default_slot_17(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let current;

	const progress0 = new Progress({
			props: { bar: true, value: "15" },
			$$inline: true
		});

	const progress1 = new Progress({
			props: { bar: true, color: "success", value: "20" },
			$$inline: true
		});

	const progress2 = new Progress({
			props: { bar: true, color: "info", value: "25" },
			$$inline: true
		});

	const progress3 = new Progress({
			props: { bar: true, color: "warning", value: "20" },
			$$inline: true
		});

	const progress4 = new Progress({
			props: { bar: true, color: "danger", value: "15" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(progress0.$$.fragment);
			t0 = space();
			create_component(progress1.$$.fragment);
			t1 = space();
			create_component(progress2.$$.fragment);
			t2 = space();
			create_component(progress3.$$.fragment);
			t3 = space();
			create_component(progress4.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(progress0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(progress1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(progress2.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(progress3.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(progress4.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(progress0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(progress1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(progress2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(progress3, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(progress4, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(progress0.$$.fragment, local);
			transition_in(progress1.$$.fragment, local);
			transition_in(progress2.$$.fragment, local);
			transition_in(progress3.$$.fragment, local);
			transition_in(progress4.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(progress0.$$.fragment, local);
			transition_out(progress1.$$.fragment, local);
			transition_out(progress2.$$.fragment, local);
			transition_out(progress3.$$.fragment, local);
			transition_out(progress4.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(progress0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(progress1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(progress2, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(progress3, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(progress4, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_17.name,
		type: "slot",
		source: "(120:8) <Progress multi>",
		ctx
	});

	return block;
}

// (129:12) <Progress bar value="15">
function create_default_slot_16(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Хех");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Хех");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_16.name,
		type: "slot",
		source: "(129:12) <Progress bar value=\\\"15\\\">",
		ctx
	});

	return block;
}

// (130:12) <Progress bar color="success" value="35">
function create_default_slot_15(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Ох!");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Ох!");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_15.name,
		type: "slot",
		source: "(130:12) <Progress bar color=\\\"success\\\" value=\\\"35\\\">",
		ctx
	});

	return block;
}

// (131:12) <Progress bar color="warning" value="25">
function create_default_slot_14(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("25%");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "25%");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_14.name,
		type: "slot",
		source: "(131:12) <Progress bar color=\\\"warning\\\" value=\\\"25\\\">",
		ctx
	});

	return block;
}

// (132:12) <Progress bar color="danger" value="25">
function create_default_slot_13(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Гляди!!");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Гляди!!");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13.name,
		type: "slot",
		source: "(132:12) <Progress bar color=\\\"danger\\\" value=\\\"25\\\">",
		ctx
	});

	return block;
}

// (128:8) <Progress multi>
function create_default_slot_12(ctx) {
	let t0;
	let t1;
	let t2;
	let current;

	const progress0 = new Progress({
			props: {
				bar: true,
				value: "15",
				$$slots: { default: [create_default_slot_16] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const progress1 = new Progress({
			props: {
				bar: true,
				color: "success",
				value: "35",
				$$slots: { default: [create_default_slot_15] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const progress2 = new Progress({
			props: {
				bar: true,
				color: "warning",
				value: "25",
				$$slots: { default: [create_default_slot_14] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const progress3 = new Progress({
			props: {
				bar: true,
				color: "danger",
				value: "25",
				$$slots: { default: [create_default_slot_13] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(progress0.$$.fragment);
			t0 = space();
			create_component(progress1.$$.fragment);
			t1 = space();
			create_component(progress2.$$.fragment);
			t2 = space();
			create_component(progress3.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(progress0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(progress1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(progress2.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(progress3.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(progress0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(progress1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(progress2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(progress3, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const progress0_changes = {};

			if (dirty & /*$$scope*/ 4) {
				progress0_changes.$$scope = { dirty, ctx };
			}

			progress0.$set(progress0_changes);
			const progress1_changes = {};

			if (dirty & /*$$scope*/ 4) {
				progress1_changes.$$scope = { dirty, ctx };
			}

			progress1.$set(progress1_changes);
			const progress2_changes = {};

			if (dirty & /*$$scope*/ 4) {
				progress2_changes.$$scope = { dirty, ctx };
			}

			progress2.$set(progress2_changes);
			const progress3_changes = {};

			if (dirty & /*$$scope*/ 4) {
				progress3_changes.$$scope = { dirty, ctx };
			}

			progress3.$set(progress3_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(progress0.$$.fragment, local);
			transition_in(progress1.$$.fragment, local);
			transition_in(progress2.$$.fragment, local);
			transition_in(progress3.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(progress0.$$.fragment, local);
			transition_out(progress1.$$.fragment, local);
			transition_out(progress2.$$.fragment, local);
			transition_out(progress3.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(progress0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(progress1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(progress2, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(progress3, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12.name,
		type: "slot",
		source: "(128:8) <Progress multi>",
		ctx
	});

	return block;
}

// (136:12) <Progress bar striped value="15">
function create_default_slot_11(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Полоски");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Полоски");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11.name,
		type: "slot",
		source: "(136:12) <Progress bar striped value=\\\"15\\\">",
		ctx
	});

	return block;
}

// (137:12) <Progress bar animated color="success" value="30">
function create_default_slot_10(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Анимированные полоски");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Анимированные полоски");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(137:12) <Progress bar animated color=\\\"success\\\" value=\\\"30\\\">",
		ctx
	});

	return block;
}

// (138:12) <Progress bar color="info" value="25">
function create_default_slot_9(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Гладкая");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Гладкая");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(138:12) <Progress bar color=\\\"info\\\" value=\\\"25\\\">",
		ctx
	});

	return block;
}

// (135:8) <Progress multi>
function create_default_slot_8(ctx) {
	let t0;
	let t1;
	let current;

	const progress0 = new Progress({
			props: {
				bar: true,
				striped: true,
				value: "15",
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const progress1 = new Progress({
			props: {
				bar: true,
				animated: true,
				color: "success",
				value: "30",
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const progress2 = new Progress({
			props: {
				bar: true,
				color: "info",
				value: "25",
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(progress0.$$.fragment);
			t0 = space();
			create_component(progress1.$$.fragment);
			t1 = space();
			create_component(progress2.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(progress0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(progress1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(progress2.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(progress0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(progress1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(progress2, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const progress0_changes = {};

			if (dirty & /*$$scope*/ 4) {
				progress0_changes.$$scope = { dirty, ctx };
			}

			progress0.$set(progress0_changes);
			const progress1_changes = {};

			if (dirty & /*$$scope*/ 4) {
				progress1_changes.$$scope = { dirty, ctx };
			}

			progress1.$set(progress1_changes);
			const progress2_changes = {};

			if (dirty & /*$$scope*/ 4) {
				progress2_changes.$$scope = { dirty, ctx };
			}

			progress2.$set(progress2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(progress0.$$.fragment, local);
			transition_in(progress1.$$.fragment, local);
			transition_in(progress2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(progress0.$$.fragment, local);
			transition_out(progress1.$$.fragment, local);
			transition_out(progress2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(progress0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(progress1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(progress2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(135:8) <Progress multi>",
		ctx
	});

	return block;
}

// (115:0) <Row>
function create_default_slot_7(ctx) {
	let div3;
	let h2;
	let t0;
	let t1;
	let h3;
	let t2;
	let t3;
	let div0;
	let t4;
	let t5;
	let t6;
	let div1;
	let t7;
	let t8;
	let t9;
	let div2;
	let t10;
	let t11;
	let current;

	const progress0 = new Progress({
			props: {
				multi: true,
				$$slots: { default: [create_default_slot_17] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const progress1 = new Progress({
			props: {
				multi: true,
				$$slots: { default: [create_default_slot_12] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const progress2 = new Progress({
			props: {
				multi: true,
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div3 = element("div");
			h2 = element("h2");
			t0 = text("Комбинированные");
			t1 = space();
			h3 = element("h3");
			t2 = text("Пример");
			t3 = space();
			div0 = element("div");
			t4 = text("Flat");
			t5 = space();
			create_component(progress0.$$.fragment);
			t6 = space();
			div1 = element("div");
			t7 = text("С метками");
			t8 = space();
			create_component(progress1.$$.fragment);
			t9 = space();
			div2 = element("div");
			t10 = text("Полоски и анимация");
			t11 = space();
			create_component(progress2.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			h2 = claim_element(div3_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "Комбинированные");
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(div3_nodes);
			h3 = claim_element(div3_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t2 = claim_text(h3_nodes, "Пример");
			h3_nodes.forEach(detach_dev);
			t3 = claim_space(div3_nodes);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t4 = claim_text(div0_nodes, "Flat");
			div0_nodes.forEach(detach_dev);
			t5 = claim_space(div3_nodes);
			claim_component(progress0.$$.fragment, div3_nodes);
			t6 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t7 = claim_text(div1_nodes, "С метками");
			div1_nodes.forEach(detach_dev);
			t8 = claim_space(div3_nodes);
			claim_component(progress1.$$.fragment, div3_nodes);
			t9 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			t10 = claim_text(div2_nodes, "Полоски и анимация");
			div2_nodes.forEach(detach_dev);
			t11 = claim_space(div3_nodes);
			claim_component(progress2.$$.fragment, div3_nodes);
			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "mt-4");
			add_location(h2, file, 116, 8, 4156);
			attr_dev(h3, "class", "mt-4");
			add_location(h3, file, 117, 8, 4203);
			attr_dev(div0, "class", "text-center");
			add_location(div0, file, 118, 8, 4241);
			attr_dev(div1, "class", "text-center");
			add_location(div1, file, 126, 8, 4598);
			attr_dev(div2, "class", "text-center");
			add_location(div2, file, 133, 8, 4958);
			attr_dev(div3, "class", "col-xl-6");
			add_location(div3, file, 115, 4, 4124);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div3, anchor);
			append_dev(div3, h2);
			append_dev(h2, t0);
			append_dev(div3, t1);
			append_dev(div3, h3);
			append_dev(h3, t2);
			append_dev(div3, t3);
			append_dev(div3, div0);
			append_dev(div0, t4);
			append_dev(div3, t5);
			mount_component(progress0, div3, null);
			append_dev(div3, t6);
			append_dev(div3, div1);
			append_dev(div1, t7);
			append_dev(div3, t8);
			mount_component(progress1, div3, null);
			append_dev(div3, t9);
			append_dev(div3, div2);
			append_dev(div2, t10);
			append_dev(div3, t11);
			mount_component(progress2, div3, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const progress0_changes = {};

			if (dirty & /*$$scope*/ 4) {
				progress0_changes.$$scope = { dirty, ctx };
			}

			progress0.$set(progress0_changes);
			const progress1_changes = {};

			if (dirty & /*$$scope*/ 4) {
				progress1_changes.$$scope = { dirty, ctx };
			}

			progress1.$set(progress1_changes);
			const progress2_changes = {};

			if (dirty & /*$$scope*/ 4) {
				progress2_changes.$$scope = { dirty, ctx };
			}

			progress2.$set(progress2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(progress0.$$.fragment, local);
			transition_in(progress1.$$.fragment, local);
			transition_in(progress2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(progress0.$$.fragment, local);
			transition_out(progress1.$$.fragment, local);
			transition_out(progress2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
			destroy_component(progress0);
			destroy_component(progress1);
			destroy_component(progress2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(115:0) <Row>",
		ctx
	});

	return block;
}

// (158:12) <Progress bar value="5" max={55}>
function create_default_slot_6(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("5");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "5");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(158:12) <Progress bar value=\\\"5\\\" max={55}>",
		ctx
	});

	return block;
}

// (159:12) <Progress bar color="success" value="15" max={55}>
function create_default_slot_5(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("15");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "15");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(159:12) <Progress bar color=\\\"success\\\" value=\\\"15\\\" max={55}>",
		ctx
	});

	return block;
}

// (160:12) <Progress bar color="warning" value="10" max={55}>
function create_default_slot_4(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("10");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "10");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(160:12) <Progress bar color=\\\"warning\\\" value=\\\"10\\\" max={55}>",
		ctx
	});

	return block;
}

// (161:12) <Progress bar color="danger" value="10" max={55}>
function create_default_slot_3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("10");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "10");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(161:12) <Progress bar color=\\\"danger\\\" value=\\\"10\\\" max={55}>",
		ctx
	});

	return block;
}

// (157:8) <Progress multi>
function create_default_slot_2(ctx) {
	let t0;
	let t1;
	let t2;
	let current;

	const progress0 = new Progress({
			props: {
				bar: true,
				value: "5",
				max: 55,
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const progress1 = new Progress({
			props: {
				bar: true,
				color: "success",
				value: "15",
				max: 55,
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const progress2 = new Progress({
			props: {
				bar: true,
				color: "warning",
				value: "10",
				max: 55,
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const progress3 = new Progress({
			props: {
				bar: true,
				color: "danger",
				value: "10",
				max: 55,
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(progress0.$$.fragment);
			t0 = space();
			create_component(progress1.$$.fragment);
			t1 = space();
			create_component(progress2.$$.fragment);
			t2 = space();
			create_component(progress3.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(progress0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(progress1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(progress2.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(progress3.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(progress0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(progress1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(progress2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(progress3, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const progress0_changes = {};

			if (dirty & /*$$scope*/ 4) {
				progress0_changes.$$scope = { dirty, ctx };
			}

			progress0.$set(progress0_changes);
			const progress1_changes = {};

			if (dirty & /*$$scope*/ 4) {
				progress1_changes.$$scope = { dirty, ctx };
			}

			progress1.$set(progress1_changes);
			const progress2_changes = {};

			if (dirty & /*$$scope*/ 4) {
				progress2_changes.$$scope = { dirty, ctx };
			}

			progress2.$set(progress2_changes);
			const progress3_changes = {};

			if (dirty & /*$$scope*/ 4) {
				progress3_changes.$$scope = { dirty, ctx };
			}

			progress3.$set(progress3_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(progress0.$$.fragment, local);
			transition_in(progress1.$$.fragment, local);
			transition_in(progress2.$$.fragment, local);
			transition_in(progress3.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(progress0.$$.fragment, local);
			transition_out(progress1.$$.fragment, local);
			transition_out(progress2.$$.fragment, local);
			transition_out(progress3.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(progress0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(progress1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(progress2, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(progress3, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(157:8) <Progress multi>",
		ctx
	});

	return block;
}

// (142:0) <Row>
function create_default_slot_1(ctx) {
	let div6;
	let h2;
	let t0;
	let t1;
	let h3;
	let t2;
	let t3;
	let div0;
	let t4;
	let t5;
	let div1;
	let t6;
	let t7;
	let t8;
	let div2;
	let t9;
	let t10;
	let t11;
	let div3;
	let t12;
	let t13;
	let t14;
	let div4;
	let t15;
	let t16;
	let t17;
	let div5;
	let t18;
	let t19;
	let current;

	const progress0 = new Progress({
			props: { value: "1", max: "5" },
			$$inline: true
		});

	const progress1 = new Progress({
			props: { value: 50, max: "135" },
			$$inline: true
		});

	const progress2 = new Progress({
			props: { value: 75, max: 111 },
			$$inline: true
		});

	const progress3 = new Progress({
			props: { value: "463", max: 500 },
			$$inline: true
		});

	const progress4 = new Progress({
			props: {
				multi: true,
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div6 = element("div");
			h2 = element("h2");
			t0 = text("C максимальными значениям");
			t1 = space();
			h3 = element("h3");
			t2 = text("Пример");
			t3 = space();
			div0 = element("div");
			t4 = text("Flat");
			t5 = space();
			div1 = element("div");
			t6 = text("1 of 5");
			t7 = space();
			create_component(progress0.$$.fragment);
			t8 = space();
			div2 = element("div");
			t9 = text("50 of 135");
			t10 = space();
			create_component(progress1.$$.fragment);
			t11 = space();
			div3 = element("div");
			t12 = text("75 of 111");
			t13 = space();
			create_component(progress2.$$.fragment);
			t14 = space();
			div4 = element("div");
			t15 = text("463 of 500");
			t16 = space();
			create_component(progress3.$$.fragment);
			t17 = space();
			div5 = element("div");
			t18 = text("Разное (40) of 55");
			t19 = space();
			create_component(progress4.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div6 = claim_element(nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			h2 = claim_element(div6_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "C максимальными значениям");
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(div6_nodes);
			h3 = claim_element(div6_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t2 = claim_text(h3_nodes, "Пример");
			h3_nodes.forEach(detach_dev);
			t3 = claim_space(div6_nodes);
			div0 = claim_element(div6_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t4 = claim_text(div0_nodes, "Flat");
			div0_nodes.forEach(detach_dev);
			t5 = claim_space(div6_nodes);
			div1 = claim_element(div6_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t6 = claim_text(div1_nodes, "1 of 5");
			div1_nodes.forEach(detach_dev);
			t7 = claim_space(div6_nodes);
			claim_component(progress0.$$.fragment, div6_nodes);
			t8 = claim_space(div6_nodes);
			div2 = claim_element(div6_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			t9 = claim_text(div2_nodes, "50 of 135");
			div2_nodes.forEach(detach_dev);
			t10 = claim_space(div6_nodes);
			claim_component(progress1.$$.fragment, div6_nodes);
			t11 = claim_space(div6_nodes);
			div3 = claim_element(div6_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			t12 = claim_text(div3_nodes, "75 of 111");
			div3_nodes.forEach(detach_dev);
			t13 = claim_space(div6_nodes);
			claim_component(progress2.$$.fragment, div6_nodes);
			t14 = claim_space(div6_nodes);
			div4 = claim_element(div6_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			t15 = claim_text(div4_nodes, "463 of 500");
			div4_nodes.forEach(detach_dev);
			t16 = claim_space(div6_nodes);
			claim_component(progress3.$$.fragment, div6_nodes);
			t17 = claim_space(div6_nodes);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			t18 = claim_text(div5_nodes, "Разное (40) of 55");
			div5_nodes.forEach(detach_dev);
			t19 = claim_space(div6_nodes);
			claim_component(progress4.$$.fragment, div6_nodes);
			div6_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "mt-4");
			add_location(h2, file, 143, 8, 5350);
			attr_dev(h3, "class", "mt-4");
			add_location(h3, file, 144, 8, 5407);
			attr_dev(div0, "class", "text-center");
			add_location(div0, file, 145, 8, 5445);
			attr_dev(div1, "class", "text-center");
			add_location(div1, file, 146, 8, 5490);
			attr_dev(div2, "class", "text-center");
			add_location(div2, file, 148, 8, 5577);
			attr_dev(div3, "class", "text-center");
			add_location(div3, file, 150, 8, 5670);
			attr_dev(div4, "class", "text-center");
			add_location(div4, file, 152, 8, 5763);
			attr_dev(div5, "class", "text-center");
			add_location(div5, file, 155, 8, 5860);
			attr_dev(div6, "class", "col-xl-6");
			add_location(div6, file, 142, 4, 5318);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div6, anchor);
			append_dev(div6, h2);
			append_dev(h2, t0);
			append_dev(div6, t1);
			append_dev(div6, h3);
			append_dev(h3, t2);
			append_dev(div6, t3);
			append_dev(div6, div0);
			append_dev(div0, t4);
			append_dev(div6, t5);
			append_dev(div6, div1);
			append_dev(div1, t6);
			append_dev(div6, t7);
			mount_component(progress0, div6, null);
			append_dev(div6, t8);
			append_dev(div6, div2);
			append_dev(div2, t9);
			append_dev(div6, t10);
			mount_component(progress1, div6, null);
			append_dev(div6, t11);
			append_dev(div6, div3);
			append_dev(div3, t12);
			append_dev(div6, t13);
			mount_component(progress2, div6, null);
			append_dev(div6, t14);
			append_dev(div6, div4);
			append_dev(div4, t15);
			append_dev(div6, t16);
			mount_component(progress3, div6, null);
			append_dev(div6, t17);
			append_dev(div6, div5);
			append_dev(div5, t18);
			append_dev(div6, t19);
			mount_component(progress4, div6, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const progress4_changes = {};

			if (dirty & /*$$scope*/ 4) {
				progress4_changes.$$scope = { dirty, ctx };
			}

			progress4.$set(progress4_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(progress0.$$.fragment, local);
			transition_in(progress1.$$.fragment, local);
			transition_in(progress2.$$.fragment, local);
			transition_in(progress3.$$.fragment, local);
			transition_in(progress4.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(progress0.$$.fragment, local);
			transition_out(progress1.$$.fragment, local);
			transition_out(progress2.$$.fragment, local);
			transition_out(progress3.$$.fragment, local);
			transition_out(progress4.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div6);
			destroy_component(progress0);
			destroy_component(progress1);
			destroy_component(progress2);
			destroy_component(progress3);
			destroy_component(progress4);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(142:0) <Row>",
		ctx
	});

	return block;
}

// (165:0) <Row>
function create_default_slot(ctx) {
	let div;
	let br;

	const block = {
		c: function create() {
			div = element("div");
			br = element("br");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			br = claim_element(div_nodes, "BR", {});
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(br, file, 166, 8, 6309);
			attr_dev(div, "class", "col-xl-6");
			add_location(div, file, 165, 4, 6277);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, br);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(165:0) <Row>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let title_value;
	let t0;
	let h1;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;
	let t7;
	let t8;
	let t9;
	let t10;
	let current;
	document.title = title_value = /*title*/ ctx[0];

	const breadcrumb = new Breadcrumb({
			props: {
				class: "mb-4",
				$$slots: { default: [create_default_slot_36] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row0 = new Row({
			props: {
				$$slots: { default: [create_default_slot_34] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row1 = new Row({
			props: {
				$$slots: { default: [create_default_slot_33] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row2 = new Row({
			props: {
				$$slots: { default: [create_default_slot_22] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row3 = new Row({
			props: {
				$$slots: { default: [create_default_slot_20] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row4 = new Row({
			props: {
				$$slots: { default: [create_default_slot_18] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row5 = new Row({
			props: {
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row6 = new Row({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row7 = new Row({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("Прогресс бар");
			t2 = space();
			create_component(breadcrumb.$$.fragment);
			t3 = space();
			create_component(row0.$$.fragment);
			t4 = space();
			create_component(row1.$$.fragment);
			t5 = space();
			create_component(row2.$$.fragment);
			t6 = space();
			create_component(row3.$$.fragment);
			t7 = space();
			create_component(row4.$$.fragment);
			t8 = space();
			create_component(row5.$$.fragment);
			t9 = space();
			create_component(row6.$$.fragment);
			t10 = space();
			create_component(row7.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-46oba3\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Прогресс бар");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			claim_component(breadcrumb.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(row0.$$.fragment, nodes);
			t4 = claim_space(nodes);
			claim_component(row1.$$.fragment, nodes);
			t5 = claim_space(nodes);
			claim_component(row2.$$.fragment, nodes);
			t6 = claim_space(nodes);
			claim_component(row3.$$.fragment, nodes);
			t7 = claim_space(nodes);
			claim_component(row4.$$.fragment, nodes);
			t8 = claim_space(nodes);
			claim_component(row5.$$.fragment, nodes);
			t9 = claim_space(nodes);
			claim_component(row6.$$.fragment, nodes);
			t10 = claim_space(nodes);
			claim_component(row7.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "mt-4");
			add_location(h1, file, 24, 0, 613);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			mount_component(breadcrumb, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(row0, target, anchor);
			insert_dev(target, t4, anchor);
			mount_component(row1, target, anchor);
			insert_dev(target, t5, anchor);
			mount_component(row2, target, anchor);
			insert_dev(target, t6, anchor);
			mount_component(row3, target, anchor);
			insert_dev(target, t7, anchor);
			mount_component(row4, target, anchor);
			insert_dev(target, t8, anchor);
			mount_component(row5, target, anchor);
			insert_dev(target, t9, anchor);
			mount_component(row6, target, anchor);
			insert_dev(target, t10, anchor);
			mount_component(row7, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*title*/ 1) && title_value !== (title_value = /*title*/ ctx[0])) {
				document.title = title_value;
			}

			const breadcrumb_changes = {};

			if (dirty & /*$$scope*/ 4) {
				breadcrumb_changes.$$scope = { dirty, ctx };
			}

			breadcrumb.$set(breadcrumb_changes);
			const row0_changes = {};

			if (dirty & /*$$scope*/ 4) {
				row0_changes.$$scope = { dirty, ctx };
			}

			row0.$set(row0_changes);
			const row1_changes = {};

			if (dirty & /*$$scope*/ 4) {
				row1_changes.$$scope = { dirty, ctx };
			}

			row1.$set(row1_changes);
			const row2_changes = {};

			if (dirty & /*$$scope*/ 4) {
				row2_changes.$$scope = { dirty, ctx };
			}

			row2.$set(row2_changes);
			const row3_changes = {};

			if (dirty & /*$$scope*/ 4) {
				row3_changes.$$scope = { dirty, ctx };
			}

			row3.$set(row3_changes);
			const row4_changes = {};

			if (dirty & /*$$scope*/ 4) {
				row4_changes.$$scope = { dirty, ctx };
			}

			row4.$set(row4_changes);
			const row5_changes = {};

			if (dirty & /*$$scope*/ 4) {
				row5_changes.$$scope = { dirty, ctx };
			}

			row5.$set(row5_changes);
			const row6_changes = {};

			if (dirty & /*$$scope*/ 4) {
				row6_changes.$$scope = { dirty, ctx };
			}

			row6.$set(row6_changes);
			const row7_changes = {};

			if (dirty & /*$$scope*/ 4) {
				row7_changes.$$scope = { dirty, ctx };
			}

			row7.$set(row7_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(breadcrumb.$$.fragment, local);
			transition_in(row0.$$.fragment, local);
			transition_in(row1.$$.fragment, local);
			transition_in(row2.$$.fragment, local);
			transition_in(row3.$$.fragment, local);
			transition_in(row4.$$.fragment, local);
			transition_in(row5.$$.fragment, local);
			transition_in(row6.$$.fragment, local);
			transition_in(row7.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(breadcrumb.$$.fragment, local);
			transition_out(row0.$$.fragment, local);
			transition_out(row1.$$.fragment, local);
			transition_out(row2.$$.fragment, local);
			transition_out(row3.$$.fragment, local);
			transition_out(row4.$$.fragment, local);
			transition_out(row5.$$.fragment, local);
			transition_out(row6.$$.fragment, local);
			transition_out(row7.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			destroy_component(breadcrumb, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(row0, detaching);
			if (detaching) detach_dev(t4);
			destroy_component(row1, detaching);
			if (detaching) detach_dev(t5);
			destroy_component(row2, detaching);
			if (detaching) detach_dev(t6);
			destroy_component(row3, detaching);
			if (detaching) detach_dev(t7);
			destroy_component(row4, detaching);
			if (detaching) detach_dev(t8);
			destroy_component(row5, detaching);
			if (detaching) detach_dev(t9);
			destroy_component(row6, detaching);
			if (detaching) detach_dev(t10);
			destroy_component(row7, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self) {
	let title = "Прогресс бар | Шкала прогресса | UI | Пользовательский Интерфейс";

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
	};

	return [title];
}

class Progress_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Progress_1",
			options,
			id: create_fragment.name
		});
	}
}

export default Progress_1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
