import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, af as Dropdown, J as space, f as element, y as text, F as create_component, L as query_selector_all, j as detach_dev, K as claim_space, g as claim_element, h as children, z as claim_text, G as claim_component, k as attr_dev, l as add_location, n as insert_dev, o as append_dev, H as mount_component, r as transition_in, t as transition_out, I as destroy_component, ag as DropdownToggle, ah as DropdownMenu, ai as DropdownItem } from './client.4d60bc3d.js';
import { B as Breadcrumb, a as BreadcrumbItem } from './BreadcrumbItem.6bd39df2.js';
import { R as Row } from './Row.68cb2c36.js';

/* src\routes\ui\dropdowns.svelte generated by Svelte v3.18.1 */
const file = "src\\routes\\ui\\dropdowns.svelte";

// (33:4) <BreadcrumbItem active>
function create_default_slot_34(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Ниспадающее контекстное меню");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Ниспадающее контекстное меню");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_34.name,
		type: "slot",
		source: "(33:4) <BreadcrumbItem active>",
		ctx
	});

	return block;
}

// (32:0) <Breadcrumb class="mb-4">
function create_default_slot_33(ctx) {
	let current;

	const breadcrumbitem = new BreadcrumbItem({
			props: {
				active: true,
				$$slots: { default: [create_default_slot_34] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(breadcrumbitem.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(breadcrumbitem.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(breadcrumbitem, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const breadcrumbitem_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				breadcrumbitem_changes.$$scope = { dirty, ctx };
			}

			breadcrumbitem.$set(breadcrumbitem_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(breadcrumbitem.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(breadcrumbitem.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(breadcrumbitem, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_33.name,
		type: "slot",
		source: "(32:0) <Breadcrumb class=\\\"mb-4\\\">",
		ctx
	});

	return block;
}

// (58:12) <DropdownToggle caret>
function create_default_slot_32(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Dropdown");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Dropdown");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_32.name,
		type: "slot",
		source: "(58:12) <DropdownToggle caret>",
		ctx
	});

	return block;
}

// (60:16) <DropdownItem header>
function create_default_slot_31(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Хедер");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Хедер");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_31.name,
		type: "slot",
		source: "(60:16) <DropdownItem header>",
		ctx
	});

	return block;
}

// (61:16) <DropdownItem>
function create_default_slot_30(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Какие-то действия");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Какие-то действия");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_30.name,
		type: "slot",
		source: "(61:16) <DropdownItem>",
		ctx
	});

	return block;
}

// (62:16) <DropdownItem disabled>
function create_default_slot_29(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Действия (не активно)");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Действия (не активно)");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_29.name,
		type: "slot",
		source: "(62:16) <DropdownItem disabled>",
		ctx
	});

	return block;
}

// (64:16) <DropdownItem>
function create_default_slot_28(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Foo Действия");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Foo Действия");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_28.name,
		type: "slot",
		source: "(64:16) <DropdownItem>",
		ctx
	});

	return block;
}

// (65:16) <DropdownItem>
function create_default_slot_27(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Bar Действия");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Bar Действия");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_27.name,
		type: "slot",
		source: "(65:16) <DropdownItem>",
		ctx
	});

	return block;
}

// (66:16) <DropdownItem>
function create_default_slot_26(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Baz Действия");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Baz Действия");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_26.name,
		type: "slot",
		source: "(66:16) <DropdownItem>",
		ctx
	});

	return block;
}

// (59:12) <DropdownMenu>
function create_default_slot_25(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let current;

	const dropdownitem0 = new DropdownItem({
			props: {
				header: true,
				$$slots: { default: [create_default_slot_31] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownitem1 = new DropdownItem({
			props: {
				$$slots: { default: [create_default_slot_30] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownitem2 = new DropdownItem({
			props: {
				disabled: true,
				$$slots: { default: [create_default_slot_29] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownitem3 = new DropdownItem({ props: { divider: true }, $$inline: true });

	const dropdownitem4 = new DropdownItem({
			props: {
				$$slots: { default: [create_default_slot_28] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownitem5 = new DropdownItem({
			props: {
				$$slots: { default: [create_default_slot_27] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownitem6 = new DropdownItem({
			props: {
				$$slots: { default: [create_default_slot_26] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dropdownitem0.$$.fragment);
			t0 = space();
			create_component(dropdownitem1.$$.fragment);
			t1 = space();
			create_component(dropdownitem2.$$.fragment);
			t2 = space();
			create_component(dropdownitem3.$$.fragment);
			t3 = space();
			create_component(dropdownitem4.$$.fragment);
			t4 = space();
			create_component(dropdownitem5.$$.fragment);
			t5 = space();
			create_component(dropdownitem6.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(dropdownitem0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(dropdownitem1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(dropdownitem2.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(dropdownitem3.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(dropdownitem4.$$.fragment, nodes);
			t4 = claim_space(nodes);
			claim_component(dropdownitem5.$$.fragment, nodes);
			t5 = claim_space(nodes);
			claim_component(dropdownitem6.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(dropdownitem0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(dropdownitem1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(dropdownitem2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(dropdownitem3, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(dropdownitem4, target, anchor);
			insert_dev(target, t4, anchor);
			mount_component(dropdownitem5, target, anchor);
			insert_dev(target, t5, anchor);
			mount_component(dropdownitem6, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdownitem0_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				dropdownitem0_changes.$$scope = { dirty, ctx };
			}

			dropdownitem0.$set(dropdownitem0_changes);
			const dropdownitem1_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				dropdownitem1_changes.$$scope = { dirty, ctx };
			}

			dropdownitem1.$set(dropdownitem1_changes);
			const dropdownitem2_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				dropdownitem2_changes.$$scope = { dirty, ctx };
			}

			dropdownitem2.$set(dropdownitem2_changes);
			const dropdownitem4_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				dropdownitem4_changes.$$scope = { dirty, ctx };
			}

			dropdownitem4.$set(dropdownitem4_changes);
			const dropdownitem5_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				dropdownitem5_changes.$$scope = { dirty, ctx };
			}

			dropdownitem5.$set(dropdownitem5_changes);
			const dropdownitem6_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				dropdownitem6_changes.$$scope = { dirty, ctx };
			}

			dropdownitem6.$set(dropdownitem6_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdownitem0.$$.fragment, local);
			transition_in(dropdownitem1.$$.fragment, local);
			transition_in(dropdownitem2.$$.fragment, local);
			transition_in(dropdownitem3.$$.fragment, local);
			transition_in(dropdownitem4.$$.fragment, local);
			transition_in(dropdownitem5.$$.fragment, local);
			transition_in(dropdownitem6.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdownitem0.$$.fragment, local);
			transition_out(dropdownitem1.$$.fragment, local);
			transition_out(dropdownitem2.$$.fragment, local);
			transition_out(dropdownitem3.$$.fragment, local);
			transition_out(dropdownitem4.$$.fragment, local);
			transition_out(dropdownitem5.$$.fragment, local);
			transition_out(dropdownitem6.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdownitem0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(dropdownitem1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(dropdownitem2, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(dropdownitem3, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(dropdownitem4, detaching);
			if (detaching) detach_dev(t4);
			destroy_component(dropdownitem5, detaching);
			if (detaching) detach_dev(t5);
			destroy_component(dropdownitem6, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_25.name,
		type: "slot",
		source: "(59:12) <DropdownMenu>",
		ctx
	});

	return block;
}

// (57:8) <Dropdown   {isOpen} toggle={() => (isOpen = !isOpen)}>
function create_default_slot_24(ctx) {
	let t;
	let current;

	const dropdowntoggle = new DropdownToggle({
			props: {
				caret: true,
				$$slots: { default: [create_default_slot_32] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownmenu = new DropdownMenu({
			props: {
				$$slots: { default: [create_default_slot_25] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dropdowntoggle.$$.fragment);
			t = space();
			create_component(dropdownmenu.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(dropdowntoggle.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(dropdownmenu.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(dropdowntoggle, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(dropdownmenu, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdowntoggle_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				dropdowntoggle_changes.$$scope = { dirty, ctx };
			}

			dropdowntoggle.$set(dropdowntoggle_changes);
			const dropdownmenu_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				dropdownmenu_changes.$$scope = { dirty, ctx };
			}

			dropdownmenu.$set(dropdownmenu_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdowntoggle.$$.fragment, local);
			transition_in(dropdownmenu.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdowntoggle.$$.fragment, local);
			transition_out(dropdownmenu.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdowntoggle, detaching);
			if (detaching) detach_dev(t);
			destroy_component(dropdownmenu, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_24.name,
		type: "slot",
		source: "(57:8) <Dropdown   {isOpen} toggle={() => (isOpen = !isOpen)}>",
		ctx
	});

	return block;
}

// (41:0) <Row>
function create_default_slot_23(ctx) {
	let div0;
	let h3;
	let t0;
	let t1;
	let p0;
	let t2;
	let t3;
	let h4;
	let t4;
	let t5;
	let p1;
	let t6;
	let t7;
	let div1;
	let current;

	const dropdown = new Dropdown({
			props: {
				isOpen: /*isOpen*/ ctx[0],
				toggle: /*func*/ ctx[5],
				$$slots: { default: [create_default_slot_24] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div0 = element("div");
			h3 = element("h3");
			t0 = text("Пример");
			t1 = space();
			p0 = element("p");
			t2 = text("Переключайте контекстные накладки для отображения списков ссылок\r\n            и многое другое с помощью выпадающего плагина Sveltestrap.");
			t3 = space();
			h4 = element("h4");
			t4 = text("Обзор");
			t5 = space();
			p1 = element("p");
			t6 = text("Dropdowns - это переключаемые контекстные вкладки\r\n            для отображения списков ссылок и многого другого.\r\n            Они сделаны интерактивными с помощью входящего в комплект\r\n            Sveltestrap выпадающего плагина JavaScript.\r\n            Они переключаются щелчком мыши, а не навешиванием;\r\n            это преднамеренное дизайнерское решение.");
			t7 = space();
			div1 = element("div");
			create_component(dropdown.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h3 = claim_element(div0_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, "Пример");
			h3_nodes.forEach(detach_dev);
			t1 = claim_space(div0_nodes);
			p0 = claim_element(div0_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t2 = claim_text(p0_nodes, "Переключайте контекстные накладки для отображения списков ссылок\r\n            и многое другое с помощью выпадающего плагина Sveltestrap.");
			p0_nodes.forEach(detach_dev);
			t3 = claim_space(div0_nodes);
			h4 = claim_element(div0_nodes, "H4", { class: true });
			var h4_nodes = children(h4);
			t4 = claim_text(h4_nodes, "Обзор");
			h4_nodes.forEach(detach_dev);
			t5 = claim_space(div0_nodes);
			p1 = claim_element(div0_nodes, "P", {});
			var p1_nodes = children(p1);
			t6 = claim_text(p1_nodes, "Dropdowns - это переключаемые контекстные вкладки\r\n            для отображения списков ссылок и многого другого.\r\n            Они сделаны интерактивными с помощью входящего в комплект\r\n            Sveltestrap выпадающего плагина JavaScript.\r\n            Они переключаются щелчком мыши, а не навешиванием;\r\n            это преднамеренное дизайнерское решение.");
			p1_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t7 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			claim_component(dropdown.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h3, "class", "mt-4");
			add_location(h3, file, 42, 10, 1251);
			attr_dev(p0, "class", "lead");
			add_location(p0, file, 43, 8, 1289);
			attr_dev(h4, "class", "mt-4");
			add_location(h4, file, 47, 8, 1479);
			add_location(p1, file, 48, 8, 1516);
			attr_dev(div0, "class", "col-xl-6");
			add_location(div0, file, 41, 4, 1217);
			attr_dev(div1, "class", "col-xl-6");
			add_location(div1, file, 55, 4, 1899);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			append_dev(div0, h3);
			append_dev(h3, t0);
			append_dev(div0, t1);
			append_dev(div0, p0);
			append_dev(p0, t2);
			append_dev(div0, t3);
			append_dev(div0, h4);
			append_dev(h4, t4);
			append_dev(div0, t5);
			append_dev(div0, p1);
			append_dev(p1, t6);
			insert_dev(target, t7, anchor);
			insert_dev(target, div1, anchor);
			mount_component(dropdown, div1, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdown_changes = {};
			if (dirty & /*isOpen*/ 1) dropdown_changes.isOpen = /*isOpen*/ ctx[0];
			if (dirty & /*isOpen*/ 1) dropdown_changes.toggle = /*func*/ ctx[5];

			if (dirty & /*$$scope*/ 1024) {
				dropdown_changes.$$scope = { dirty, ctx };
			}

			dropdown.$set(dropdown_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdown.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdown.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(div1);
			destroy_component(dropdown);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_23.name,
		type: "slot",
		source: "(41:0) <Row>",
		ctx
	});

	return block;
}

// (77:12) <DropdownToggle caret>
function create_default_slot_22(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Ниспадающее меню выравненное по правому краю");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Ниспадающее меню выравненное по правому краю");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_22.name,
		type: "slot",
		source: "(77:12) <DropdownToggle caret>",
		ctx
	});

	return block;
}

// (81:16) <DropdownItem header>
function create_default_slot_21(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Заголовок");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Заголовок");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_21.name,
		type: "slot",
		source: "(81:16) <DropdownItem header>",
		ctx
	});

	return block;
}

// (82:16) <DropdownItem disabled>
function create_default_slot_20(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Действие");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Действие");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_20.name,
		type: "slot",
		source: "(82:16) <DropdownItem disabled>",
		ctx
	});

	return block;
}

// (83:16) <DropdownItem>
function create_default_slot_19(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Другое действие");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Другое действие");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_19.name,
		type: "slot",
		source: "(83:16) <DropdownItem>",
		ctx
	});

	return block;
}

// (80:12) <DropdownMenu right>
function create_default_slot_18(ctx) {
	let t0;
	let t1;
	let current;

	const dropdownitem0 = new DropdownItem({
			props: {
				header: true,
				$$slots: { default: [create_default_slot_21] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownitem1 = new DropdownItem({
			props: {
				disabled: true,
				$$slots: { default: [create_default_slot_20] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownitem2 = new DropdownItem({
			props: {
				$$slots: { default: [create_default_slot_19] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dropdownitem0.$$.fragment);
			t0 = space();
			create_component(dropdownitem1.$$.fragment);
			t1 = space();
			create_component(dropdownitem2.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(dropdownitem0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(dropdownitem1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(dropdownitem2.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(dropdownitem0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(dropdownitem1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(dropdownitem2, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdownitem0_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				dropdownitem0_changes.$$scope = { dirty, ctx };
			}

			dropdownitem0.$set(dropdownitem0_changes);
			const dropdownitem1_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				dropdownitem1_changes.$$scope = { dirty, ctx };
			}

			dropdownitem1.$set(dropdownitem1_changes);
			const dropdownitem2_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				dropdownitem2_changes.$$scope = { dirty, ctx };
			}

			dropdownitem2.$set(dropdownitem2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdownitem0.$$.fragment, local);
			transition_in(dropdownitem1.$$.fragment, local);
			transition_in(dropdownitem2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdownitem0.$$.fragment, local);
			transition_out(dropdownitem1.$$.fragment, local);
			transition_out(dropdownitem2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdownitem0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(dropdownitem1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(dropdownitem2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_18.name,
		type: "slot",
		source: "(80:12) <DropdownMenu right>",
		ctx
	});

	return block;
}

// (76:8) <Dropdown isOpen={isOpen} toggle="{() => isOpen = !isOpen}">
function create_default_slot_17(ctx) {
	let t;
	let current;

	const dropdowntoggle = new DropdownToggle({
			props: {
				caret: true,
				$$slots: { default: [create_default_slot_22] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownmenu = new DropdownMenu({
			props: {
				right: true,
				$$slots: { default: [create_default_slot_18] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dropdowntoggle.$$.fragment);
			t = space();
			create_component(dropdownmenu.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(dropdowntoggle.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(dropdownmenu.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(dropdowntoggle, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(dropdownmenu, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdowntoggle_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				dropdowntoggle_changes.$$scope = { dirty, ctx };
			}

			dropdowntoggle.$set(dropdowntoggle_changes);
			const dropdownmenu_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				dropdownmenu_changes.$$scope = { dirty, ctx };
			}

			dropdownmenu.$set(dropdownmenu_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdowntoggle.$$.fragment, local);
			transition_in(dropdownmenu.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdowntoggle.$$.fragment, local);
			transition_out(dropdownmenu.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdowntoggle, detaching);
			if (detaching) detach_dev(t);
			destroy_component(dropdownmenu, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_17.name,
		type: "slot",
		source: "(76:8) <Dropdown isOpen={isOpen} toggle=\\\"{() => isOpen = !isOpen}\\\">",
		ctx
	});

	return block;
}

// (72:0) <Row>
function create_default_slot_16(ctx) {
	let div;
	let h2;
	let t0;
	let t1;
	let h3;
	let t2;
	let t3;
	let current;

	const dropdown = new Dropdown({
			props: {
				isOpen: /*isOpen*/ ctx[0],
				toggle: /*func_1*/ ctx[6],
				$$slots: { default: [create_default_slot_17] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			h2 = element("h2");
			t0 = text("Выравнивание");
			t1 = space();
			h3 = element("h3");
			t2 = text("Пример");
			t3 = space();
			create_component(dropdown.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h2 = claim_element(div_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "Выравнивание");
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			h3 = claim_element(div_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t2 = claim_text(h3_nodes, "Пример");
			h3_nodes.forEach(detach_dev);
			t3 = claim_space(div_nodes);
			claim_component(dropdown.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "mt-4");
			add_location(h2, file, 73, 8, 2611);
			attr_dev(h3, "class", "mt-4");
			add_location(h3, file, 74, 8, 2655);
			attr_dev(div, "class", "col-xl-6");
			add_location(div, file, 72, 4, 2579);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h2);
			append_dev(h2, t0);
			append_dev(div, t1);
			append_dev(div, h3);
			append_dev(h3, t2);
			append_dev(div, t3);
			mount_component(dropdown, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdown_changes = {};
			if (dirty & /*isOpen*/ 1) dropdown_changes.isOpen = /*isOpen*/ ctx[0];
			if (dirty & /*isOpen*/ 1) dropdown_changes.toggle = /*func_1*/ ctx[6];

			if (dirty & /*$$scope*/ 1024) {
				dropdown_changes.$$scope = { dirty, ctx };
			}

			dropdown.$set(dropdown_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdown.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdown.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(dropdown);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_16.name,
		type: "slot",
		source: "(72:0) <Row>",
		ctx
	});

	return block;
}

// (98:12) <DropdownToggle caret>
function create_default_slot_15(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Dropup");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Dropup");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_15.name,
		type: "slot",
		source: "(98:12) <DropdownToggle caret>",
		ctx
	});

	return block;
}

// (100:16) <DropdownItem>
function create_default_slot_14(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Another Action");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Another Action");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_14.name,
		type: "slot",
		source: "(100:16) <DropdownItem>",
		ctx
	});

	return block;
}

// (101:16) <DropdownItem>
function create_default_slot_13(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Another Action");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Another Action");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13.name,
		type: "slot",
		source: "(101:16) <DropdownItem>",
		ctx
	});

	return block;
}

// (99:12) <DropdownMenu>
function create_default_slot_12(ctx) {
	let t;
	let current;

	const dropdownitem0 = new DropdownItem({
			props: {
				$$slots: { default: [create_default_slot_14] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownitem1 = new DropdownItem({
			props: {
				$$slots: { default: [create_default_slot_13] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dropdownitem0.$$.fragment);
			t = space();
			create_component(dropdownitem1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(dropdownitem0.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(dropdownitem1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(dropdownitem0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(dropdownitem1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdownitem0_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				dropdownitem0_changes.$$scope = { dirty, ctx };
			}

			dropdownitem0.$set(dropdownitem0_changes);
			const dropdownitem1_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				dropdownitem1_changes.$$scope = { dirty, ctx };
			}

			dropdownitem1.$set(dropdownitem1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdownitem0.$$.fragment, local);
			transition_in(dropdownitem1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdownitem0.$$.fragment, local);
			transition_out(dropdownitem1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdownitem0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(dropdownitem1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12.name,
		type: "slot",
		source: "(99:12) <DropdownMenu>",
		ctx
	});

	return block;
}

// (93:8) <Dropdown                  direction="up"                  {isOpen}                  toggle={() => (isOpen = !isOpen)}          >
function create_default_slot_11(ctx) {
	let t;
	let current;

	const dropdowntoggle = new DropdownToggle({
			props: {
				caret: true,
				$$slots: { default: [create_default_slot_15] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownmenu = new DropdownMenu({
			props: {
				$$slots: { default: [create_default_slot_12] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dropdowntoggle.$$.fragment);
			t = space();
			create_component(dropdownmenu.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(dropdowntoggle.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(dropdownmenu.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(dropdowntoggle, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(dropdownmenu, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdowntoggle_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				dropdowntoggle_changes.$$scope = { dirty, ctx };
			}

			dropdowntoggle.$set(dropdowntoggle_changes);
			const dropdownmenu_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				dropdownmenu_changes.$$scope = { dirty, ctx };
			}

			dropdownmenu.$set(dropdownmenu_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdowntoggle.$$.fragment, local);
			transition_in(dropdownmenu.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdowntoggle.$$.fragment, local);
			transition_out(dropdownmenu.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdowntoggle, detaching);
			if (detaching) detach_dev(t);
			destroy_component(dropdownmenu, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11.name,
		type: "slot",
		source: "(93:8) <Dropdown                  direction=\\\"up\\\"                  {isOpen}                  toggle={() => (isOpen = !isOpen)}          >",
		ctx
	});

	return block;
}

// (110:12) <DropdownToggle caret>
function create_default_slot_10(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Dropleft");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Dropleft");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(110:12) <DropdownToggle caret>",
		ctx
	});

	return block;
}

// (112:16) <DropdownItem>
function create_default_slot_9(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Another Action");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Another Action");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(112:16) <DropdownItem>",
		ctx
	});

	return block;
}

// (113:16) <DropdownItem>
function create_default_slot_8(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Another Action");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Another Action");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(113:16) <DropdownItem>",
		ctx
	});

	return block;
}

// (111:12) <DropdownMenu>
function create_default_slot_7(ctx) {
	let t;
	let current;

	const dropdownitem0 = new DropdownItem({
			props: {
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownitem1 = new DropdownItem({
			props: {
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dropdownitem0.$$.fragment);
			t = space();
			create_component(dropdownitem1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(dropdownitem0.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(dropdownitem1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(dropdownitem0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(dropdownitem1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdownitem0_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				dropdownitem0_changes.$$scope = { dirty, ctx };
			}

			dropdownitem0.$set(dropdownitem0_changes);
			const dropdownitem1_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				dropdownitem1_changes.$$scope = { dirty, ctx };
			}

			dropdownitem1.$set(dropdownitem1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdownitem0.$$.fragment, local);
			transition_in(dropdownitem1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdownitem0.$$.fragment, local);
			transition_out(dropdownitem1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdownitem0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(dropdownitem1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(111:12) <DropdownMenu>",
		ctx
	});

	return block;
}

// (105:8) <Dropdown                  direction="left"                  isOpen={leftIsOpen}                  toggle={() => (leftIsOpen = !leftIsOpen)}          >
function create_default_slot_6(ctx) {
	let t;
	let current;

	const dropdowntoggle = new DropdownToggle({
			props: {
				caret: true,
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownmenu = new DropdownMenu({
			props: {
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dropdowntoggle.$$.fragment);
			t = space();
			create_component(dropdownmenu.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(dropdowntoggle.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(dropdownmenu.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(dropdowntoggle, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(dropdownmenu, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdowntoggle_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				dropdowntoggle_changes.$$scope = { dirty, ctx };
			}

			dropdowntoggle.$set(dropdowntoggle_changes);
			const dropdownmenu_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				dropdownmenu_changes.$$scope = { dirty, ctx };
			}

			dropdownmenu.$set(dropdownmenu_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdowntoggle.$$.fragment, local);
			transition_in(dropdownmenu.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdowntoggle.$$.fragment, local);
			transition_out(dropdownmenu.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdowntoggle, detaching);
			if (detaching) detach_dev(t);
			destroy_component(dropdownmenu, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(105:8) <Dropdown                  direction=\\\"left\\\"                  isOpen={leftIsOpen}                  toggle={() => (leftIsOpen = !leftIsOpen)}          >",
		ctx
	});

	return block;
}

// (122:12) <DropdownToggle caret>
function create_default_slot_5(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Dropright");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Dropright");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(122:12) <DropdownToggle caret>",
		ctx
	});

	return block;
}

// (124:16) <DropdownItem>
function create_default_slot_4(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Another Action");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Another Action");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(124:16) <DropdownItem>",
		ctx
	});

	return block;
}

// (125:16) <DropdownItem>
function create_default_slot_3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Another Action");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Another Action");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(125:16) <DropdownItem>",
		ctx
	});

	return block;
}

// (123:12) <DropdownMenu>
function create_default_slot_2(ctx) {
	let t;
	let current;

	const dropdownitem0 = new DropdownItem({
			props: {
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownitem1 = new DropdownItem({
			props: {
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dropdownitem0.$$.fragment);
			t = space();
			create_component(dropdownitem1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(dropdownitem0.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(dropdownitem1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(dropdownitem0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(dropdownitem1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdownitem0_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				dropdownitem0_changes.$$scope = { dirty, ctx };
			}

			dropdownitem0.$set(dropdownitem0_changes);
			const dropdownitem1_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				dropdownitem1_changes.$$scope = { dirty, ctx };
			}

			dropdownitem1.$set(dropdownitem1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdownitem0.$$.fragment, local);
			transition_in(dropdownitem1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdownitem0.$$.fragment, local);
			transition_out(dropdownitem1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdownitem0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(dropdownitem1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(123:12) <DropdownMenu>",
		ctx
	});

	return block;
}

// (117:8) <Dropdown                  direction="right"                  isOpen={rightIsOpen}                  toggle={() => (rightIsOpen = !rightIsOpen)}          >
function create_default_slot_1(ctx) {
	let t;
	let current;

	const dropdowntoggle = new DropdownToggle({
			props: {
				caret: true,
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownmenu = new DropdownMenu({
			props: {
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dropdowntoggle.$$.fragment);
			t = space();
			create_component(dropdownmenu.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(dropdowntoggle.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(dropdownmenu.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(dropdowntoggle, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(dropdownmenu, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdowntoggle_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				dropdowntoggle_changes.$$scope = { dirty, ctx };
			}

			dropdowntoggle.$set(dropdowntoggle_changes);
			const dropdownmenu_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				dropdownmenu_changes.$$scope = { dirty, ctx };
			}

			dropdownmenu.$set(dropdownmenu_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdowntoggle.$$.fragment, local);
			transition_in(dropdownmenu.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdowntoggle.$$.fragment, local);
			transition_out(dropdownmenu.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdowntoggle, detaching);
			if (detaching) detach_dev(t);
			destroy_component(dropdownmenu, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(117:8) <Dropdown                  direction=\\\"right\\\"                  isOpen={rightIsOpen}                  toggle={() => (rightIsOpen = !rightIsOpen)}          >",
		ctx
	});

	return block;
}

// (91:0) <Row>
function create_default_slot(ctx) {
	let div;
	let t0;
	let t1;
	let current;

	const dropdown0 = new Dropdown({
			props: {
				direction: "up",
				isOpen: /*isOpen*/ ctx[0],
				toggle: /*func_2*/ ctx[7],
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdown1 = new Dropdown({
			props: {
				direction: "left",
				isOpen: /*leftIsOpen*/ ctx[1],
				toggle: /*func_3*/ ctx[8],
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdown2 = new Dropdown({
			props: {
				direction: "right",
				isOpen: /*rightIsOpen*/ ctx[2],
				toggle: /*func_4*/ ctx[9],
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(dropdown0.$$.fragment);
			t0 = space();
			create_component(dropdown1.$$.fragment);
			t1 = space();
			create_component(dropdown2.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(dropdown0.$$.fragment, div_nodes);
			t0 = claim_space(div_nodes);
			claim_component(dropdown1.$$.fragment, div_nodes);
			t1 = claim_space(div_nodes);
			claim_component(dropdown2.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "col-xl-12");
			add_location(div, file, 91, 4, 3194);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(dropdown0, div, null);
			append_dev(div, t0);
			mount_component(dropdown1, div, null);
			append_dev(div, t1);
			mount_component(dropdown2, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdown0_changes = {};
			if (dirty & /*isOpen*/ 1) dropdown0_changes.isOpen = /*isOpen*/ ctx[0];
			if (dirty & /*isOpen*/ 1) dropdown0_changes.toggle = /*func_2*/ ctx[7];

			if (dirty & /*$$scope*/ 1024) {
				dropdown0_changes.$$scope = { dirty, ctx };
			}

			dropdown0.$set(dropdown0_changes);
			const dropdown1_changes = {};
			if (dirty & /*leftIsOpen*/ 2) dropdown1_changes.isOpen = /*leftIsOpen*/ ctx[1];
			if (dirty & /*leftIsOpen*/ 2) dropdown1_changes.toggle = /*func_3*/ ctx[8];

			if (dirty & /*$$scope*/ 1024) {
				dropdown1_changes.$$scope = { dirty, ctx };
			}

			dropdown1.$set(dropdown1_changes);
			const dropdown2_changes = {};
			if (dirty & /*rightIsOpen*/ 4) dropdown2_changes.isOpen = /*rightIsOpen*/ ctx[2];
			if (dirty & /*rightIsOpen*/ 4) dropdown2_changes.toggle = /*func_4*/ ctx[9];

			if (dirty & /*$$scope*/ 1024) {
				dropdown2_changes.$$scope = { dirty, ctx };
			}

			dropdown2.$set(dropdown2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdown0.$$.fragment, local);
			transition_in(dropdown1.$$.fragment, local);
			transition_in(dropdown2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdown0.$$.fragment, local);
			transition_out(dropdown1.$$.fragment, local);
			transition_out(dropdown2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(dropdown0);
			destroy_component(dropdown1);
			destroy_component(dropdown2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(91:0) <Row>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let title_value;
	let t0;
	let h1;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let current;
	document.title = title_value = /*title*/ ctx[3];

	const breadcrumb = new Breadcrumb({
			props: {
				class: "mb-4",
				$$slots: { default: [create_default_slot_33] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row0 = new Row({
			props: {
				$$slots: { default: [create_default_slot_23] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row1 = new Row({
			props: {
				$$slots: { default: [create_default_slot_16] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row2 = new Row({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("Ниспадающее контекстное меню");
			t2 = space();
			create_component(breadcrumb.$$.fragment);
			t3 = space();
			create_component(row0.$$.fragment);
			t4 = space();
			create_component(row1.$$.fragment);
			t5 = space();
			create_component(row2.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-46oba3\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Ниспадающее контекстное меню");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			claim_component(breadcrumb.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(row0.$$.fragment, nodes);
			t4 = claim_space(nodes);
			claim_component(row1.$$.fragment, nodes);
			t5 = claim_space(nodes);
			claim_component(row2.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "mt-4");
			add_location(h1, file, 30, 0, 908);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			mount_component(breadcrumb, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(row0, target, anchor);
			insert_dev(target, t4, anchor);
			mount_component(row1, target, anchor);
			insert_dev(target, t5, anchor);
			mount_component(row2, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*title*/ 8) && title_value !== (title_value = /*title*/ ctx[3])) {
				document.title = title_value;
			}

			const breadcrumb_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				breadcrumb_changes.$$scope = { dirty, ctx };
			}

			breadcrumb.$set(breadcrumb_changes);
			const row0_changes = {};

			if (dirty & /*$$scope, isOpen*/ 1025) {
				row0_changes.$$scope = { dirty, ctx };
			}

			row0.$set(row0_changes);
			const row1_changes = {};

			if (dirty & /*$$scope, isOpen*/ 1025) {
				row1_changes.$$scope = { dirty, ctx };
			}

			row1.$set(row1_changes);
			const row2_changes = {};

			if (dirty & /*$$scope, rightIsOpen, leftIsOpen, isOpen*/ 1031) {
				row2_changes.$$scope = { dirty, ctx };
			}

			row2.$set(row2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(breadcrumb.$$.fragment, local);
			transition_in(row0.$$.fragment, local);
			transition_in(row1.$$.fragment, local);
			transition_in(row2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(breadcrumb.$$.fragment, local);
			transition_out(row0.$$.fragment, local);
			transition_out(row1.$$.fragment, local);
			transition_out(row2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			destroy_component(breadcrumb, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(row0, detaching);
			if (detaching) detach_dev(t4);
			destroy_component(row1, detaching);
			if (detaching) detach_dev(t5);
			destroy_component(row2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let title = "Ниспадающее контекстное меню | UI | Пользовательский Интерфейс";

	const colors = [
		"primary",
		"secondary",
		"success",
		"danger",
		"warning",
		"info",
		"light",
		"dark"
	];

	let isOpen = false;
	let leftIsOpen = false;
	let rightIsOpen = false;
	const func = () => $$invalidate(0, isOpen = !isOpen);
	const func_1 = () => $$invalidate(0, isOpen = !isOpen);
	const func_2 = () => $$invalidate(0, isOpen = !isOpen);
	const func_3 = () => $$invalidate(1, leftIsOpen = !leftIsOpen);
	const func_4 = () => $$invalidate(2, rightIsOpen = !rightIsOpen);

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("title" in $$props) $$invalidate(3, title = $$props.title);
		if ("isOpen" in $$props) $$invalidate(0, isOpen = $$props.isOpen);
		if ("leftIsOpen" in $$props) $$invalidate(1, leftIsOpen = $$props.leftIsOpen);
		if ("rightIsOpen" in $$props) $$invalidate(2, rightIsOpen = $$props.rightIsOpen);
	};

	return [
		isOpen,
		leftIsOpen,
		rightIsOpen,
		title,
		colors,
		func,
		func_1,
		func_2,
		func_3,
		func_4
	];
}

class Dropdowns extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Dropdowns",
			options,
			id: create_fragment.name
		});
	}
}

export default Dropdowns;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd25zLjJkMDEzNDE1LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcm91dGVzL3VpL2Ryb3Bkb3ducy5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cclxuICAgIGxldCB0aXRsZSA9IFwi0J3QuNGB0L/QsNC00LDRjtGJ0LXQtSDQutC+0L3RgtC10LrRgdGC0L3QvtC1INC80LXQvdGOIHwgVUkgfCDQn9C+0LvRjNC30L7QstCw0YLQtdC70YzRgdC60LjQuSDQmNC90YLQtdGA0YTQtdC50YFcIjtcclxuICAgIGltcG9ydCAgQnJlYWRjcnVtYiAgZnJvbSBcInN2ZWx0ZXN0cmFwL3NyYy9CcmVhZGNydW1iLnN2ZWx0ZVwiO1xyXG4gICAgaW1wb3J0ICBCcmVhZGNydW1iSXRlbSAgZnJvbSBcInN2ZWx0ZXN0cmFwL3NyYy9CcmVhZGNydW1iSXRlbS5zdmVsdGVcIjtcclxuICAgIGltcG9ydCAgUm93ICBmcm9tIFwic3ZlbHRlc3RyYXAvc3JjL1Jvdy5zdmVsdGVcIjtcclxuXHJcbiAgICBpbXBvcnQgIERyb3Bkb3duIGZyb20gXCJzdmVsdGVzdHJhcC9zcmMvRHJvcGRvd24uc3ZlbHRlXCI7XHJcbiAgICBpbXBvcnQgIERyb3Bkb3duSXRlbSBmcm9tIFwic3ZlbHRlc3RyYXAvc3JjL0Ryb3Bkb3duSXRlbS5zdmVsdGVcIjtcclxuICAgIGltcG9ydCAgRHJvcGRvd25NZW51IGZyb20gXCJzdmVsdGVzdHJhcC9zcmMvRHJvcGRvd25NZW51LnN2ZWx0ZVwiO1xyXG4gICAgaW1wb3J0ICBEcm9wZG93blRvZ2dsZSBmcm9tIFwic3ZlbHRlc3RyYXAvc3JjL0Ryb3Bkb3duVG9nZ2xlLnN2ZWx0ZVwiO1xyXG5cclxuICAgIGNvbnN0IGNvbG9ycyA9IFtcclxuICAgICAgICBcInByaW1hcnlcIixcclxuICAgICAgICBcInNlY29uZGFyeVwiLFxyXG4gICAgICAgIFwic3VjY2Vzc1wiLFxyXG4gICAgICAgIFwiZGFuZ2VyXCIsXHJcbiAgICAgICAgXCJ3YXJuaW5nXCIsXHJcbiAgICAgICAgXCJpbmZvXCIsXHJcbiAgICAgICAgXCJsaWdodFwiLFxyXG4gICAgICAgIFwiZGFya1wiXHJcbiAgICBdO1xyXG4gICAgbGV0IGlzT3BlbiA9IGZhbHNlO1xyXG4gICAgbGV0IGxlZnRJc09wZW4gPSBmYWxzZTtcclxuICAgIGxldCByaWdodElzT3BlbiA9IGZhbHNlO1xyXG5cclxuPC9zY3JpcHQ+XHJcblxyXG48c3ZlbHRlOmhlYWQ+XHJcbiAgICA8dGl0bGU+e3RpdGxlfTwvdGl0bGU+XHJcbjwvc3ZlbHRlOmhlYWQ+XHJcbjxoMSBjbGFzcz1cIm10LTRcIj7QndC40YHQv9Cw0LTQsNGO0YnQtdC1INC60L7QvdGC0LXQutGB0YLQvdC+0LUg0LzQtdC90Y48L2gxPlxyXG48QnJlYWRjcnVtYiBjbGFzcz1cIm1iLTRcIj5cclxuICAgIDxCcmVhZGNydW1iSXRlbSBhY3RpdmU+0J3QuNGB0L/QsNC00LDRjtGJ0LXQtSDQutC+0L3RgtC10LrRgdGC0L3QvtC1INC80LXQvdGOPC9CcmVhZGNydW1iSXRlbT5cclxuPC9CcmVhZGNydW1iPlxyXG48IS0tPFJvdz4tLT5cclxuPCEtLSAgICA8ZGl2IGNsYXNzPVwiY29sLXhsLTZcIj4tLT5cclxuPCEtLSAgICAgICAgPGgzIGNsYXNzPVwibXQtNFwiPtCf0YDQuNC80LXRgDwvaDM+LS0+XHJcbjwhLS0gICAgPC9kaXY+LS0+XHJcbjwhLS08L1Jvdz4tLT5cclxuXHJcbjxSb3c+XHJcbiAgICA8ZGl2IGNsYXNzPVwiY29sLXhsLTZcIj5cclxuICAgICAgICAgIDxoMyBjbGFzcz1cIm10LTRcIj7Qn9GA0LjQvNC10YA8L2gzPlxyXG4gICAgICAgIDxwIGNsYXNzPVwibGVhZFwiPlxyXG4gICAgICAgICAgICDQn9C10YDQtdC60LvRjtGH0LDQudGC0LUg0LrQvtC90YLQtdC60YHRgtC90YvQtSDQvdCw0LrQu9Cw0LTQutC4INC00LvRjyDQvtGC0L7QsdGA0LDQttC10L3QuNGPINGB0L/QuNGB0LrQvtCyINGB0YHRi9C70L7QulxyXG4gICAgICAgICAgICDQuCDQvNC90L7Qs9C+0LUg0LTRgNGD0LPQvtC1INGBINC/0L7QvNC+0YnRjNGOINCy0YvQv9Cw0LTQsNGO0YnQtdCz0L4g0L/Qu9Cw0LPQuNC90LAgU3ZlbHRlc3RyYXAuXHJcbiAgICAgICAgPC9wPlxyXG4gICAgICAgIDxoNCBjbGFzcz1cIm10LTRcIj7QntCx0LfQvtGAPC9oND5cclxuICAgICAgICA8cD5Ecm9wZG93bnMgLSDRjdGC0L4g0L/QtdGA0LXQutC70Y7Rh9Cw0LXQvNGL0LUg0LrQvtC90YLQtdC60YHRgtC90YvQtSDQstC60LvQsNC00LrQuFxyXG4gICAgICAgICAgICDQtNC70Y8g0L7RgtC+0LHRgNCw0LbQtdC90LjRjyDRgdC/0LjRgdC60L7QsiDRgdGB0YvQu9C+0Log0Lgg0LzQvdC+0LPQvtCz0L4g0LTRgNGD0LPQvtCz0L4uXHJcbiAgICAgICAgICAgINCe0L3QuCDRgdC00LXQu9Cw0L3RiyDQuNC90YLQtdGA0LDQutGC0LjQstC90YvQvNC4INGBINC/0L7QvNC+0YnRjNGOINCy0YXQvtC00Y/RidC10LPQviDQsiDQutC+0LzQv9C70LXQutGCXHJcbiAgICAgICAgICAgIFN2ZWx0ZXN0cmFwINCy0YvQv9Cw0LTQsNGO0YnQtdCz0L4g0L/Qu9Cw0LPQuNC90LAgSmF2YVNjcmlwdC5cclxuICAgICAgICAgICAg0J7QvdC4INC/0LXRgNC10LrQu9GO0YfQsNGO0YLRgdGPINGJ0LXQu9GH0LrQvtC8INC80YvRiNC4LCDQsCDQvdC1INC90LDQstC10YjQuNCy0LDQvdC40LXQvDtcclxuICAgICAgICAgICAg0Y3RgtC+INC/0YDQtdC00L3QsNC80LXRgNC10L3QvdC+0LUg0LTQuNC30LDQudC90LXRgNGB0LrQvtC1INGA0LXRiNC10L3QuNC1LjwvcD5cclxuICAgIDwvZGl2PlxyXG4gICAgPGRpdiBjbGFzcz1cImNvbC14bC02XCI+XHJcbiAgICAgICAgPERyb3Bkb3duICAge2lzT3Blbn0gdG9nZ2xlPXsoKSA9PiAoaXNPcGVuID0gIWlzT3Blbil9PlxyXG4gICAgICAgICAgICA8RHJvcGRvd25Ub2dnbGUgY2FyZXQ+RHJvcGRvd248L0Ryb3Bkb3duVG9nZ2xlPlxyXG4gICAgICAgICAgICA8RHJvcGRvd25NZW51PlxyXG4gICAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbSBoZWFkZXI+0KXQtdC00LXRgDwvRHJvcGRvd25JdGVtPlxyXG4gICAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbT7QmtCw0LrQuNC1LdGC0L4g0LTQtdC50YHRgtCy0LjRjzwvRHJvcGRvd25JdGVtPlxyXG4gICAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbSBkaXNhYmxlZD7QlNC10LnRgdGC0LLQuNGPICjQvdC1INCw0LrRgtC40LLQvdC+KTwvRHJvcGRvd25JdGVtPlxyXG4gICAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbSBkaXZpZGVyIC8+XHJcbiAgICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtPkZvbyDQlNC10LnRgdGC0LLQuNGPPC9Ecm9wZG93bkl0ZW0+XHJcbiAgICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtPkJhciDQlNC10LnRgdGC0LLQuNGPPC9Ecm9wZG93bkl0ZW0+XHJcbiAgICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtPkJheiDQlNC10LnRgdGC0LLQuNGPPC9Ecm9wZG93bkl0ZW0+XHJcbiAgICAgICAgICAgIDwvRHJvcGRvd25NZW51PlxyXG4gICAgICAgIDwvRHJvcGRvd24+XHJcbiAgICA8L2Rpdj5cclxuPC9Sb3c+XHJcblxyXG48Um93PlxyXG4gICAgPGRpdiBjbGFzcz1cImNvbC14bC02XCI+XHJcbiAgICAgICAgPGgyIGNsYXNzPVwibXQtNFwiPtCS0YvRgNCw0LLQvdC40LLQsNC90LjQtTwvaDI+XHJcbiAgICAgICAgPGgzIGNsYXNzPVwibXQtNFwiPtCf0YDQuNC80LXRgDwvaDM+XHJcbiAgICAgICAgPERyb3Bkb3duIGlzT3Blbj17aXNPcGVufSB0b2dnbGU9XCJ7KCkgPT4gaXNPcGVuID0gIWlzT3Blbn1cIj5cclxuICAgICAgICAgICAgPERyb3Bkb3duVG9nZ2xlIGNhcmV0PlxyXG4gICAgICAgICAgICAgICAg0J3QuNGB0L/QsNC00LDRjtGJ0LXQtSDQvNC10L3RjiDQstGL0YDQsNCy0L3QtdC90L3QvtC1INC/0L4g0L/RgNCw0LLQvtC80YMg0LrRgNCw0Y5cclxuICAgICAgICAgICAgPC9Ecm9wZG93blRvZ2dsZT5cclxuICAgICAgICAgICAgPERyb3Bkb3duTWVudSByaWdodD5cclxuICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW0gaGVhZGVyPtCX0LDQs9C+0LvQvtCy0L7QujwvRHJvcGRvd25JdGVtPlxyXG4gICAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbSBkaXNhYmxlZD7QlNC10LnRgdGC0LLQuNC1PC9Ecm9wZG93bkl0ZW0+XHJcbiAgICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtPtCU0YDRg9Cz0L7QtSDQtNC10LnRgdGC0LLQuNC1PC9Ecm9wZG93bkl0ZW0+XHJcbiAgICAgICAgICAgIDwvRHJvcGRvd25NZW51PlxyXG4gICAgICAgIDwvRHJvcGRvd24+XHJcblxyXG4gICAgPC9kaXY+XHJcblxyXG48L1Jvdz5cclxuXHJcbjxSb3c+XHJcbiAgICA8ZGl2IGNsYXNzPVwiY29sLXhsLTEyXCI+XHJcbiAgICAgICAgPERyb3Bkb3duXHJcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb249XCJ1cFwiXHJcbiAgICAgICAgICAgICAgICB7aXNPcGVufVxyXG4gICAgICAgICAgICAgICAgdG9nZ2xlPXsoKSA9PiAoaXNPcGVuID0gIWlzT3Blbil9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgICA8RHJvcGRvd25Ub2dnbGUgY2FyZXQ+RHJvcHVwPC9Ecm9wZG93blRvZ2dsZT5cclxuICAgICAgICAgICAgPERyb3Bkb3duTWVudT5cclxuICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW0+QW5vdGhlciBBY3Rpb248L0Ryb3Bkb3duSXRlbT5cclxuICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW0+QW5vdGhlciBBY3Rpb248L0Ryb3Bkb3duSXRlbT5cclxuICAgICAgICAgICAgPC9Ecm9wZG93bk1lbnU+XHJcbiAgICAgICAgPC9Ecm9wZG93bj5cclxuXHJcbiAgICAgICAgPERyb3Bkb3duXHJcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb249XCJsZWZ0XCJcclxuICAgICAgICAgICAgICAgIGlzT3Blbj17bGVmdElzT3Blbn1cclxuICAgICAgICAgICAgICAgIHRvZ2dsZT17KCkgPT4gKGxlZnRJc09wZW4gPSAhbGVmdElzT3Blbil9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgICA8RHJvcGRvd25Ub2dnbGUgY2FyZXQ+RHJvcGxlZnQ8L0Ryb3Bkb3duVG9nZ2xlPlxyXG4gICAgICAgICAgICA8RHJvcGRvd25NZW51PlxyXG4gICAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbT5Bbm90aGVyIEFjdGlvbjwvRHJvcGRvd25JdGVtPlxyXG4gICAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbT5Bbm90aGVyIEFjdGlvbjwvRHJvcGRvd25JdGVtPlxyXG4gICAgICAgICAgICA8L0Ryb3Bkb3duTWVudT5cclxuICAgICAgICA8L0Ryb3Bkb3duPlxyXG5cclxuICAgICAgICA8RHJvcGRvd25cclxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbj1cInJpZ2h0XCJcclxuICAgICAgICAgICAgICAgIGlzT3Blbj17cmlnaHRJc09wZW59XHJcbiAgICAgICAgICAgICAgICB0b2dnbGU9eygpID0+IChyaWdodElzT3BlbiA9ICFyaWdodElzT3Blbil9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgICA8RHJvcGRvd25Ub2dnbGUgY2FyZXQ+RHJvcHJpZ2h0PC9Ecm9wZG93blRvZ2dsZT5cclxuICAgICAgICAgICAgPERyb3Bkb3duTWVudT5cclxuICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW0+QW5vdGhlciBBY3Rpb248L0Ryb3Bkb3duSXRlbT5cclxuICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW0+QW5vdGhlciBBY3Rpb248L0Ryb3Bkb3duSXRlbT5cclxuICAgICAgICAgICAgPC9Ecm9wZG93bk1lbnU+XHJcbiAgICAgICAgPC9Ecm9wZG93bj5cclxuICAgIDwvZGl2PlxyXG48L1Jvdz5cclxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3VCQTJFMEIsR0FBTTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrRUFBTixHQUFNOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsyQkErQlIsR0FBVTs7Ozs7Ozs7Ozs7NEJBWVYsR0FBVzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MkVBWlgsR0FBVTs7Ozs7Ozs7OzZFQVlWLEdBQVc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBckgzQixLQUFLLEdBQUcsZ0VBQWdFOztPQVV0RSxNQUFNO0VBQ1IsU0FBUztFQUNULFdBQVc7RUFDWCxTQUFTO0VBQ1QsUUFBUTtFQUNSLFNBQVM7RUFDVCxNQUFNO0VBQ04sT0FBTztFQUNQLE1BQU07OztLQUVOLE1BQU0sR0FBRyxLQUFLO0tBQ2QsVUFBVSxHQUFHLEtBQUs7S0FDbEIsV0FBVyxHQUFHLEtBQUs7b0NBaUNpQixNQUFNLElBQUksTUFBTTtzQ0FtQlgsTUFBTSxJQUFJLE1BQU07c0NBb0JsQyxNQUFNLElBQUksTUFBTTtzQ0FZaEIsVUFBVSxJQUFJLFVBQVU7c0NBWXhCLFdBQVcsSUFBSSxXQUFXOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
