import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, ah as Navbar, J as space, f as element, y as text, F as create_component, L as query_selector_all, j as detach_dev, K as claim_space, g as claim_element, h as children, z as claim_text, G as claim_component, k as attr_dev, l as add_location, n as insert_dev, o as append_dev, H as mount_component, r as transition_in, t as transition_out, I as destroy_component, aq as NavbarBrand, ar as NavbarToggler, ad as Collapse, p as group_outros, q as check_outros, M as destroy_each, ak as Nav, am as NavItem, ag as UncontrolledDropdown, an as NavLink, ai as DropdownToggle, aj as DropdownMenu, B as noop, al as DropdownItem } from './client.943a825b.js';
import { B as Breadcrumb, a as BreadcrumbItem } from './BreadcrumbItem.995d9cf0.js';
import { R as Row } from './Row.e46bdd42.js';
import './UncontrolledCollapse.5815a19b.js';

/* src\routes\ui\navbar.svelte generated by Svelte v3.18.1 */
const file = "src\\routes\\ui\\navbar.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (38:4) <BreadcrumbItem active>
function create_default_slot_28(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Навигационное меню");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Навигационное меню");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_28.name,
		type: "slot",
		source: "(38:4) <BreadcrumbItem active>",
		ctx
	});

	return block;
}

// (37:0) <Breadcrumb class="mb-4">
function create_default_slot_27(ctx) {
	let current;

	const breadcrumbitem = new BreadcrumbItem({
			props: {
				active: true,
				$$slots: { default: [create_default_slot_28] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(breadcrumbitem.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(breadcrumbitem.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(breadcrumbitem, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const breadcrumbitem_changes = {};

			if (dirty & /*$$scope*/ 512) {
				breadcrumbitem_changes.$$scope = { dirty, ctx };
			}

			breadcrumbitem.$set(breadcrumbitem_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(breadcrumbitem.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(breadcrumbitem.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(breadcrumbitem, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_27.name,
		type: "slot",
		source: "(37:0) <Breadcrumb class=\\\"mb-4\\\">",
		ctx
	});

	return block;
}

// (45:12) <NavbarBrand href="/" class="mr-auto">
function create_default_slot_26(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("λproton");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "λproton");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_26.name,
		type: "slot",
		source: "(45:12) <NavbarBrand href=\\\"/\\\" class=\\\"mr-auto\\\">",
		ctx
	});

	return block;
}

// (50:24) <NavLink href="#components/">
function create_default_slot_25(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Компоненты");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Компоненты");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_25.name,
		type: "slot",
		source: "(50:24) <NavLink href=\\\"#components/\\\">",
		ctx
	});

	return block;
}

// (49:20) <NavItem>
function create_default_slot_24(ctx) {
	let current;

	const navlink = new NavLink({
			props: {
				href: "#components/",
				$$slots: { default: [create_default_slot_25] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(navlink.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(navlink.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(navlink, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const navlink_changes = {};

			if (dirty & /*$$scope*/ 512) {
				navlink_changes.$$scope = { dirty, ctx };
			}

			navlink.$set(navlink_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(navlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(navlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(navlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_24.name,
		type: "slot",
		source: "(49:20) <NavItem>",
		ctx
	});

	return block;
}

// (53:24) <NavLink href="https://github.com/thinkjazz/lambda-proton">
function create_default_slot_23(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("GitHub");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "GitHub");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_23.name,
		type: "slot",
		source: "(53:24) <NavLink href=\\\"https://github.com/thinkjazz/lambda-proton\\\">",
		ctx
	});

	return block;
}

// (52:20) <NavItem>
function create_default_slot_22(ctx) {
	let current;

	const navlink = new NavLink({
			props: {
				href: "https://github.com/thinkjazz/lambda-proton",
				$$slots: { default: [create_default_slot_23] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(navlink.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(navlink.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(navlink, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const navlink_changes = {};

			if (dirty & /*$$scope*/ 512) {
				navlink_changes.$$scope = { dirty, ctx };
			}

			navlink.$set(navlink_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(navlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(navlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(navlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_22.name,
		type: "slot",
		source: "(52:20) <NavItem>",
		ctx
	});

	return block;
}

// (48:16) <Nav navbar>
function create_default_slot_21(ctx) {
	let t;
	let current;

	const navitem0 = new NavItem({
			props: {
				$$slots: { default: [create_default_slot_24] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const navitem1 = new NavItem({
			props: {
				$$slots: { default: [create_default_slot_22] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(navitem0.$$.fragment);
			t = space();
			create_component(navitem1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(navitem0.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(navitem1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(navitem0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(navitem1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const navitem0_changes = {};

			if (dirty & /*$$scope*/ 512) {
				navitem0_changes.$$scope = { dirty, ctx };
			}

			navitem0.$set(navitem0_changes);
			const navitem1_changes = {};

			if (dirty & /*$$scope*/ 512) {
				navitem1_changes.$$scope = { dirty, ctx };
			}

			navitem1.$set(navitem1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(navitem0.$$.fragment, local);
			transition_in(navitem1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(navitem0.$$.fragment, local);
			transition_out(navitem1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(navitem0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(navitem1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_21.name,
		type: "slot",
		source: "(48:16) <Nav navbar>",
		ctx
	});

	return block;
}

// (47:12) <Collapse {isOpen} navbar>
function create_default_slot_20(ctx) {
	let current;

	const nav = new Nav({
			props: {
				navbar: true,
				$$slots: { default: [create_default_slot_21] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(nav.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(nav.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(nav, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const nav_changes = {};

			if (dirty & /*$$scope*/ 512) {
				nav_changes.$$scope = { dirty, ctx };
			}

			nav.$set(nav_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(nav.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(nav.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(nav, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_20.name,
		type: "slot",
		source: "(47:12) <Collapse {isOpen} navbar>",
		ctx
	});

	return block;
}

// (44:8) <Navbar color="dark">
function create_default_slot_19(ctx) {
	let t0;
	let t1;
	let current;

	const navbarbrand = new NavbarBrand({
			props: {
				href: "/",
				class: "mr-auto",
				$$slots: { default: [create_default_slot_26] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const navbartoggler = new NavbarToggler({
			props: { className: "mr-2" },
			$$inline: true
		});

	navbartoggler.$on("click", /*toggler*/ ctx[3]);

	const collapse = new Collapse({
			props: {
				isOpen: /*isOpen*/ ctx[0],
				navbar: true,
				$$slots: { default: [create_default_slot_20] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(navbarbrand.$$.fragment);
			t0 = space();
			create_component(navbartoggler.$$.fragment);
			t1 = space();
			create_component(collapse.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(navbarbrand.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(navbartoggler.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(collapse.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(navbarbrand, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(navbartoggler, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(collapse, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const navbarbrand_changes = {};

			if (dirty & /*$$scope*/ 512) {
				navbarbrand_changes.$$scope = { dirty, ctx };
			}

			navbarbrand.$set(navbarbrand_changes);
			const collapse_changes = {};
			if (dirty & /*isOpen*/ 1) collapse_changes.isOpen = /*isOpen*/ ctx[0];

			if (dirty & /*$$scope*/ 512) {
				collapse_changes.$$scope = { dirty, ctx };
			}

			collapse.$set(collapse_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(navbarbrand.$$.fragment, local);
			transition_in(navbartoggler.$$.fragment, local);
			transition_in(collapse.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(navbarbrand.$$.fragment, local);
			transition_out(navbartoggler.$$.fragment, local);
			transition_out(collapse.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(navbarbrand, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(navbartoggler, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(collapse, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_19.name,
		type: "slot",
		source: "(44:8) <Navbar color=\\\"dark\\\">",
		ctx
	});

	return block;
}

// (41:0) <Row>
function create_default_slot_18(ctx) {
	let div;
	let h3;
	let t0;
	let t1;
	let current;

	const navbar = new Navbar({
			props: {
				color: "dark",
				$$slots: { default: [create_default_slot_19] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			h3 = element("h3");
			t0 = text("Пример");
			t1 = space();
			create_component(navbar.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h3 = claim_element(div_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, "Пример");
			h3_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			claim_component(navbar.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h3, "class", "mt-4");
			add_location(h3, file, 42, 8, 1704);
			attr_dev(div, "class", "col-xl-12");
			add_location(div, file, 41, 4, 1671);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h3);
			append_dev(h3, t0);
			append_dev(div, t1);
			mount_component(navbar, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const navbar_changes = {};

			if (dirty & /*$$scope, isOpen*/ 513) {
				navbar_changes.$$scope = { dirty, ctx };
			}

			navbar.$set(navbar_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(navbar.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(navbar.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(navbar);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_18.name,
		type: "slot",
		source: "(41:0) <Row>",
		ctx
	});

	return block;
}

// (64:12) <NavbarBrand href="/">
function create_default_slot_17(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("λproton navigation");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "λproton navigation");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_17.name,
		type: "slot",
		source: "(64:12) <NavbarBrand href=\\\"/\\\">",
		ctx
	});

	return block;
}

// (69:24) <NavLink href="#components/">
function create_default_slot_16(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Компоненты");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Компоненты");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_16.name,
		type: "slot",
		source: "(69:24) <NavLink href=\\\"#components/\\\">",
		ctx
	});

	return block;
}

// (68:20) <NavItem>
function create_default_slot_15(ctx) {
	let current;

	const navlink = new NavLink({
			props: {
				href: "#components/",
				$$slots: { default: [create_default_slot_16] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(navlink.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(navlink.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(navlink, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const navlink_changes = {};

			if (dirty & /*$$scope*/ 512) {
				navlink_changes.$$scope = { dirty, ctx };
			}

			navlink.$set(navlink_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(navlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(navlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(navlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_15.name,
		type: "slot",
		source: "(68:20) <NavItem>",
		ctx
	});

	return block;
}

// (72:24) <NavLink href="https://github.com/thinkjazz/lambda-proton">
function create_default_slot_14(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("GitHub");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "GitHub");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_14.name,
		type: "slot",
		source: "(72:24) <NavLink href=\\\"https://github.com/thinkjazz/lambda-proton\\\">",
		ctx
	});

	return block;
}

// (71:20) <NavItem>
function create_default_slot_13(ctx) {
	let current;

	const navlink = new NavLink({
			props: {
				href: "https://github.com/thinkjazz/lambda-proton",
				$$slots: { default: [create_default_slot_14] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(navlink.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(navlink.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(navlink, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const navlink_changes = {};

			if (dirty & /*$$scope*/ 512) {
				navlink_changes.$$scope = { dirty, ctx };
			}

			navlink.$set(navlink_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(navlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(navlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(navlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13.name,
		type: "slot",
		source: "(71:20) <NavItem>",
		ctx
	});

	return block;
}

// (75:24) <DropdownToggle nav caret>
function create_default_slot_12(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Элемент");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Элемент");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12.name,
		type: "slot",
		source: "(75:24) <DropdownToggle nav caret>",
		ctx
	});

	return block;
}

// (77:28) <DropdownItem>
function create_default_slot_11(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Элемент 1");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Элемент 1");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11.name,
		type: "slot",
		source: "(77:28) <DropdownItem>",
		ctx
	});

	return block;
}

// (78:28) <DropdownItem>
function create_default_slot_10(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Элемент 2");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Элемент 2");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(78:28) <DropdownItem>",
		ctx
	});

	return block;
}

// (80:28) <DropdownItem>
function create_default_slot_9(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Сброс");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Сброс");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(80:28) <DropdownItem>",
		ctx
	});

	return block;
}

// (76:24) <DropdownMenu right>
function create_default_slot_8(ctx) {
	let t0;
	let t1;
	let t2;
	let current;

	const dropdownitem0 = new DropdownItem({
			props: {
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownitem1 = new DropdownItem({
			props: {
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownitem2 = new DropdownItem({ props: { divider: true }, $$inline: true });

	const dropdownitem3 = new DropdownItem({
			props: {
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dropdownitem0.$$.fragment);
			t0 = space();
			create_component(dropdownitem1.$$.fragment);
			t1 = space();
			create_component(dropdownitem2.$$.fragment);
			t2 = space();
			create_component(dropdownitem3.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(dropdownitem0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(dropdownitem1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(dropdownitem2.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(dropdownitem3.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(dropdownitem0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(dropdownitem1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(dropdownitem2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(dropdownitem3, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdownitem0_changes = {};

			if (dirty & /*$$scope*/ 512) {
				dropdownitem0_changes.$$scope = { dirty, ctx };
			}

			dropdownitem0.$set(dropdownitem0_changes);
			const dropdownitem1_changes = {};

			if (dirty & /*$$scope*/ 512) {
				dropdownitem1_changes.$$scope = { dirty, ctx };
			}

			dropdownitem1.$set(dropdownitem1_changes);
			const dropdownitem3_changes = {};

			if (dirty & /*$$scope*/ 512) {
				dropdownitem3_changes.$$scope = { dirty, ctx };
			}

			dropdownitem3.$set(dropdownitem3_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdownitem0.$$.fragment, local);
			transition_in(dropdownitem1.$$.fragment, local);
			transition_in(dropdownitem2.$$.fragment, local);
			transition_in(dropdownitem3.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdownitem0.$$.fragment, local);
			transition_out(dropdownitem1.$$.fragment, local);
			transition_out(dropdownitem2.$$.fragment, local);
			transition_out(dropdownitem3.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdownitem0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(dropdownitem1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(dropdownitem2, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(dropdownitem3, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(76:24) <DropdownMenu right>",
		ctx
	});

	return block;
}

// (74:20) <UncontrolledDropdown nav inNavbar>
function create_default_slot_7(ctx) {
	let t;
	let current;

	const dropdowntoggle = new DropdownToggle({
			props: {
				nav: true,
				caret: true,
				$$slots: { default: [create_default_slot_12] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const dropdownmenu = new DropdownMenu({
			props: {
				right: true,
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dropdowntoggle.$$.fragment);
			t = space();
			create_component(dropdownmenu.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(dropdowntoggle.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(dropdownmenu.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(dropdowntoggle, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(dropdownmenu, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdowntoggle_changes = {};

			if (dirty & /*$$scope*/ 512) {
				dropdowntoggle_changes.$$scope = { dirty, ctx };
			}

			dropdowntoggle.$set(dropdowntoggle_changes);
			const dropdownmenu_changes = {};

			if (dirty & /*$$scope*/ 512) {
				dropdownmenu_changes.$$scope = { dirty, ctx };
			}

			dropdownmenu.$set(dropdownmenu_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdowntoggle.$$.fragment, local);
			transition_in(dropdownmenu.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdowntoggle.$$.fragment, local);
			transition_out(dropdownmenu.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdowntoggle, detaching);
			if (detaching) detach_dev(t);
			destroy_component(dropdownmenu, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(74:20) <UncontrolledDropdown nav inNavbar>",
		ctx
	});

	return block;
}

// (67:16) <Nav class="ml-auto" navbar>
function create_default_slot_6(ctx) {
	let t0;
	let t1;
	let current;

	const navitem0 = new NavItem({
			props: {
				$$slots: { default: [create_default_slot_15] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const navitem1 = new NavItem({
			props: {
				$$slots: { default: [create_default_slot_13] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const uncontrolleddropdown = new UncontrolledDropdown({
			props: {
				nav: true,
				inNavbar: true,
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(navitem0.$$.fragment);
			t0 = space();
			create_component(navitem1.$$.fragment);
			t1 = space();
			create_component(uncontrolleddropdown.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(navitem0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(navitem1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(uncontrolleddropdown.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(navitem0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(navitem1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(uncontrolleddropdown, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const navitem0_changes = {};

			if (dirty & /*$$scope*/ 512) {
				navitem0_changes.$$scope = { dirty, ctx };
			}

			navitem0.$set(navitem0_changes);
			const navitem1_changes = {};

			if (dirty & /*$$scope*/ 512) {
				navitem1_changes.$$scope = { dirty, ctx };
			}

			navitem1.$set(navitem1_changes);
			const uncontrolleddropdown_changes = {};

			if (dirty & /*$$scope*/ 512) {
				uncontrolleddropdown_changes.$$scope = { dirty, ctx };
			}

			uncontrolleddropdown.$set(uncontrolleddropdown_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(navitem0.$$.fragment, local);
			transition_in(navitem1.$$.fragment, local);
			transition_in(uncontrolleddropdown.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(navitem0.$$.fragment, local);
			transition_out(navitem1.$$.fragment, local);
			transition_out(uncontrolleddropdown.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(navitem0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(navitem1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(uncontrolleddropdown, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(67:16) <Nav class=\\\"ml-auto\\\" navbar>",
		ctx
	});

	return block;
}

// (66:12) <Collapse {isOpen} navbar expand="md" on:update={handleUpdate}>
function create_default_slot_5(ctx) {
	let current;

	const nav = new Nav({
			props: {
				class: "ml-auto",
				navbar: true,
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(nav.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(nav.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(nav, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const nav_changes = {};

			if (dirty & /*$$scope*/ 512) {
				nav_changes.$$scope = { dirty, ctx };
			}

			nav.$set(nav_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(nav.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(nav.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(nav, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(66:12) <Collapse {isOpen} navbar expand=\\\"md\\\" on:update={handleUpdate}>",
		ctx
	});

	return block;
}

// (63:8) <Navbar color="light" light expand="md">
function create_default_slot_4(ctx) {
	let t0;
	let t1;
	let current;

	const navbarbrand = new NavbarBrand({
			props: {
				href: "/",
				$$slots: { default: [create_default_slot_17] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const navbartoggler = new NavbarToggler({ $$inline: true });
	navbartoggler.$on("click", /*click_handler*/ ctx[5]);

	const collapse = new Collapse({
			props: {
				isOpen: /*isOpen*/ ctx[0],
				navbar: true,
				expand: "md",
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	collapse.$on("update", /*handleUpdate*/ ctx[2]);

	const block = {
		c: function create() {
			create_component(navbarbrand.$$.fragment);
			t0 = space();
			create_component(navbartoggler.$$.fragment);
			t1 = space();
			create_component(collapse.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(navbarbrand.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(navbartoggler.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(collapse.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(navbarbrand, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(navbartoggler, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(collapse, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const navbarbrand_changes = {};

			if (dirty & /*$$scope*/ 512) {
				navbarbrand_changes.$$scope = { dirty, ctx };
			}

			navbarbrand.$set(navbarbrand_changes);
			const collapse_changes = {};
			if (dirty & /*isOpen*/ 1) collapse_changes.isOpen = /*isOpen*/ ctx[0];

			if (dirty & /*$$scope*/ 512) {
				collapse_changes.$$scope = { dirty, ctx };
			}

			collapse.$set(collapse_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(navbarbrand.$$.fragment, local);
			transition_in(navbartoggler.$$.fragment, local);
			transition_in(collapse.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(navbarbrand.$$.fragment, local);
			transition_out(navbartoggler.$$.fragment, local);
			transition_out(collapse.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(navbarbrand, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(navbartoggler, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(collapse, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(63:8) <Navbar color=\\\"light\\\" light expand=\\\"md\\\">",
		ctx
	});

	return block;
}

// (60:0) <Row>
function create_default_slot_3(ctx) {
	let div;
	let h3;
	let t0;
	let t1;
	let current;

	const navbar = new Navbar({
			props: {
				color: "light",
				light: true,
				expand: "md",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			h3 = element("h3");
			t0 = text("Пример");
			t1 = space();
			create_component(navbar.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h3 = claim_element(div_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, "Пример");
			h3_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			claim_component(navbar.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h3, "class", "mt-4");
			add_location(h3, file, 61, 8, 2410);
			attr_dev(div, "class", "col-xl-12");
			add_location(div, file, 60, 4, 2377);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h3);
			append_dev(h3, t0);
			append_dev(div, t1);
			mount_component(navbar, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const navbar_changes = {};

			if (dirty & /*$$scope, isOpen*/ 513) {
				navbar_changes.$$scope = { dirty, ctx };
			}

			navbar.$set(navbar_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(navbar.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(navbar.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(navbar);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(60:0) <Row>",
		ctx
	});

	return block;
}

// (103:16) <NavbarBrand href="/">
function create_default_slot_2(ctx) {
	let t0_value = /*color*/ ctx[6] + "";
	let t0;
	let t1;

	const block = {
		c: function create() {
			t0 = text(t0_value);
			t1 = text(" Navbar");
		},
		l: function claim(nodes) {
			t0 = claim_text(nodes, t0_value);
			t1 = claim_text(nodes, " Navbar");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(103:16) <NavbarBrand href=\\\"/\\\">",
		ctx
	});

	return block;
}

// (97:12) <Navbar                      color={color}                      dark={color === 'dark' || color === 'primary'}                      light={color !== 'light' && color !== 'primary'}                      class="mb-2"              >
function create_default_slot_1(ctx) {
	let t;
	let current;

	const navbarbrand = new NavbarBrand({
			props: {
				href: "/",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(navbarbrand.$$.fragment);
			t = space();
		},
		l: function claim(nodes) {
			claim_component(navbarbrand.$$.fragment, nodes);
			t = claim_space(nodes);
		},
		m: function mount(target, anchor) {
			mount_component(navbarbrand, target, anchor);
			insert_dev(target, t, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const navbarbrand_changes = {};

			if (dirty & /*$$scope*/ 512) {
				navbarbrand_changes.$$scope = { dirty, ctx };
			}

			navbarbrand.$set(navbarbrand_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(navbarbrand.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(navbarbrand.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(navbarbrand, detaching);
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(97:12) <Navbar                      color={color}                      dark={color === 'dark' || color === 'primary'}                      light={color !== 'light' && color !== 'primary'}                      class=\\\"mb-2\\\"              >",
		ctx
	});

	return block;
}

// (96:8) {#each colors as color}
function create_each_block(ctx) {
	let current;

	const navbar = new Navbar({
			props: {
				color: /*color*/ ctx[6],
				dark: /*color*/ ctx[6] === "dark" || /*color*/ ctx[6] === "primary",
				light: /*color*/ ctx[6] !== "light" && /*color*/ ctx[6] !== "primary",
				class: "mb-2",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(navbar.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(navbar.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(navbar, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const navbar_changes = {};

			if (dirty & /*$$scope*/ 512) {
				navbar_changes.$$scope = { dirty, ctx };
			}

			navbar.$set(navbar_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(navbar.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(navbar.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(navbar, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(96:8) {#each colors as color}",
		ctx
	});

	return block;
}

// (88:0) <Row>
function create_default_slot(ctx) {
	let div;
	let h2;
	let t0;
	let t1;
	let p;
	let t2;
	let code0;
	let t3;
	let t4;
	let code1;
	let t5;
	let t6;
	let code2;
	let t7;
	let t8;
	let code3;
	let t9;
	let t10;
	let t11;
	let current;
	let each_value = /*colors*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			div = element("div");
			h2 = element("h2");
			t0 = text("Цветные схемы навигационного меню");
			t1 = space();
			p = element("p");
			t2 = text("Измените цвет фона Навбара с помощью цветной  ");
			code0 = element("code");
			t3 = text("color");
			t4 = text(" пропсы (свойство).\r\n            Используйте ");
			code1 = element("code");
			t5 = text("light");
			t6 = text(" or ");
			code2 = element("code");
			t7 = text("dark");
			t8 = text(" пропсы\r\n            чтобы изменить цвет текста на панели навигации для более светлых или темных ");
			code3 = element("code");
			t9 = text("color");
			t10 = text(" значений.");
			t11 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h2 = claim_element(div_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "Цветные схемы навигационного меню");
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			p = claim_element(div_nodes, "P", { class: true });
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, "Измените цвет фона Навбара с помощью цветной  ");
			code0 = claim_element(p_nodes, "CODE", {});
			var code0_nodes = children(code0);
			t3 = claim_text(code0_nodes, "color");
			code0_nodes.forEach(detach_dev);
			t4 = claim_text(p_nodes, " пропсы (свойство).\r\n            Используйте ");
			code1 = claim_element(p_nodes, "CODE", {});
			var code1_nodes = children(code1);
			t5 = claim_text(code1_nodes, "light");
			code1_nodes.forEach(detach_dev);
			t6 = claim_text(p_nodes, " or ");
			code2 = claim_element(p_nodes, "CODE", {});
			var code2_nodes = children(code2);
			t7 = claim_text(code2_nodes, "dark");
			code2_nodes.forEach(detach_dev);
			t8 = claim_text(p_nodes, " пропсы\r\n            чтобы изменить цвет текста на панели навигации для более светлых или темных ");
			code3 = claim_element(p_nodes, "CODE", {});
			var code3_nodes = children(code3);
			t9 = claim_text(code3_nodes, "color");
			code3_nodes.forEach(detach_dev);
			t10 = claim_text(p_nodes, " значений.");
			p_nodes.forEach(detach_dev);
			t11 = claim_space(div_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "mt-4");
			add_location(h2, file, 89, 8, 3701);
			add_location(code0, file, 91, 58, 3842);
			add_location(code1, file, 92, 24, 3905);
			add_location(code2, file, 92, 46, 3927);
			add_location(code3, file, 93, 88, 4041);
			attr_dev(p, "class", "info");
			add_location(p, file, 90, 8, 3766);
			attr_dev(div, "class", "col-xl-12");
			add_location(div, file, 88, 4, 3668);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h2);
			append_dev(h2, t0);
			append_dev(div, t1);
			append_dev(div, p);
			append_dev(p, t2);
			append_dev(p, code0);
			append_dev(code0, t3);
			append_dev(p, t4);
			append_dev(p, code1);
			append_dev(code1, t5);
			append_dev(p, t6);
			append_dev(p, code2);
			append_dev(code2, t7);
			append_dev(p, t8);
			append_dev(p, code3);
			append_dev(code3, t9);
			append_dev(p, t10);
			append_dev(div, t11);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*colors*/ 2) {
				each_value = /*colors*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(88:0) <Row>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let title_value;
	let t0;
	let h1;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let current;
	document.title = title_value = /*title*/ ctx[4];

	const breadcrumb = new Breadcrumb({
			props: {
				class: "mb-4",
				$$slots: { default: [create_default_slot_27] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row0 = new Row({
			props: {
				$$slots: { default: [create_default_slot_18] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row1 = new Row({
			props: {
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const row2 = new Row({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("Навигационное меню");
			t2 = space();
			create_component(breadcrumb.$$.fragment);
			t3 = space();
			create_component(row0.$$.fragment);
			t4 = space();
			create_component(row1.$$.fragment);
			t5 = space();
			create_component(row2.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-46oba3\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Навигационное меню");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			claim_component(breadcrumb.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(row0.$$.fragment, nodes);
			t4 = claim_space(nodes);
			claim_component(row1.$$.fragment, nodes);
			t5 = claim_space(nodes);
			claim_component(row2.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "mt-4");
			add_location(h1, file, 35, 0, 1510);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			mount_component(breadcrumb, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(row0, target, anchor);
			insert_dev(target, t4, anchor);
			mount_component(row1, target, anchor);
			insert_dev(target, t5, anchor);
			mount_component(row2, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*title*/ 16) && title_value !== (title_value = /*title*/ ctx[4])) {
				document.title = title_value;
			}

			const breadcrumb_changes = {};

			if (dirty & /*$$scope*/ 512) {
				breadcrumb_changes.$$scope = { dirty, ctx };
			}

			breadcrumb.$set(breadcrumb_changes);
			const row0_changes = {};

			if (dirty & /*$$scope, isOpen*/ 513) {
				row0_changes.$$scope = { dirty, ctx };
			}

			row0.$set(row0_changes);
			const row1_changes = {};

			if (dirty & /*$$scope, isOpen*/ 513) {
				row1_changes.$$scope = { dirty, ctx };
			}

			row1.$set(row1_changes);
			const row2_changes = {};

			if (dirty & /*$$scope*/ 512) {
				row2_changes.$$scope = { dirty, ctx };
			}

			row2.$set(row2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(breadcrumb.$$.fragment, local);
			transition_in(row0.$$.fragment, local);
			transition_in(row1.$$.fragment, local);
			transition_in(row2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(breadcrumb.$$.fragment, local);
			transition_out(row0.$$.fragment, local);
			transition_out(row1.$$.fragment, local);
			transition_out(row2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			destroy_component(breadcrumb, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(row0, detaching);
			if (detaching) detach_dev(t4);
			destroy_component(row1, detaching);
			if (detaching) detach_dev(t5);
			destroy_component(row2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const colors = [
		"primary",
		"secondary",
		"success",
		"danger",
		"warning",
		"info",
		"light",
		"dark"
	];

	let isOpen = false;

	function handleUpdate(event) {
		$$invalidate(0, isOpen = event.detail.isOpen);
	}

	const toggler = () => $$invalidate(0, isOpen = !isOpen);
	let title = "Навигационное меню | UI | Пользовательский Интерфейс";
	const click_handler = () => $$invalidate(0, isOpen = !isOpen);

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("isOpen" in $$props) $$invalidate(0, isOpen = $$props.isOpen);
		if ("title" in $$props) $$invalidate(4, title = $$props.title);
	};

	return [isOpen, colors, handleUpdate, toggler, title, click_handler];
}

class Navbar_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Navbar_1",
			options,
			id: create_fragment.name
		});
	}
}

export default Navbar_1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
