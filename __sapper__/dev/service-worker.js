(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1585535648062;

	const files = [
		"service-worker-index.html",
		"chart.png",
		"dashboard.png",
		"error-404-monochrome.svg",
		"favicon.png",
		"global.css",
		"great-success.png",
		"l-proton-logo-2.png",
		"l-proton-logo.png",
		"l-proton.css",
		"light.png",
		"logo-192.png",
		"logo-512.png",
		"manifest.json",
		"response.png",
		"settings.png",
		"static.png",
		"tables.png"
	];

	const shell = [
		"client/client.2aef430b.js",
		"client/BreadcrumbItem.fc9463e9.js",
		"client/CardBody.ea3b0c22.js",
		"client/CardHeader.c1a3c032.js",
		"client/CardText.002ea404.js",
		"client/index.29c070a9.js",
		"client/Row.a1d0e1a1.js",
		"client/CardFooter.bdb1e9ad.js",
		"client/Table.d86d1879.js",
		"client/Image.3801f814.js",
		"client/AreaChart.e36aa4c4.js",
		"client/BarChart.6cec7ada.js",
		"client/activity_log.f048bcc0.js",
		"client/FormGroup.aaffd2d0.js",
		"client/settings.cf885cc5.js",
		"client/static_navigation.a5e02225.js",
		"client/light_sidenav.fd60afe3.js",
		"client/charts.311d3383.js",
		"client/tables.43a840f1.js",
		"client/_layout.293cfd2a.js",
		"client/login.7e692579.js",
		"client/Col.3a2f7327.js",
		"client/register.e485bc83.js",
		"client/forget_password.957fb076.js",
		"client/_layout.39245b1b.js",
		"client/error_401.1a203bdd.js",
		"client/error_404.41e38955.js",
		"client/error_500.062de541.js",
		"client/_layout.2c0576d1.js",
		"client/index.6443f093.js",
		"client/[slug].241dd925.js",
		"client/ui.c284366d.js",
		"client/_layout.b9cc6db1.js",
		"client/sapper-dev-client.89e34bae.js",
		"client/client.3d6b51f2.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener('install', event => {
		event.waitUntil(
			caches
				.open(ASSETS)
				.then(cache => cache.addAll(to_cache))
				.then(() => {
					self.skipWaiting();
				})
		);
	});

	self.addEventListener('activate', event => {
		event.waitUntil(
			caches.keys().then(async keys => {
				// delete old caches
				for (const key of keys) {
					if (key !== ASSETS) await caches.delete(key);
				}

				self.clients.claim();
			})
		);
	});

	self.addEventListener('fetch', event => {
		if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

		const url = new URL(event.request.url);

		// don't try to handle e.g. data: URIs
		if (!url.protocol.startsWith('http')) return;

		// ignore dev server requests
		if (url.hostname === self.location.hostname && url.port !== self.location.port) return;

		// always serve static files and bundler-generated assets from cache
		if (url.host === self.location.host && cached.has(url.pathname)) {
			event.respondWith(caches.match(event.request));
			return;
		}

		// for pages, you might want to serve a shell `service-worker-index.html` file,
		// which Sapper has generated for you. It's not right for every
		// app, but if it's right for yours then uncomment this section
		/*
		if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
			event.respondWith(caches.match('/service-worker-index.html'));
			return;
		}
		*/

		if (event.request.cache === 'only-if-cached') return;

		// for everything else, try the network first, falling back to
		// cache if the user is offline. (If the pages never change, you
		// might prefer a cache-first approach to a network-first one.)
		event.respondWith(
			caches
				.open(`offline${timestamp}`)
				.then(async cache => {
					try {
						const response = await fetch(event.request);
						cache.put(event.request, response.clone());
						return response;
					} catch(err) {
						const response = await cache.match(event.request);
						if (response) return response;

						throw err;
					}
				})
		);
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
