(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1586389461902;

	const files = [
		"service-worker-index.html",
		"alert.png",
		"badge.png",
		"breadcrumbs.png",
		"buttons.png",
		"chart.png",
		"dashboard.png",
		"error-404-monochrome.svg",
		"favicon.png",
		"global.css",
		"great-success.png",
		"l-proton-logo-2.png",
		"l-proton-logo.png",
		"l-proton.css",
		"light.png",
		"logo-192.png",
		"logo-512.png",
		"manifest.json",
		"response.png",
		"settings.png",
		"static.png",
		"tables.png"
	];

	const shell = [
		"client/client.ee2271d7.js",
		"client/BreadcrumbItem.9bfa2577.js",
		"client/CardBody.5a42a6f7.js",
		"client/CardHeader.3ff7c52f.js",
		"client/CardText.f07d4f63.js",
		"client/CardSubtitle.df96adbe.js",
		"client/Row.c305252a.js",
		"client/CardFooter.39242889.js",
		"client/Table.8418eb4e.js",
		"client/Image.2a4a45ea.js",
		"client/index.f352ae26.js",
		"client/Table.2e2477cf.js",
		"client/AreaChart.c33e8ce8.js",
		"client/BarChart.43b6378e.js",
		"client/Progress.2384048f.js",
		"client/activity_log.451e4d05.js",
		"client/FormGroup.88c9cd6d.js",
		"client/settings.c1096ef2.js",
		"client/static_navigation.66060965.js",
		"client/light_sidenav.1c11db02.js",
		"client/charts.9859118b.js",
		"client/tables.83cf1fe7.js",
		"client/_layout.ce203594.js",
		"client/login.d12d906d.js",
		"client/Col.2ff4bb0e.js",
		"client/register.c81ff3d9.js",
		"client/forget_password.701eb78b.js",
		"client/_layout.774e9d0c.js",
		"client/error_401.ad7464cf.js",
		"client/error_404.928d597d.js",
		"client/error_500.4b513e18.js",
		"client/_layout.010540eb.js",
		"client/index.408573b2.js",
		"client/[slug].4750ee27.js",
		"client/_layout.e9d75806.js",
		"client/FormText.e0038520.js",
		"client/customInputs.e12fca9d.js",
		"client/ButtonGroup.6a671ea6.js",
		"client/buttonGroup.33bf6dbd.js",
		"client/breadcrumb.f7bd6bd3.js",
		"client/inputGroup.f46bc469.js",
		"client/Alert.50df13fc.js",
		"client/Badge.3a51e4af.js",
		"client/index.39f3039b.js",
		"client/ButtonToolbar.fbe11a32.js",
		"client/CardTitle.a861b338.js",
		"client/CarouselCaption.5879d9ee.js",
		"client/ModalHeader.e99e7fd4.js",
		"client/UncontrolledCollapse.ecad44ca.js",
		"client/pagination.bf889388.js",
		"client/dropdowns.aa79e7f9.js",
		"client/carousel.dffda33f.js",
		"client/collapse.37d7c954.js",
		"client/progress.66d2055a.js",
		"client/spinners.b56229fc.js",
		"client/template.01c10e4d.js",
		"client/buttons.5ff58402.js",
		"client/alerts.f9a6bfec.js",
		"client/navbar.2ebb41e1.js",
		"client/badge.d87c1689.js",
		"client/input.26d93048.js",
		"client/modal.4f0bfbd9.js",
		"client/card.6fea2857.js",
		"client/grid.b9b22f9e.js",
		"client/sapper-dev-client.89e34bae.js",
		"client/client.d9b28616.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener('install', event => {
		event.waitUntil(
			caches
				.open(ASSETS)
				.then(cache => cache.addAll(to_cache))
				.then(() => {
					self.skipWaiting();
				})
		);
	});

	self.addEventListener('activate', event => {
		event.waitUntil(
			caches.keys().then(async keys => {
				// delete old caches
				for (const key of keys) {
					if (key !== ASSETS) await caches.delete(key);
				}

				self.clients.claim();
			})
		);
	});

	self.addEventListener('fetch', event => {
		if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

		const url = new URL(event.request.url);

		// don't try to handle e.g. data: URIs
		if (!url.protocol.startsWith('http')) return;

		// ignore dev server requests
		if (url.hostname === self.location.hostname && url.port !== self.location.port) return;

		// always serve static files and bundler-generated assets from cache
		if (url.host === self.location.host && cached.has(url.pathname)) {
			event.respondWith(caches.match(event.request));
			return;
		}

		// for pages, you might want to serve a shell `service-worker-index.html` file,
		// which Sapper has generated for you. It's not right for every
		// app, but if it's right for yours then uncomment this section
		/*
		if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
			event.respondWith(caches.match('/service-worker-index.html'));
			return;
		}
		*/

		if (event.request.cache === 'only-if-cached') return;

		// for everything else, try the network first, falling back to
		// cache if the user is offline. (If the pages never change, you
		// might prefer a cache-first approach to a network-first one.)
		event.respondWith(
			caches
				.open(`offline${timestamp}`)
				.then(async cache => {
					try {
						const response = await fetch(event.request);
						cache.put(event.request, response.clone());
						return response;
					} catch(err) {
						const response = await cache.match(event.request);
						if (response) return response;

						throw err;
					}
				})
		);
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
